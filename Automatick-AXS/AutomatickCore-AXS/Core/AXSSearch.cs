using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using HtmlAgilityPack;
using System.Threading;
using System.Net;
using System.IO;
using System.Drawing;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.Xml;
using System.Windows.Forms;
using System.IO.Compression;
using System.Globalization;
using Automatick.Logging;
using System.Web;
using System.Collections;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System.Net.Sockets;
using TCPClient;
using CapsiumSharedMessages;
using System.Threading.Tasks;

namespace Automatick.Core
{
    [Serializable]
    public class pUnits
    {
        public List<string> itemNums = new List<string>();
        public string purchaseUnit;
        public List<string> quantity = new List<string>();
    }


    [Serializable]
    public class AXSSearch : ITicketSearch
    {
        
        public string TemporaryURL
        {
            get;
            set;
        }

        public string X_Distill_Ajax { get; set; }

        public string PID_URL { get; set; }

        #region Variables
        public String PathAutobuyLogs = Environment.CurrentDirectory + @"\AutobuyLogs\";
        public AutoResetEvent captchaload = null;
        Boolean _ifCaptchaWaiting = false;
        AutoResetEvent _sleep = null;

        public List<pUnits> pUnits = new List<pUnits>();
        List<String> PmCodes;
        private MD5CryptoServiceProvider _md5 = new MD5CryptoServiceProvider();
        //public ITicketParameter _CurrentParameter = null;
        Boolean _ifRestarting = false;
        AXSTicketAccount _selectedAccountForAutoBuy = null;
        AXSEvent _tmEvent = null;
        Proxy _proxy = null;
        int _indexOfLastSelectedAccount = 0;
        Boolean _ifManualBuyWithoutProxy = false;
        frmSelectDeliveryOption _frmSelectDO = null;
        frmSelectAccount _frmSelectAccount = null;
        bool autobuytry2 = false;
        bool retry = true;
        Boolean isSplitPopUp = false;
        IAutoCaptchaService solveAutoCaptcha = null;
        String eventID = String.Empty;

        public String EventID
        {
            get { return eventID; }
            set { eventID = value; }
        }

        Boolean _ifStopping = false;
        System.Threading.Timer timeoutStopping = null;
        Thread StartThread = null;

        string eventDate = string.Empty;
        string eventTime = string.Empty;
        public String _SelectedDeliveryOption = null;
        AXSDeliveryOption Delivery = null;

        public Stopping stopping
        {
            get;
            set;
        }

        private BrowserSession _session = null;

        public BrowserSession Session
        {
            get { return _session; }
            set { _session = value; }
        }

        public ApplicationStartUp _AppStartUp
        {
            get { return appStartup; }
            set { appStartup = value; }
        }
        public AXSEvent TmEvent
        {
            get { return _tmEvent; }
        }

        public List<AXSSection> Sections
        {
            get;
            set;
        }

        public List<MultiEvent> MultiEvents
        {
            get;
            set;
        }

        public String RecaptchaV2Key
        {
            get;
            set;
        }

        private AutobuyLogs autobuyLog { get; set; }

        private string cfclearance
        {
            get;
            set;
        }

        #endregion

        #region ITicketSearch Members
        public System.Drawing.Bitmap FlagImage
        {
            get;
            set;
        }

        public ResetAfterStop resetAfterStop
        {
            get;
            set;
        }

        public Parameter Parameter
        {
            get;
            set;
        }

        public Captcha Captcha
        {
            get;
            set;
        }

        public String Recaptcha
        {
            get;
            set;
        }

        public Boolean ifMap
        {
            get;
            set;
        }

        public ITicketParameter _CurrentParameter
        {
            get;
            set;
        }

        public String extCustId
        {
            get;
            set;
        }

        public String Client_ID
        {
            get;
            set;
        }

        public String AccessToken
        {
            get;
            set;
        }

        public String Client_Secret
        {
            get;
            set;
        }

        public Boolean SkipAsGuest
        {
            get;
            set;
        }

        public ITicket Ticket
        {
            get;
            set;
        }

        /// <summary>
        /// This property is for Droptick
        /// </summary>
        public String TicketName
        {
            get
            {
                String ticketName = String.Empty;
                if (this.Ticket != null)
                {
                    ticketName = this.Ticket.TicketName;
                }
                return ticketName;
            }
        }

        public Proxy Proxy
        {
            get { return _proxy; }
            set { _proxy = value; }
        }

        public String Section
        {
            get;
            set;
        }

        public String Row
        {
            get;
            set;
        }

        public String Seat
        {
            get;
            set;
        }

        public String TotalPrice
        {
            get;
            set;
        }

        public String Price
        {
            get;
            set;
        }

        public String Quantity
        {
            get;
            set;
        }

        public String Description
        {
            get;
            set;
        }

        public String TimeLeft
        {
            get;
            set;
        }

        public String MoreInfo
        {
            get;
            set;
        }

        public String Status
        {
            get;
            set;
        }

        public Boolean IfUseAutoCaptcha
        {
            get;
            set;
        }

        public Boolean IfUseProxy
        {
            get;
            set;
        }

        public Boolean IfWorking
        {
            get;
            set;
        }

        public Boolean IfResetSearch
        {
            get;
            set;
        }

        public Boolean isWeb
        {
            get;
            set;
        }

        public Boolean isMobile
        {
            get;
            set;
        }

        public Boolean isEventko
        {
            get;
            set;
        }

        public Boolean isJSON
        {
            get;
            set;
        }

        public Boolean isGuest
        {
            get;
            set;
        }

        public Boolean isTix
        {
            get;
            set;
        }

        public String AuthorizarionHeader { get; set; }

        public Boolean IfFound
        {
            get;
            set;
        }
        public HtmlAgilityPack.HtmlDocument doc
        {
            get;
            set;
        }
        public string wRoom
        {
            get;
            set;
        }
        public Boolean IfAutoBuy
        {
            get;
            set;
        }
        public String SessionKey
        {
            get;
            set;
        }
        public String OnSaleUrl
        {
            get;
            set;
        }
        public String LastURLForManualBuy
        {
            get;
            set;
        }
        public String code
        {
            get;
            set;
        }

        public Presale _presaleSearch
        {
            get;
            set;
        }
        bool _isPresale = false;
        protected TicketsLog currLog = null;

        public bool IsPresale
        {
            get { return _isPresale; }
            set { _isPresale = value; }
        }
        bool _stateWaiting = true;

        public bool StateWaiting
        {
            get { return _stateWaiting; }
            set { _stateWaiting = value; }
        }

        public String luminatiSessionId
        {
            get;
            set;
        }

        public void start()
        {
            this.resetAfterStop = null;
            this.IfWorking = true;
            this.MoreInfo = "";
            StartThread = new Thread(this.workerThread);
            StartThread.Priority = ThreadPriority.Highest;
            StartThread.SetApartmentState(ApartmentState.STA);
            StartThread.IsBackground = true;
            StartThread.Start();
        }

        public void stop()
        {
            try
            {
                if (this._ifStopping)
                {
                    return;
                }
                TimerCallback tcbTimeoutStopping = new TimerCallback(this.stoppingHandlerTimeout);
                timeoutStopping = new System.Threading.Timer(tcbTimeoutStopping, this, new TimeSpan(0, 0, 15), new TimeSpan(-1));

                this.IfWorking = false;

                this._ifStopping = true;
                this.TimeLeft = "";
                this.Section = "";
                this.Row = "";
                this.Seat = "";
                this.Price = "";
                this.Quantity = "";
                this.TimeLeft = "";
                this.Description = "";
                this.MoreInfo = "";
                changeStatus(TicketSearchStatus.StoppingStatus);
                //this.resetAfterStop = null;
                //this._ifRestarting = false;
                this.stopping = new Stopping(this.stoppingHandler);
                try
                {
                    if (this._session != null)
                    {
                        if (this._session.HTMLWeb != null)
                        {
                            if (this._session.HTMLWeb.Request != null)
                            {
                                this._session.HTMLWeb.Request.Abort();
                            }
                        }
                    }
                }
                catch (Exception)
                {

                }

                AXSTicket ticket = (AXSTicket)this.Ticket;

                if (this._ifCaptchaWaiting)
                {
                    if (Interlocked.Read(ref ServerPortsPicker.ServerPortsPickerInstance.Requested) > 0)
                    {
                        Interlocked.Decrement(ref ServerPortsPicker.ServerPortsPickerInstance.Requested);
                    }

                    this._ifCaptchaWaiting = false;
                }

                if (this._proxy != null)
                {
                    if ((this._proxy.TheProxyType != Core.Proxy.ProxyType.Relay) && (ProxyPicker.ProxyPickerInstance.ProxyManager != null))
                    {
                        ProxyPicker.ProxyPickerInstance.ProxyManager.ReleaseProxy(this._proxy);
                    }
                    else if (ProxyPicker.ProxyPickerInstance.ProxyRelayManager != null)
                    {
                        #region Release Session from Server

                        ClearSessionFromServer();

                        #endregion

                        ProxyPicker.ProxyPickerInstance.ProxyRelayManager.ReleaseProxy(this._proxy);
                    }
                    this._proxy = null;
                }

                if (ticket != null)
                {
                    if (ticket.CaptchaQueue != null)
                    {
                        lock (ticket.CaptchaQueue)
                        {
                            ticket.CaptchaQueue.Remove(this);
                        }
                    }

                    if (ticket.CaptchaBrowserQueue != null)
                    {
                        lock (ticket.CaptchaBrowserQueue)
                        {
                            ticket.CaptchaBrowserQueue.Remove(this);
                        }
                    }
                }

                if (this.Captcha != null)
                {
                    this.Captcha.captchaentered.Set();
                }

                if (this.captchaload != null)
                {
                    this.captchaload.Set();
                }

                if (this._frmSelectDO != null)
                {
                    if (!this._frmSelectDO.IsDisposed)
                    {
                        this._frmSelectDO.Close();
                    }
                    this._frmSelectDO = null;
                }

                if (this._frmSelectAccount != null)
                {
                    if (!this._frmSelectAccount.IsDisposed)
                    {
                        this._frmSelectAccount.Close();
                    }
                    this._frmSelectAccount = null;
                }

            }
            catch { }
            finally
            {
                this.MoreInfo = "";
                GC.SuppressFinalize(this);
            }
            //GC.Collect();
        }

        protected void ClearSessionFromServer()
        {
            String result = String.Empty;

            try
            {
                HttpWebRequest webRequest = System.Net.HttpWebRequest.Create(clearSessionURL + this.Proxy.userName + "-context-" + context + "-session-" + this.Proxy.LuminatiSessionId) as System.Net.HttpWebRequest;
                webRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0";
                webRequest.KeepAlive = true;
                webRequest.Accept = "*/*";

                if (this.Proxy != null)
                {
                    if (this.Proxy.TheProxyType != Proxy.ProxyType.Custom)
                    {
                        webRequest.Timeout = 10000;
                    }

                    webRequest.Proxy = this.Proxy.toWebProxy(this.context);
                }

                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

                try
                {
                    HttpWebResponse resp = null;
                    Encoding respenc = null;
                    var isGZipEncoding = false;

                    System.IO.Stream reqStream = null;

                    try
                    {
                        resp = webRequest.GetResponse() as HttpWebResponse;
                    }
                    catch (WebException we)
                    {
                        resp = (HttpWebResponse)we.Response;
                    }

                    if (resp != null)
                    {
                        if (!string.IsNullOrEmpty(resp.ContentEncoding))
                        {
                            isGZipEncoding = resp.ContentEncoding.ToLower().StartsWith("gzip") ? true : false;
                            if (!isGZipEncoding)
                            {
                                respenc = Encoding.GetEncoding(resp.ContentEncoding);
                            }
                        }

                        if (isGZipEncoding)
                        {
                            reqStream = new GZipStream(resp.GetResponseStream(), CompressionMode.Decompress);
                        }
                        else
                        {
                            reqStream = resp.GetResponseStream();
                        }

                        StreamReader sr = new StreamReader(reqStream);
                        result = sr.ReadToEnd();

                        if (!String.IsNullOrEmpty(result))
                        {
                            if (result.ToLower().Equals("ok"))
                            {
                                Debug.WriteLine("Proxy released from server too -- " + this.Proxy.LuminatiSessionId);
                            }
                        }
                    }
                    reqStream.Close();
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }

        void stoppingHandlerTimeout(Object o)
        {
            if (this._ifStopping)
            {
                try
                {
                    if (this.StartThread != null)
                    {
                        this.StartThread.Abort();
                    }
                }
                catch (Exception)
                {

                }

                this.stoppingHandler();
            }
        }

        void stoppingHandler()
        {
            try
            {
                this.MoreInfo = "";
                changeStatus(TicketSearchStatus.StopStatus);

                this._ifStopping = false;
                this.stopping = null;
                sleep(500);
                _sleep.Close();

                GC.SuppressFinalize(_sleep);

                _sleep = null;
            }
            catch
            {

            }
            try
            {
                if (timeoutStopping != null)
                {
                    timeoutStopping.Dispose();
                    timeoutStopping = null;
                }
                if (this.Ticket != null)
                {
                    if (this._proxy != null)
                    {
                        if (this._proxy.TheProxyType != Core.Proxy.ProxyType.Relay)
                        {
                            if (ProxyPicker.ProxyPickerInstance.ProxyManager != null)
                            {
                                ProxyPicker.ProxyPickerInstance.ProxyManager.ReleaseProxy(this._proxy);
                            }
                        }
                        else
                        {
                            if (ProxyPicker.ProxyPickerInstance.ProxyRelayManager != null)
                            {
                                #region Release Session from Server

                                ClearSessionFromServer();

                                #endregion

                                ProxyPicker.ProxyPickerInstance.ProxyRelayManager.ReleaseProxy(this._proxy);
                            }
                        }
                        this._proxy = null;
                    }


                    if (!this.Ticket.isRunning)
                    {
                        this.Dispose();
                    }
                }
            }
            catch (Exception)
            {

            }


            if (this.resetAfterStop != null)
            {
                this.resetAfterStop();
            }
        }

        private void sleep(int time)
        {
            try
            {
                if (_sleep != null)
                {
                    _sleep.WaitOne(time);
                }
            }
            catch (Exception)
            {

            }
        }

        public void restart()
        {
            if (this._ifStopping)
            {
                return;
            }
            this.MoreInfo = "";
            Thread thReset = new Thread(this.restartThread);
            thReset.SetApartmentState(ApartmentState.STA);
            thReset.Priority = ThreadPriority.Highest;
            thReset.IsBackground = true;
            thReset.Start();
        }
        void restartThread()
        {
            try
            {
                if (this.IfWorking)
                {
                    if (doc != null)
                    {
                        changeStatus(TicketSearchStatus.RestartingStatus);

                        if (!this.isTix)
                        {
                            doc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.clearOrder&calledFrom=releaseLocks&sessionKey=" + this.SessionKey + "&XMLRPC_callCounter=8", String.Format("<methodCall><methodName>webapi.clearOrder</methodName><params><param><value><string>{0}</string></value></param><param><value><array><data /></array></value></param></params></methodCall>", this.SessionKey)));
                        }
                        else if (this.isTix)
                        {
                            this._session.Payload = "{\"onsaleIDToResetTimers\":\"" + HttpUtility.UrlDecode(this.OnSaleUrl) + "\",\"isTimerExpired\":false}";

                            String strhtml = this._session.Delete("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2?onsaleID=" + this.OnSaleUrl);
                        }
                    }
                    this.resetAfterStop = new ResetAfterStop(this.resetAfterStopHandler);
                    this.stop();
                    changeStatus(TicketSearchStatus.RestartingStatus);
                }
                else if (!this.IfWorking && !this._ifStopping)
                {
                    this.start();
                }
            }
            catch { }
        }

        void retrying()
        {
            try
            {
                if (this.IfWorking && this.Ticket.isRunning)
                {
                    //this.MoreInfo = "";
                    //this.SessionKey = "";
                    this.IfFound = false;
                    this.isSplitPopUp = false;
                    this.TimeLeft = "";
                    this.Section = "";
                    this.Row = "";
                    this.Seat = "";
                    this.Price = "";
                    this.Quantity = "";
                    this.TimeLeft = "";
                    this.Description = "";
                    //this.MoreInfo = "";

                    if (this._proxy != null)
                    {
                        if (this._proxy.TheProxyType != Core.Proxy.ProxyType.Relay)
                        {
                            if (ProxyPicker.ProxyPickerInstance.ProxyManager != null)
                            {
                                ProxyPicker.ProxyPickerInstance.ProxyManager.ReleaseProxy(this._proxy);
                            }
                        }
                        else
                        {
                            if (ProxyPicker.ProxyPickerInstance.ProxyRelayManager != null)
                            {
                                #region Release Session from Server

                                ClearSessionFromServer();

                                #endregion

                                ProxyPicker.ProxyPickerInstance.ProxyRelayManager.ReleaseProxy(this._proxy);
                            }
                        }
                    }

                    int delay = (int)this.Ticket.ResetSearchDelay;
                    if (this.Ticket.ifRandomDelay)
                    {
                        Random rnd = new Random(0);
                        delay = rnd.Next(0, delay);
                    }

                    //delay++;

                    // Searching status then hard coded 3 seconds delay.
                    if (this.Status == TicketSearchStatus.SearchingStatus)
                    {
                        delay = 3;
                    }

                    TimeSpan ts = new TimeSpan(0, 0, delay);
                    if (this.Status == TicketSearchStatus.SearchingStatus)
                    {
                        this.TimeLeft = "";
                    }
                    else
                    {
                        try
                        {
                            this.TimeLeft = String.Format("{0:mm:ss}", ts).Remove(0, 3);
                        }
                        catch
                        {
                            this.TimeLeft = String.Format("{0}:{1}", System.Math.Truncate(ts.TotalMinutes).ToString(), System.Math.Truncate(Convert.ToDouble(ts.Seconds)).ToString());

                        }
                    }
                    while (ts.TotalSeconds > 0 && this.IfWorking && this.Ticket.isRunning)
                    {
                        ts = ts.Subtract(new TimeSpan(0, 0, 1));
                        System.Threading.Thread.Sleep(1000);
                        if (this.Status == TicketSearchStatus.SearchingStatus)
                        {
                            this.TimeLeft = "";
                            changeStatus(TicketSearchStatus.SearchingStatus);
                        }
                        else
                        {
                            this.TimeLeft = String.Format("{0}:{1}", System.Math.Truncate(ts.TotalMinutes).ToString(), System.Math.Truncate(Convert.ToDouble(ts.Seconds)).ToString());

                            //this.TimeLeft = String.Format("{0:mm:ss}", ts).Remove(0, 3);
                            //this.MoreInfo = "";
                            changeStatus(TicketSearchStatus.RetryingStatus);
                        }
                    }
                    this.TimeLeft = "";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Debug.WriteLine(ex.Message + " - " + ex.StackTrace);
                }
                catch (Exception xe)
                {
                    Debug.WriteLine(xe.Message + Environment.NewLine + xe.StackTrace);
                }
            }
        }

        public static object writerLocker = new object();
        public void ExceptionWriter(string exception)
        {
            try
            {
                lock (writerLocker)
                {
                    File.AppendAllText(Application.StartupPath + @"\exception.txt", Environment.NewLine + DateTime.Now + " && retrying()=> " + exception);
                }
            }
            catch (Exception exx)
            {
                Debug.WriteLine(exx.Message);
            }
        }
        public void workerThread()
        {
            try
            {
                while (this.IfWorking && this.Ticket.isRunning)
                {
                    this.retry = true;
                    changeStatus(TicketSearchStatus.SearchingStatus);
                    this.IfFound = false;
                    this.IfResetSearch = false;
                    this.IfAutoBuy = false;
                    this.TimeLeft = "";
                    this.Section = "";
                    this.Row = "";
                    this.Seat = "";
                    this.Price = "";
                    this.MoreInfo = "";
                    this.TotalPrice = "";
                    this.Quantity = "";
                    this.TimeLeft = "";
                    this.Description = "";
                    this.FlagImage = global::Automatick.Properties.Resources.Flag16Disable;
                    this.FlagImage.Tag = false;
                    this._ifManualBuyWithoutProxy = false;
                    this.RecapToken = String.Empty;
                    this.Hash = String.Empty;
                    this.HashTS = string.Empty;
                    this.Recaptcha = String.Empty;
                    this.OnSaleUrl = String.Empty;
                    this.isTix = false;
                    this.isGuest = false;
                    this.extCustId = this.Client_ID = this.Client_Secret = this.AccessToken = this.AuthorizarionHeader = this.offerID = String.Empty;
                    this.currLog = new TicketsLog();
                    this.currLog.TicketName = this.Ticket.TicketName;

                    try
                    {
                        if (this._frmSelectDO != null)
                        {
                            if (!this._frmSelectDO.IsDisposed)
                            {
                                this._frmSelectDO.Close();
                            }
                            this._frmSelectDO = null;
                        }

                        if (this._frmSelectAccount != null)
                        {
                            if (!this._frmSelectAccount.IsDisposed)
                            {
                                this._frmSelectAccount.Close();
                            }
                            this._frmSelectAccount = null;
                        }
                    }
                    catch (Exception ex)
                    {
                        //  ProxyPicker.ProxyPickerInstance.RecheckProxyStatus(this.Proxy, ex.Message);
                    }

                    if ((this.IfWorking && this.Ticket.isRunning) ? this.processFirstPage() : false)
                    {
                        if ((this.IfWorking && this.Ticket.isRunning) ? this.processFoundPage() : false)
                        {
                            if (this.isWeb || this.isJSON || this.isEventko)
                            {
                                if ((this.IfWorking && this.Ticket.isRunning) ? this.processDeliveryPage() : false)
                                {
                                    if (this.IfWorking && this.Ticket.isRunning)
                                    {
                                        this.processAutoBuyPage();
                                        this.SessionKey = String.Empty;
                                    }
                                }
                            }
                            else
                            {
                                if (this.IfWorking && this.Ticket.isRunning && this.IfAutoBuy)
                                {
                                    this.processMobileAutoBuyPage();
                                }

                                this._session.Get("https://axsmobile.eventshopper.com/mobileshopper/index.html?action=reset");
                            }
                        }
                    }
                    else
                    {
                        if (this.isTix)
                        {
                            if ((this.IfWorking && this.Ticket.isRunning) ? this.processTixFirstPage() : false)
                            {
                                if ((this.IfWorking && this.Ticket.isRunning) ? this.processTixFoundPage() : false)
                                {
                                    if ((this.IfWorking && this.Ticket.isRunning) ? this.processTixDeliveryPage() : false)
                                    {
                                        if (this.IfWorking && this.Ticket.isRunning)
                                        {
                                            if (this.processTixAutoBuyPage())
                                            {
                                                try
                                                {
                                                    if (this._CurrentParameter != null)
                                                    {
                                                        if (this._CurrentParameter.Bought == null)
                                                        {
                                                            this._CurrentParameter.Bought = 0;
                                                        }
                                                        this._CurrentParameter.Bought++;
                                                    }

                                                    lock (this.Ticket)
                                                    {
                                                        this.Ticket.BuyCount++;

                                                        if (this.Ticket.BuyHistory.ContainsKey(this._selectedAccountForAutoBuy.EmailAddress))
                                                        {
                                                            this.Ticket.BuyHistory[this._selectedAccountForAutoBuy.EmailAddress] += 1;
                                                            // this.Ticket.SaveTicket();
                                                        }
                                                        else
                                                        {
                                                            this.Ticket.BuyHistory.Add(this._selectedAccountForAutoBuy.EmailAddress, 1);
                                                            // this.Ticket.SaveTicket();
                                                        }
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
                                                }
                                            }

                                            if (this.autobuyLog != null)
                                            {
                                                this.autobuyLog.WriteToFile(PathAutobuyLogs);

                                                this.autobuyLog = null;
                                            }

                                            if (!this.currLog.MoreInfo.Contains("Unable to login"))
                                            {
                                                //this.Ticket.tic_Logs.Add(this.currLog);
                                                this.AddToLogs();
                                                this.Ticket.SaveTicket();
                                            }

                                            this.SessionKey = String.Empty;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (this._proxy != null)
                    {
                        if (this._proxy.TheProxyType != Core.Proxy.ProxyType.Relay)
                        {
                            if (ProxyPicker.ProxyPickerInstance.ProxyManager != null)
                            {
                                ProxyPicker.ProxyPickerInstance.ProxyManager.ReleaseProxy(this._proxy);
                            }
                        }
                        else
                        {
                            if (ProxyPicker.ProxyPickerInstance.ProxyRelayManager != null)
                            {
                                #region Release Session from Server

                                ClearSessionFromServer();

                                #endregion

                                ProxyPicker.ProxyPickerInstance.ProxyRelayManager.ReleaseProxy(this._proxy);
                            }
                        }
                        this._proxy = null;
                    }

                    if (this._selectedAccountForAutoBuy != null)
                    {
                        ReleaseAccount(this._selectedAccountForAutoBuy.EmailAddress);
                    }
                    //GC.Collect();

                    retrying();

                    this._proxy = null;
                    _tmEvent = null;

                    if (!this.IfWorking)
                    {
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("workerThread => " + ex.Message);

                try
                {
                    Debug.WriteLine(ex.Message + " - " + ex.StackTrace);
                }
                catch (Exception xe)
                {
                    Debug.WriteLine(xe.Message + Environment.NewLine + xe.StackTrace);
                }
            }

            //if (this.resetAfterStop != null)
            //{
            //    this.resetAfterStop();
            //}
        }

        public void autoBuy()
        {
            try
            {

                if (this.IfWorking && this.IfFound && this.Ticket.isRunning)
                {
                    this.IfAutoBuy = true;
                    this.currLog.BuyStatus = TicketsLog.AutoBuyStatus;
                    this.currLog.Account = (this._selectedAccountForAutoBuy != null) ? this._selectedAccountForAutoBuy.EmailAddress : "";
                    // this.AddToLogs();
                }
            }
            catch (Exception)
            {

            }
        }

        public void AddToLogs()
        {
            try
            {
                if (this.Ticket.tic_Logs.Contains(this.currLog))
                {
                    int index = this.Ticket.tic_Logs.IndexOf(this.currLog);
                    if (index > -1)
                    {
                        this.Ticket.tic_Logs[index] = this.currLog;
                    }
                }
                else
                {
                    this.Ticket.tic_Logs.Add(this.currLog);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }

        public void autoBuyGuest()
        {
            try
            {

                if (this.IfWorking && this.IfFound && this.Ticket.isRunning)
                {
                    this.IfAutoBuy = true;
                    this.isGuest = true;
                    this.currLog.BuyStatus = TicketsLog.AutoBuyStatus;
                    this.currLog.Account = (this._selectedAccountForAutoBuy != null) ? this._selectedAccountForAutoBuy.EmailAddress : "";

                }
            }
            catch (Exception)
            {

            }
        }

        public void autoBuyWithoutProxy()
        {
            try
            {
                if (this._proxy != null)
                {

                    if (this._proxy.TheProxyType != Core.Proxy.ProxyType.Relay)
                    {
                        if (ProxyPicker.ProxyPickerInstance.ProxyManager != null)
                        {
                            ProxyPicker.ProxyPickerInstance.ProxyManager.ReleaseProxy(this._proxy);
                        }
                    }
                    else
                    {
                        if (ProxyPicker.ProxyPickerInstance.ProxyRelayManager != null)
                        {
                            #region Release Session from Server

                            ClearSessionFromServer();

                            #endregion

                            ProxyPicker.ProxyPickerInstance.ProxyRelayManager.ReleaseProxy(this._proxy);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
            }
            this._proxy = null;

            if (this._session != null)
            {
                this._session.Proxy = null;
            }

            this.autoBuy();
        }


        #region LuminatiProxies

        public Proxy getLuminatiProxy()
        {
            try
            {

                const string Username = "lum-customer-ticket_finder-zone-autoax";
                const string Password = "77f7bdba16e0";
                Random random = new Random();
                string sessionId = ((uint)random.Next()).ToString();

                string superProxy;
                using (var client = new WebClient())
                {
                    superProxy = client.DownloadString(String.Format(
                        "http://client.luminati.io/api/get_super_proxy?raw=1&country=gb&user={0}&key={1}",
                        Username,
                        Password
                    ));
                }
                const int Port = 22225;
                String clientUsername = Username + "-country-gb-session-" + sessionId;
                using (var client = new WebClient())
                {
                    var authStatus = client.DownloadString(String.Format(
                        "http://{0}:{1}/auth?user={2}&key={3}",
                        superProxy,
                        Port,
                        Username,
                        Password
                    ));
                }

                _proxy = new Proxy();
                _proxy.Address = superProxy;
                _proxy.Port = Port.ToString();
                _proxy.UserName = Username + "-country-us-session-" + sessionId;
                _proxy.Password = Password;

                this.luminatiSessionId = sessionId;

                //BrowserSession sess = new BrowserSession();
                //sess.Proxy = _proxy.toWebProxy();
                //sess.Get("http://icanhazip.com/");

                return _proxy;

            }
            catch
            {
                return null;
            }
        }
        #endregion

        String strURL = String.Empty;
        String exeventID = String.Empty;
        protected Boolean processFirstPage()
        {
            strURL = this.Ticket.URL;

            String strHTML = String.Empty;

            String lastLayoutVersion = String.Empty;

            String lastLayoutName = String.Empty;

            String customerID = "axs", cid = "en-US";

            BrowserSession queueSession = null;

            Boolean result = false;
            Boolean IfSolvedBeforeQ = false;

            try
            {
                if (this.Ticket.ifPesistSessionInEachSearch)
                {
                    if (this._proxy == null && this.Ticket.ifUseProxies && this.IfUseProxy)
                    {
                        if (this.IfWorking)
                        {
                            _proxy = ProxyPicker.ProxyPickerInstance.getNextProxy(this);
                        }
                        else
                        {
                            this.MoreInfo = "";
                        }
                        if (_proxy == null)
                        {
                            //   _proxy = getLuminatiProxy();
                        }
                    }

                    this.doc = new HtmlAgilityPack.HtmlDocument();
                }
                else
                {
                    this._proxy = null;
                    //Proxy
                    if (this.Ticket.ifUseProxies && this.IfUseProxy)
                    {
                        if (this.IfWorking)
                        {
                            _proxy = ProxyPicker.ProxyPickerInstance.getNextProxy(this);
                        }
                        else
                        {
                            this.MoreInfo = "";
                        }
                        if (_proxy == null)
                        {
                            // _proxy = getLuminatiProxy();
                        }
                    }

                    this.doc = new HtmlAgilityPack.HtmlDocument();
                }

                //Proxy
                if (_proxy != null)
                {
                    if (_proxy.TheProxyType == Core.Proxy.ProxyType.Luminati || _proxy.TheProxyType == Core.Proxy.ProxyType.Relay)
                    {
                        _proxy.generateLuminatiSessionId();
                    }
                }
                else
                {
                    if ((this.Ticket.ifUseProxies && this.IfUseProxy) && (GoodProxies._goodProxyList.Distinct().ToList().Count > 0))
                    {
                        _proxy = GoodProxies.getFoundProxy();
                        if (_proxy == null)
                            _proxy = GoodProxies.getProxy();
                        if (_proxy != null)
                        {
                            if (_proxy.TheProxyType == Proxy.ProxyType.MyIP || _proxy.TheProxyType == Core.Proxy.ProxyType.Luminati)
                            {
                                this._session.luminatiSessionId = _proxy.LuminatiSessionId;
                            }

                            _proxy.ProxySortOrder = Proxy.ProxyPriority.Use;
                            this._session.Proxy = _proxy.toWebProxy(context);
                        }
                    }
                }

                if (strURL.StartsWith("https://www.axs.com") || strURL.StartsWith("http://www.axs.com"))
                {
                    #region Offer Page
                    if (this._CurrentParameter == null)
                    {
                        _CurrentParameter = this.getNextParameter();
                    }
                    if (this._CurrentParameter != null)
                    {
                        if (!String.IsNullOrEmpty(this._CurrentParameter.OfferName))
                        {
                            this.MoreInfo = "Searching for : " + this._CurrentParameter.OfferName;
                        }
                        //else
                        //{
                        //    this.MoreInfo = "Searching for :" + this._CurrentParameter.Quantity;
                        //}

                        changeStatus(TicketSearchStatus.SearchingStatus);
                    }

                    queueSession = new BrowserSession();

                    if (_proxy != null)
                    {
                        if (_proxy.IfLuminatiProxy)
                        {
                            queueSession.luminatiSessionId = _proxy.LuminatiSessionId;
                        }

                        queueSession.Proxy = _proxy.toWebProxy(context);
                    }

                    try
                    {
                        String queueURL = strURL;

                        String[] values = queueURL.Split('&');

                        foreach (String item in values)
                        {
                            if (item.Split('=')[0].Equals("e"))
                            {
                                strURL = values[0] + "&e=" + item.Split('=')[1];
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                    }

                    queueSession.HTMLWeb = new HtmlWeb();
                    queueSession.HTMLWeb.IfAllowAutoRedirect = false;

                    strHTML = queueSession.Get(strURL);
                    if (!String.IsNullOrEmpty(strHTML))
                    {
                        #region distill
                        HtmlNode NodeBlock = queueSession.HtmlDocument.DocumentNode.SelectSingleNode("//div[@id='distil_ident_block']");
                        if (NodeBlock != null)
                        {
                            //this.Distil_Indent_Block();
                            //strHTML = this._session.Get(strURL);
                            Distill.checkForDistilIdentificationBlock(queueSession, this.Ticket.AutoCaptchaServices, this.Ticket, this);
                        }
                        else
                        {
                            NodeBlock = queueSession.HtmlDocument.DocumentNode.SelectSingleNode("//div[@id='distilIdentificationBlock']");
                            if (NodeBlock != null)
                            {
                                Distill.checkForDistilIdentificationBlock(queueSession, this.Ticket.AutoCaptchaServices, this.Ticket, this);
                            }
                        }

                        if (!String.IsNullOrEmpty(queueSession.RedirectLocation))
                        {
                            strHTML = this._session.Get(queueSession.RedirectLocation);
                        }
                        #endregion

                        HtmlNodeCollection offerNodes = queueSession.HtmlDocument.DocumentNode.SelectNodes("//section[@id='event-ticket-options']/div");
                        if (offerNodes != null)
                        {
                            Dictionary<String, String> availableOffers = getAvailableOffers(offerNodes);
                            if (availableOffers != null && availableOffers.Count > 0)
                            {
                                KeyValuePair<String, String> selectedOffer = new KeyValuePair<string, string>();

                                if (!String.IsNullOrEmpty(this._CurrentParameter.OfferName))
                                {
                                    selectedOffer = availableOffers.FirstOrDefault(s => s.Key.ToLower().Equals(this._CurrentParameter.OfferName.ToLower()));
                                }
                                else
                                {
                                    selectedOffer = availableOffers.First();
                                }

                                if (!String.IsNullOrEmpty(selectedOffer.Value))
                                {
                                    if (selectedOffer.Value.Contains("javascript:void") || selectedOffer.Value.ToLower().Contains("on sale soon"))
                                    {
                                        this.MoreInfo = this._CurrentParameter.OfferName + " is not on-sale yet.";
                                    }
                                    else
                                    {
                                        strHTML = queueSession.Get(selectedOffer.Value);
                                        if (!String.IsNullOrEmpty(queueSession.RedirectLocation))
                                        {
                                            this.Ticket.OldURL = this.Ticket.URL;
                                            this.Ticket.URL = queueSession.RedirectLocation;
                                            strHTML = queueSession.Get(queueSession.RedirectLocation);
                                        }
                                        else if (!selectedOffer.Value.Contains("tickets.axs.com") && !selectedOffer.Value.Contains("evenko.ca") && !selectedOffer.Value.Contains("o2priority"))
                                        {
                                            this.Ticket.OldURL = this.Ticket.URL;
                                            this.Ticket.URL = selectedOffer.Value;

                                            this.isTix = true;
                                        }
                                    }
                                }
                                else
                                {
                                    this.MoreInfo = "No such offer exists : " + this._CurrentParameter.OfferName;
                                }
                            }
                        }
                        else
                        {
                            /*** additional check for promo-page***/
                            offerNodes = queueSession.HtmlDocument.DocumentNode.SelectNodes("//div[@class='c-card   c-card--horizontal-view']");
                            if (offerNodes != null)
                            {
                                Dictionary<String, String> availableOffers = getAvailableOffers(offerNodes);
                                if (availableOffers != null && availableOffers.Count > 0)
                                {
                                    KeyValuePair<String, String> selectedOffer = new KeyValuePair<string, string>();

                                    if (!String.IsNullOrEmpty(this._CurrentParameter.OfferName))
                                    {
                                        selectedOffer = availableOffers.FirstOrDefault(s => s.Key.ToLower().Equals(this._CurrentParameter.OfferName.ToLower()));
                                    }
                                    else
                                    {
                                        selectedOffer = availableOffers.First();
                                    }

                                    if (!String.IsNullOrEmpty(selectedOffer.Value))
                                    {
                                        if (selectedOffer.Value.Contains("javascript:void") || selectedOffer.Value.ToLower().Contains("on sale soon"))
                                        {
                                            this.MoreInfo = this._CurrentParameter.OfferName + " is not on-sale yet.";
                                        }
                                        else
                                        {
                                            strHTML = queueSession.Get(selectedOffer.Value);
                                            if (!String.IsNullOrEmpty(queueSession.RedirectLocation))
                                            {
                                                this.Ticket.OldURL = this.Ticket.URL;
                                                this.Ticket.URL = queueSession.RedirectLocation;
                                                strHTML = queueSession.Get(queueSession.RedirectLocation);
                                            }
                                            else if (!selectedOffer.Value.Contains("tickets.axs.com") && !selectedOffer.Value.Contains("evenko.ca") && !selectedOffer.Value.Contains("o2priority"))
                                            {
                                                this.Ticket.OldURL = this.Ticket.URL;
                                                this.Ticket.URL = selectedOffer.Value;

                                                this.isTix = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        this.MoreInfo = "No such offer exists : " + this._CurrentParameter.OfferName;
                                    }
                                }
                            }

                        }
                    }
                    #endregion
                }

                if (strURL.Contains("bit.ly") || strURL.Contains(".queue") || strURL.Contains("q.axs.co.uk") || this.Ticket.URL.StartsWith("http://shop.axs.com/") || this.Ticket.URL.StartsWith("https://shop.axs.com/"))
                {
                    #region queue Handling
                    if (queueSession == null)
                    {
                        queueSession = new BrowserSession();
                    }

                    if (_proxy != null)
                    {
                        if (_proxy.IfLuminatiProxy)
                        {
                            queueSession.luminatiSessionId = _proxy.LuminatiSessionId;
                        }

                        queueSession.Proxy = _proxy.toWebProxy(context);
                    }

                    //https://axseu.queue-it.net/?c=axseu&e=o2l180611venadg&cid=en-GB

                    try
                    {
                        String queueURL = strURL;

                        String[] values = queueURL.Split('&');

                        foreach (String item in values)
                        {
                            if (item.Split('=')[0].Equals("e"))
                            {
                                strURL = values[0] + "&e=" + item.Split('=')[1];
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                    }

                    queueSession.HTMLWeb = new HtmlWeb();
                    queueSession.HTMLWeb.IfAllowAutoRedirect = false;

                    if (!strURL.StartsWith("https"))
                    {
                        strURL = strURL.Replace("http", "https");
                    }

                    strHTML = queueSession.Get(strURL);

                  

                    if (strHTML.Contains("document.location.href"))
                    {
                          HtmlNode node  = queueSession.HtmlDocument.DocumentNode.SelectSingleNode("//script");

                          if (node != null && node.InnerText.Contains("document.location.href"))
                          {
                              string locationURL = node.InnerText.Replace("document.location.href", "").Replace(";", "").Replace(" ", "").Replace("\n", "").TrimStart('=').Replace("'","");

                              strURL = "https://" + new Uri(strURL).Host + locationURL;

                              strHTML = queueSession.Get(strURL);

                          }

                       
                    }


                    if (!string.IsNullOrEmpty(queueSession.RedirectLocation) && queueSession.RedirectLocation.StartsWith("http"))
                    {
                        strURL = strURL.Replace("https", "http");

                        if (strURL.Equals(queueSession.RedirectLocation))
                        {
                            strHTML = queueSession.Get(strURL);
                        }
                    }

                    if (strURL.Contains("bit.ly") && (queueSession.RedirectLocation == null || !String.IsNullOrEmpty(queueSession.RedirectLocation)))
                    {
                        this.Ticket.URL = queueSession.RedirectLocation;

                        strHTML = queueSession.Get(queueSession.RedirectLocation);
                    }

                    if (queueSession.RedirectLocation == null || String.IsNullOrEmpty(queueSession.RedirectLocation))
                    {
                        /************************************
                         * **********************************
                         * new patch, captcha before queue-it
                         ************************************
                         ************************************/

                        if (strHTML.Contains("captchaInvisible"))
                        {
                            lastLayoutVersion = ExtractLastLayoutVersion(strHTML);
                            lastLayoutName = ExtractLastLayoutName(strHTML);

                            IfSolvedBeforeQ = SolveCaptchaBeforeQ(queueSession, strHTML, lastLayoutName);
                        }
                    }

                    if (queueSession.RedirectLocation != null && !String.IsNullOrEmpty(queueSession.RedirectLocation) && !queueSession.RedirectLocation.Contains("tix.axs.com"))
                    {
                        //strHTML = queueSession.Get(queueSession.RedirectLocation);
                        do
                        {
                            try
                            {
                                strHTML = queueSession.Get(queueSession.RedirectLocation);

                                if ((queueSession.HTMLWeb.ResponseUri.AbsoluteUri.Contains("//shop.axs.co.uk/") && strHTML.Contains("EVENTSHOPPER_VERSION ")) || queueSession.HTMLWeb.ResponseUri.AbsoluteUri.Contains("//tix.axs.com/"))
                                {
                                    this.Ticket.OldURL = this.Ticket.URL;

                                    
                                    this.TemporaryURL = queueSession.HTMLWeb.ResponseUri.AbsoluteUri;

                                    this.isTix = true;
                                    return false;
                                }
                            }
                            catch (Exception ex)
                            {
                                Debug.WriteLine(ex.Message);

                                break;
                            }

                        } while (!String.IsNullOrEmpty(queueSession.RedirectLocation));


                    }

                    if (!queueSession.RedirectLocation.ToLower().Contains("tix.axs") && !queueSession.RedirectLocation.ToLower().Contains("tickets") && !queueSession.RedirectLocation.Contains(".aspx?"))
                    {
                        if (!String.IsNullOrEmpty(queueSession.RedirectLocation))
                        {
                            if (queueSession.RedirectLocation.Contains(".queue") || strURL.Contains("q.axs.co.uk"))
                            {
                                strHTML = queueSession.Get(queueSession.RedirectLocation);
                            }

                            if (!String.IsNullOrEmpty(queueSession.RedirectLocation))
                            {
                                strHTML = queueSession.Get(queueSession.RedirectLocation);
                            }

                            if (!queueSession.RedirectLocation.ToLower().Contains("tix.axs") && !queueSession.RedirectLocation.ToLower().Contains("tickets"))
                            {
                                strHTML = queueSession.Get(queueSession.RedirectLocation);
                            }
                            else
                            {
                                if (queueSession.RedirectLocation.Contains(".aspx?"))
                                {
                                    this.MoreInfo = "Please use this on Veritix app.";
                                    return false;
                                }
                                else
                                {
                                    String url = queueSession.RedirectLocation;

                                    if (url.Contains("?") && url.Contains("#"))
                                    {
                                        if (url.IndexOf("?") < url.IndexOf("#"))
                                        {
                                            url = url.Substring(0, url.IndexOf("?")) + url.Substring(url.IndexOf("#"));
                                        }
                                    }

                                    this.Ticket.OldURL = this.Ticket.URL;

                                    this.Ticket.URL = url;
                                }
                            }
                        }
                        else
                        {
                            try
                            {
                                if (String.IsNullOrEmpty(lastLayoutName) || String.IsNullOrEmpty(lastLayoutVersion))
                                {
                                    lastLayoutVersion = ExtractLastLayoutVersion(strHTML);

                                    lastLayoutName = ExtractLastLayoutName(strHTML);
                                }

                                if (String.IsNullOrEmpty(queueID))
                                {
                                    String queueURL = queueSession.HTMLWeb.ResponseUri.Query.Substring(1);

                                    String[] values = queueURL.Split('&');

                                    foreach (String item in values)
                                    {
                                        try
                                        {
                                            if (item.Split('=')[0].Equals("cid"))
                                            {
                                                cid = item.Split('=')[1];
                                            }
                                            else if (item.Split('=')[0].Equals("q"))
                                            {
                                                queueID = item.Split('=')[1];
                                            }
                                            else if (item.Split('=')[0].Equals("c"))
                                            {
                                                customerID = item.Split('=')[1];
                                            }
                                            else if (item.Split('=')[0].Equals("e"))
                                            {
                                                exeventID = item.Split('=')[1];
                                            }
                                            else if (item.Split('?')[1].Contains("c="))
                                            {
                                                customerID = item.Split('?')[1].Split('=')[1];
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                                        }
                                    }
                                }

                                if (String.IsNullOrEmpty(queueID) && !IfSolvedBeforeQ)
                                {
                                    return false;
                                }
                                string redirectUrl = string.Empty;

                                this.MoreInfo += " Your queue Id is:" + queueID;

                                this.changeStatus(this.Status);

                                if (!IfSolvedBeforeQ)
                                {
                                    strHTML = queueSession.Get(queueSession.HTMLWeb.ResponseUri.AbsoluteUri);
                                }

                                if (!queueSession.RedirectLocation.ToLower().Contains("tix.axs") && !queueSession.RedirectLocation.ToLower().Contains("tickets.axs"))
                                {
                                    string isBeforeOrIdle = "False";

                                    string isclientRedayToRedirect = "null";

                                    int timeToWait = 10000;

                                    do
                                    {
                                        try
                                        {
                                            string url = string.Empty;

                                            if (strURL.Contains("veritix.queue") || this.Ticket.URL.StartsWith("http://shop.axs.com/"))
                                            {
                                                url = queueSession.HTMLWeb.ResponseUri.Scheme + "://" + queueSession.HTMLWeb.ResponseUri.Host + "/spa-api/queue/" + customerID + "/" + exeventID + "/" + queueID + "/status?cid=" + cid + "&l=" + lastLayoutName;
                                            }
                                            else
                                            {
                                                url = queueSession.HTMLWeb.ResponseUri.Scheme + "://" + queueSession.HTMLWeb.ResponseUri.Host + "/spa-api/queue/" + customerID + "/" + exeventID + "/" + queueID + "/status?cid=" + cid + "&l=" + lastLayoutName;
                                            }
                                            String PostData = "{\"targetUrl\":\"\",\"customUrlParams\":\"\",\"layoutVersion\":" + lastLayoutVersion + ",\"layoutName\":\"" + lastLayoutName + "\",\"isClientRedayToRedirect\":" + isclientRedayToRedirect + ",\"isBeforeOrIdle\":" + isBeforeOrIdle.ToLower() + "}";

                                            queueSession.Payload = PostData;

                                            queueSession._IfJSOn = true;

                                            String html = queueSession.Post(url);

                                            queueSession._IfJSOn = false;

                                            object json = null;

                                            JObject _json = null;

                                            try
                                            {
                                                Match match = Regex.Match(html, "\"texts\":(.*?)}");
                                                if (match.Success)
                                                {
                                                    String matched = match.Value + ",";

                                                    html = html.Replace(matched, String.Empty);
                                                }

                                                json = JsonConvert.DeserializeObject(html);
                                            }

                                            catch (JsonReaderException ex)
                                            {
                                                try
                                                {
                                                    Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);

                                                    html = ParseHtml(html);

                                                    json = JsonConvert.DeserializeObject(html);

                                                    isclientRedayToRedirect = "true";

                                                    isBeforeOrIdle = "false";
                                                }
                                                catch (Exception e)
                                                {
                                                    Console.WriteLine(e.Message + Environment.NewLine + e.StackTrace);

                                                    isclientRedayToRedirect = "true";

                                                    isBeforeOrIdle = "false";
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                                            }

                                            if (json != null)
                                            {
                                                _json = (JObject)json;

                                                try
                                                {
                                                    String time = _json["updateInterval"].ToString();
                                                    timeToWait = int.Parse(time);
                                                }
                                                catch { }

                                                if (_json["redirectUrl"] != null)
                                                {
                                                    redirectUrl = _json["redirectUrl"].ToString();
                                                }
                                                else if (_json["ticket"]["secondsToStart"] != null)
                                                {
                                                    if (!String.IsNullOrEmpty(_json["ticket"]["secondsToStart"].ToString()))
                                                    {
                                                        String secondsToStart = _json["ticket"]["secondsToStart"].ToString();

                                                        if (secondsToStart.Equals("0"))
                                                        {
                                                            try
                                                            {
                                                                String progress = _json["ticket"]["progress"].ToString();
                                                                String queueNumber = _json["ticket"]["queueNumber"].ToString();
                                                                String usersAheadOfYou = _json["ticket"]["usersInLineAheadOfYou"].ToString();

                                                                this.Status = "Users ahead: " + usersAheadOfYou + ", Progress: " + progress;

                                                                this.MoreInfo += ", Queue No.: " + queueNumber;

                                                                this.changeStatus(this.Status);
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            try
                                                            {
                                                                this.Status = "Queue will start in " + _json["ticket"]["secondsToStart"] + " seconds";

                                                                this.changeStatus(this.Status);
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                                                            }
                                                        }
                                                    }
                                                    else if (_json["ticket"]["queueNumber"] != null)
                                                    {
                                                        try
                                                        {
                                                            this.Status = "Your queue number is " + _json["ticket"]["queueNumber"];

                                                            isclientRedayToRedirect = "true";

                                                            isBeforeOrIdle = "false";

                                                            this.changeStatus(this.Status);
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                                                        }
                                                    }
                                                }
                                                else if (_json["ticket"]["queueNumber"] != null)
                                                {
                                                    try
                                                    {
                                                        this.Status = "Your queue number is " + _json["ticket"]["queueNumber"];

                                                        isclientRedayToRedirect = "true";

                                                        isBeforeOrIdle = "false";


                                                        this.changeStatus(this.Status);
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                                                    }
                                                }

                                                try
                                                {
                                                    if (String.IsNullOrEmpty(redirectUrl))
                                                    {
                                                        isBeforeOrIdle = _json["isBeforeOrIdle"].ToString();

                                                        if (isBeforeOrIdle.Equals("False"))
                                                        {
                                                            isclientRedayToRedirect = "true";
                                                        }
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                                                }
                                            }
                                            else
                                            {
                                                isclientRedayToRedirect = "true";

                                                isBeforeOrIdle = "false";
                                            }

                                            queueSession._IfJSOn = false;

                                            if (!this.IfWorking || !this.Ticket.isRunning)
                                            {
                                                return false;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                                            break;
                                        }

                                        if (String.IsNullOrEmpty(redirectUrl))
                                        {
                                            Thread.Sleep(timeToWait);
                                        }

                                    } while (String.IsNullOrEmpty(redirectUrl));
                                }

                                if (!String.IsNullOrEmpty(redirectUrl))
                                {
                                    if (redirectUrl.Contains(".aspx?"))
                                    {
                                        this.MoreInfo = "Please use this on Veritix app.";
                                        return false;
                                    }
                                    else
                                    {
                                        String url = redirectUrl;

                                        if (url.Contains("?") && url.Contains("#"))
                                        {
                                            if (url.IndexOf("?") < url.IndexOf("#"))
                                            {
                                                url = url.Substring(0, url.IndexOf("?")) + url.Substring(url.IndexOf("#"));
                                            }
                                        }

                                        this.Ticket.OldURL = this.Ticket.URL;

                                        this.Ticket.URL = url;
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                if (IfSolvedBeforeQ && queueSession.HTMLWeb.ResponseUri.AbsoluteUri.Equals("https://eu-west-1-verifycaptcha-api.queue-it.net/captchaverify"))
                                {
                                    this.Ticket.URL = queueSession.HTMLWeb.ResponseUri.AbsoluteUri;
                                    return false;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (queueSession.RedirectLocation.Contains(".aspx?"))
                        {
                            this.MoreInfo = "Please use this on Veritix app.";
                            return false;
                        }
                        else
                        {
                            String url = queueSession.RedirectLocation;

                            if (url.Contains("?") && url.Contains("#"))
                            {
                                if (url.IndexOf("?") < url.IndexOf("#"))
                                {
                                    url = url.Substring(0, url.IndexOf("?")) + url.Substring(url.IndexOf("#"));
                                }
                            }

                            this.Ticket.OldURL = this.Ticket.URL;

                            this.Ticket.URL = url;
                        }
                    }
                    #endregion
                }

                if (!this.Ticket.URL.Contains("tickets.axs.com") && !this.Ticket.URL.Contains("evenko.ca") && !this.Ticket.URL.Contains("o2priority"))
                {
                    if (this.Ticket.URL.Contains("tix.axs.com") || this.Ticket.URL.Contains("shop.axs.co.uk") || this.Ticket.URL.Contains("q.axs.co.uk"))
                    {
                        try
                        {
                            if (queueSession != null)
                            {
                                queueSession.Dispose();
                                queueSession = null;
                            }

                            if (this.doc != null)
                            {
                                this.doc = null;
                            }
                        }
                        catch { }

                        this.isTix = true;
                        return false;
                    }
                    return false;
                }

                MultiEvents = new List<MultiEvent>();
                if (this._CurrentParameter == null)
                {
                    _CurrentParameter = this.getNextParameter();
                }
                if (this._CurrentParameter != null)
                {
                    this.MoreInfo = "Searching quantity:" + this._CurrentParameter.Quantity;
                    changeStatus(TicketSearchStatus.SearchingStatus);
                }




                if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                {
                    this.MoreInfo = "Sorry! Event Not Supported..";
                    Thread.Sleep(300);
                    return false;
                }

                //Switch to next parameter if max bought exceeds
                if (this._CurrentParameter != null)
                {
                    if (this._CurrentParameter.MaxBought != null)
                    {
                        if (this._CurrentParameter.Bought >= this._CurrentParameter.MaxBought && this._CurrentParameter.MaxBought > 0)
                        {
                            this._CurrentParameter = null;
                            return false;
                        }
                    }
                }
                else
                {
                    // Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, logMessages.ErrorLogCurrentParameter + new System.Diagnostics.StackTrace(true).GetFrame(0).GetMethod().ToString() + new System.Diagnostics.StackTrace(true).GetFrame(0).GetFileLineNumber()));
                }
                this.doc = new HtmlAgilityPack.HtmlDocument();
                // doc.LoadHtml(this.post(this, "http://www3.o2priority.co.uk/", "MPN=07747606728&Password=password1"));
                if (this._CurrentParameter != null)
                {
                    if (this.isWeb || this.isEventko)
                    {
                        this.MoreInfo = "Web, " + "Searching quantity:" + this._CurrentParameter.Quantity;
                    }
                    else
                    {
                        this.MoreInfo = "Mobile, " + "Searching quantity:" + this._CurrentParameter.Quantity;
                    }

                    if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                    {
                        this.MoreInfo += ", price:" + this._CurrentParameter.PriceMin.ToString() + " - " + this._CurrentParameter.PriceMax.ToString();
                    }
                    if (!String.IsNullOrEmpty(this._CurrentParameter.PriceLevelString))
                    {
                        this.MoreInfo += ", ticket type:" + this._CurrentParameter.PriceLevelString;
                    }
                    if (!String.IsNullOrEmpty(this._CurrentParameter.TicketTypePasssword))
                    {
                        this.MoreInfo += ", password:" + this._CurrentParameter.TicketTypePasssword;
                    }

                    if (this._CurrentParameter.LowestPrice)
                    {
                        this.MoreInfo += ", lowest Price";
                    }

                    if (this._CurrentParameter.TopPrice)
                    {
                        this.MoreInfo += ", Top Price";
                    }
                }
                changeStatus(TicketSearchStatus.SearchingStatus);

                if (this.Ticket.onStartSearching != null)
                {
                    this.Ticket.onStartSearching(this.Ticket);
                }

                this._selectedAccountForAutoBuy = null;

                if (this.Ticket.URL.Contains("/shop/") || this.Ticket.URL.Contains("/#/"))
                {
                    this.isJSON = true;
                }

                if ((!this.isWeb && !this.isJSON) || (!this.isEventko && !this.isJSON))
                {
                    if ((this._session == null) || String.IsNullOrEmpty(this._session.mobileshopper))
                    {
                        this._session = new BrowserSession();
                    }
                }

                //if (new Uri(this.Ticket.URL).Host.Contains("o2priority"))
                //{
                //    context = "axsuk";
                //}
                //else
                //{
                //    context = "axsus";
                //}

                //if (this._AppStartUp.GlobalSetting.IfUseSpecialRelayProxies)
                //{
                //    context = "special";
                //}

                //Proxy
                if (_proxy != null)
                {
                    if ((!this.isWeb && !this.isJSON) || (!this.isEventko && !this.isJSON))
                    {
                        if (_proxy.IfLuminatiProxy)
                        {
                            this._session.luminatiSessionId = _proxy.LuminatiSessionId;
                        }

                        this._session.Proxy = _proxy.toWebProxy(context);
                    }
                }
                else
                {
                    if ((this.Ticket.ifUseProxies && this.IfUseProxy) && (GoodProxies._goodProxyList.Distinct().ToList().Count > 0))
                    {
                        _proxy = GoodProxies.getFoundProxy();
                        if (_proxy == null)
                            _proxy = GoodProxies.getProxy();
                        if (_proxy != null)
                        {
                            if (_proxy.TheProxyType == Proxy.ProxyType.MyIP || _proxy.TheProxyType == Core.Proxy.ProxyType.Luminati)
                            {
                                this._session.luminatiSessionId = _proxy.LuminatiSessionId;
                            }

                            _proxy.ProxySortOrder = Proxy.ProxyPriority.Use;
                            this._session.Proxy = _proxy.toWebProxy(context);
                        }
                    }
                }

                if (this.IfWorking && this.Ticket.isRunning)
                {
                    if (ProxyPicker.ProxyPickerInstance.ifSearchAllowed(this))
                    {
                        if (this.isWeb || this.isJSON || this.isEventko)
                        {
                            if (String.IsNullOrEmpty(this.SessionKey))
                            {
                                #region presale
                                _presaleSearch = new Presale(this);

                                if (_presaleSearch.startPresale())
                                {
                                    try
                                    {
                                        this._isPresale = true;
                                    }
                                    catch
                                    {
                                    }
                                }
                                else
                                {

                                    if (!this._presaleSearch.ifAvailable)
                                    {
                                        return false;
                                    }
                                    else
                                        this._isPresale = false;
                                }
                                #endregion
                            }
                        }

                        string[] breakforWroom = strURL.Split('?');
                        string[] split = breakforWroom[1].Split('&');

                        if (string.IsNullOrEmpty(this.wRoom))
                        {
                            if (this.Ticket.URL.Contains("EVENKO#"))
                            {
                                String w = this.Ticket.URL.Substring(this.Ticket.URL.IndexOf("#") + 1);
                                split = w.Split('/');
                                if (split[0].Contains("?"))
                                {
                                    split = split[0].Split('?');
                                    this.wRoom = split[0];
                                }
                                else
                                {
                                    this.wRoom = split[0];
                                }
                            }
                            else if (this.Ticket.URL.Contains("/shop/") || this.Ticket.URL.Contains("/#/"))
                            {
                                String w = this.Ticket.URL.Substring(this.Ticket.URL.IndexOf("#") + 2);
                                split = w.Split('/');
                                if (split[0].Contains("?"))
                                {
                                    split = split[0].Split('?');
                                    this.wRoom = split[0];
                                }
                                else
                                {
                                    this.wRoom = split[0];
                                }
                            }
                        }

                        if (String.IsNullOrEmpty(this.wRoom))
                        {
                            foreach (var item in split)
                            {
                                if (item.Contains("wr="))
                                {
                                    this.wRoom = item.Replace("wr=", "");
                                    break;
                                }
                            }
                        }

                        if (isMobile && !this.isJSON)
                        {
                            //if (strURL.Contains("/#/"))//("tickets.axs.com"))
                            {
                                //strHTML = this._session.Get(strURL);
                                strHTML = this._session.Get("https://axsmobile.eventshopper.com/mobileshopper/ajax/getRegions.json?countryCode=US");

                                //strHTML = this._session.Get("https://mobile.eventshopper.com/mobileshopper/ajax/getRegions.json?countryCode=US");
                                try
                                {
                                    //2nd URL of AXs Mobile
                                    tempUrl = strURL.Substring(strURL.IndexOf('?'));
                                    tempUrl = "https://axsmobile.eventshopper.com/mobilewroom/" + tempUrl;

                                    //tempUrl = "https://mobile.eventshopper.com/mobilewroom/" + tempUrl;
                                    strHTML = this._session.Get(tempUrl);
                                    this._session.HTMLWeb.Referrer = tempUrl;
                                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                                    doc.LoadHtml(strHTML);

                                    HtmlNode nodeWE = doc.DocumentNode.SelectSingleNode("//script[contains(text(),'var wroom =')]");
                                    if (nodeWE != null && nodeWE.InnerText.Contains("wroom ="))
                                    {
                                        string temp = nodeWE.InnerText.Substring(nodeWE.InnerText.IndexOf("wroom =") + 9);
                                        wRoom = temp.Remove(temp.IndexOf("\"")).Trim();
                                    }
                                    else
                                    {
                                        this.MoreInfo = TicketSearchStatus.MoreInfoEventNotAvaiable;
                                        return false;
                                    }

                                    #region presale
                                    _presaleSearch = new Presale(this);

                                    if (_presaleSearch.startPresale())
                                    {
                                        try
                                        {
                                            this._isPresale = true;
                                        }
                                        catch
                                        {
                                        }
                                    }
                                    else
                                    {

                                        if (!this._presaleSearch.ifAvailable)
                                        {
                                            return false;
                                        }
                                        else
                                            this._isPresale = false;
                                    }
                                    #endregion

                                    //This event is no longer on sale
                                    if (string.IsNullOrEmpty(Hash) && string.IsNullOrEmpty(HashTS))
                                    {
                                        //this.Ticket.ReleaseLotId(lotId);
                                        this.MoreInfo = TicketSearchStatus.MoreInfoEventNotAvaiable;
                                        return false;
                                    }

                                    if ((_proxy != null) && (!GoodProxies._goodProxyList.Contains(_proxy)))
                                    {
                                        _proxy.ProxySortOrder = Proxy.ProxyPriority.FirstPage;
                                        GoodProxies._goodProxyList.Add(_proxy);
                                    }

                                    if (this.IfWorking)
                                    {
                                        string urlEncode = UpperCaseUrlEncode(this._session.LastURL).Replace("%2F", "/");
                                        string newURL = string.Empty;

                                        if (string.IsNullOrEmpty(_presaleSearch.LotId))
                                            newURL = this._session.LastURL.Replace("mobilewroom", "mobileshopper") + "&lot=NoLotId&hash=" + Hash + "&ts=" + HashTS + "&ref=" + urlEncode;
                                        else
                                            newURL = this._session.LastURL.Replace("mobilewroom", "mobileshopper") + "&lot=" + _presaleSearch.LotId + "&hash=" + Hash + "&ts=" + HashTS + "&ref=" + urlEncode;

                                        //4th URL the big one for getting Form Elements
                                        strHTML = this._session.Get(newURL);

                                        //Process CaptchaPage
                                        //processCaptchaPage();

                                        Dictionary<String, String> _formElements = new Dictionary<string, string>();

                                        //5th Get request Value
                                        HtmlNode nodePostURL = this._session.HtmlDocument.DocumentNode.SelectSingleNode("//form[@method='POST']");
                                        string urlForPost = this._session.HTMLWeb.ResponseUri.Scheme + "://" + this._session.HTMLWeb.ResponseUri.Host.Trim();
                                        string urlForPostComplete = urlForPost + nodePostURL.Attributes["action"].Value.Trim();

                                        int dateLoop = 0, timeLoop = 0;
                                        bool flagParameter = false;

                                        foreach (var item in this._session.FormElements.Keys)
                                        {
                                            _formElements.Add(item, this._session.FormElements[item]);
                                        }

                                        HtmlNodeCollection NodeEvent = this._session.HtmlDocument.DocumentNode.SelectNodes("//a[@eventtypecode]");
                                        HtmlNodeCollection nodeElements = this._session.HtmlDocument.DocumentNode.SelectNodes("//*[@id='main-div']/ul/li");
                                        if (NodeEvent != null)
                                        {
                                            if (nodeElements != null)
                                            {
                                                foreach (HtmlNode elements in nodeElements)
                                                {
                                                    MultiEvent eventElements = new MultiEvent();
                                                    HtmlNode node = elements.SelectSingleNode("./a[@eventtypecode]");
                                                    if (node != null)
                                                    {

                                                        eventElements.EventTypeCode = node.Attributes["eventTypeCode"].Value.Trim();
                                                        eventElements.EventCode = node.Attributes["eventCode"].Value.Trim();

                                                        HtmlNode nodeDate = node.SelectSingleNode(".//div[@class='day']");
                                                        if (nodeDate != null)
                                                        {
                                                            //For getting Date
                                                            string date = string.Empty;
                                                            HtmlNodeCollection nodeMonthYear = this._session.HtmlDocument.DocumentNode.SelectNodes("//li[@data-role='list-divider']");
                                                            if (nodeMonthYear.Count > 1)
                                                            {
                                                                HtmlNode nodeMonth = elements.SelectSingleNode(".//div[@class='month']");
                                                                if (!(nodeMonthYear[dateLoop].InnerText.Replace("\n", "").Trim().Contains(nodeMonth.InnerText.Replace("\n", "").Trim())))
                                                                    dateLoop++;
                                                                date = nodeDate.InnerText.Replace("\n", "").Trim() + " " + nodeMonthYear[dateLoop].InnerText.Replace("\n", "").Trim();
                                                                //dateLoop++;
                                                            }
                                                            else
                                                                date = nodeDate.InnerText.Replace("\n", "").Trim() + " " + nodeMonthYear[0].InnerText.Replace("\n", "").Trim();

                                                            //Converting date to our format
                                                            System.Globalization.CultureInfo provider = new System.Globalization.CultureInfo("en-US");
                                                            DateTime newDate = DateTime.ParseExact(date, "d MMMM yyyy", provider);
                                                            eventDate = newDate.ToString("MM/dd/yyyy");
                                                            eventElements.EventDate = eventDate;

                                                            //For getting Time
                                                            string time = string.Empty;
                                                            HtmlNodeCollection nodeTime = elements.SelectNodes(".//div[@class='small']");

                                                            if (nodeTime.Count > 1)
                                                            {
                                                                time = nodeTime[1].InnerText.Replace("\n", "").Trim();
                                                                DateTime newTime = DateTime.Parse(time, provider);
                                                                time = newTime.ToString("h:mm tt");
                                                                timeLoop++;
                                                            }
                                                            else
                                                            {
                                                                time = nodeTime[0].InnerText.Replace("\n", "").Trim();
                                                                DateTime newTime = DateTime.Parse(time, provider);
                                                                time = newTime.ToString("hh:mm tt");
                                                            }
                                                            eventElements.EventTime = time;
                                                            MultiEvents.Add(eventElements);
                                                        }

                                                    }
                                                    else
                                                    {
                                                        HtmlNode soldOutDates = elements.SelectSingleNode("./p[@class = 'error soldOut']");
                                                        if (soldOutDates != null)
                                                        {
                                                            HtmlNode nodeDate = elements.SelectSingleNode(".//div[@class='day']");
                                                            if (nodeDate != null)
                                                            {
                                                                //For getting Date
                                                                string date = string.Empty;
                                                                HtmlNodeCollection nodeMonthYear = this._session.HtmlDocument.DocumentNode.SelectNodes("//li[@data-role='list-divider']");
                                                                if (nodeMonthYear.Count > 1)
                                                                {
                                                                    HtmlNode nodeMonth = elements.SelectSingleNode(".//div[@class='month']");
                                                                    if (!(nodeMonthYear[dateLoop].InnerText.Replace("\n", "").Trim().Contains(nodeMonth.InnerText.Replace("\n", "").Trim())))
                                                                        dateLoop++;
                                                                    date = nodeDate.InnerText.Replace("\n", "").Trim() + " " + nodeMonthYear[dateLoop].InnerText.Replace("\n", "").Trim();
                                                                    //dateLoop++;
                                                                }
                                                                else
                                                                    date = nodeDate.InnerText.Replace("\n", "").Trim() + " " + nodeMonthYear[0].InnerText.Replace("\n", "").Trim();

                                                                //Converting date to our format
                                                                System.Globalization.CultureInfo provider = new System.Globalization.CultureInfo("en-US");
                                                                DateTime newDate = DateTime.ParseExact(date, "d MMMM yyyy", provider);
                                                                eventDate = newDate.ToString("MM/dd/yyyy");
                                                                eventElements.EventDate = eventDate;

                                                                //For getting Time
                                                                string time = string.Empty;
                                                                HtmlNodeCollection nodeTime = elements.SelectNodes(".//div[@class='small']");
                                                                if (nodeTime != null)
                                                                {
                                                                    if (nodeTime.Count > 1)
                                                                    {
                                                                        time = nodeTime[1].InnerText.Replace("\n", "").Trim();
                                                                        DateTime newTime = DateTime.Parse(time, provider);
                                                                        time = newTime.ToString("h:mm tt");
                                                                        timeLoop++;
                                                                    }
                                                                    else
                                                                    {
                                                                        time = nodeTime[0].InnerText.Replace("\n", "").Trim();
                                                                        DateTime newTime = DateTime.Parse(time, provider);
                                                                        time = newTime.ToString("hh:mm tt");
                                                                    }
                                                                }
                                                                if (nodeTime != null)
                                                                {
                                                                    eventElements.EventTime = time;
                                                                    eventElements.isSoldOut = true;
                                                                    MultiEvents.Add(eventElements);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                if (Recaptcha.ToLower().Contains("enable"))
                                                {
                                                    if (processCaptchaPage())
                                                    {
                                                        if (String.IsNullOrEmpty(RecapToken))
                                                        {
                                                            return false;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (String.IsNullOrEmpty(this._session.mobileshopper))
                                                        {
                                                            return false;
                                                        }
                                                    }
                                                }

                                                foreach (var item in _formElements)
                                                {
                                                    if (!this._session.FormElements.ContainsKey(item.Key))
                                                    {
                                                        this._session.FormElements.Add(item.Key, item.Value);
                                                    }
                                                }

                                                flagParameter = mapParameterIfAvaiableMobile(_CurrentParameter);

                                                if (this._session.FormElements.ContainsKey("wr"))
                                                    this._session.FormElements["wr"] = wRoom;

                                                if (flagParameter)
                                                    strHTML = this._session.Post(urlForPostComplete);
                                                else
                                                    return false;

                                                try
                                                {
                                                    if (!String.IsNullOrEmpty(strHTML) && this._session.HtmlDocument != null)
                                                    {
                                                        if (strHTML.Contains("error-box") || strHTML.Contains("An error has occured"))
                                                        {
                                                            this.MoreInfo = TicketSearchStatus.MoreInfoSiteUnavailable;
                                                            return false;
                                                        }
                                                    }
                                                }
                                                catch { }

                                                doc = new HtmlAgilityPack.HtmlDocument();
                                                doc.LoadHtml(strHTML);

                                                this._tmEvent = new AXSEvent(doc, this);

                                                if (_tmEvent.IsExpired)
                                                {
                                                    this.MoreInfo = TicketSearchStatus.MoreInfoTicketOutDated;
                                                    return false;
                                                }
                                                if (_tmEvent.HasTicketTypes)
                                                {
                                                    lock (this.Ticket)
                                                    {
                                                        this.Ticket.RunCount++;
                                                    }

                                                    changeStatus(TicketSearchStatus.FirstPageStatus);

                                                    //For Split PopUp
                                                    if (_CurrentParameter.Quantity > 1)
                                                    {
                                                        if (!_CurrentParameter.AcceptSplit)
                                                        {
                                                            FormElementCollection formElements = this._session.FormElements;
                                                            this._session.Payload = "[\"" + wRoom + "\"]";
                                                            strHTML = this._session.Post("https://axsmobile.eventshopper.com/mobileshopper/ajax/availWSS.json");
                                                            this._session.Payload = String.Empty;

                                                            List<string> lstSplitCheck = new List<string>();
                                                            this._session.FormElements = formElements;
                                                            string eventCode = formElements["eventCode"];
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(strHTML))
                                                                {
                                                                    JObject jsonData = JObject.Parse(strHTML);
                                                                    if (jsonData != null)
                                                                    {
                                                                        if (jsonData["eventavail"] != null && jsonData["eventavail"][eventCode] != null)
                                                                        {
                                                                            JArray a = (JArray)jsonData["eventavail"][eventCode];

                                                                            foreach (JArray item in a)
                                                                            {
                                                                                foreach (JValue i3 in item)
                                                                                {
                                                                                    if (i3.Value != null)
                                                                                        lstSplitCheck.Add(i3.Value.ToString());

                                                                                }
                                                                            }

                                                                            for (int i = 1; i < lstSplitCheck.Count; i += 2)
                                                                            {
                                                                                if (lstSplitCheck[i].Equals("1") || lstSplitCheck[i].Equals("0"))
                                                                                {
                                                                                    isSplitPopUp = true;
                                                                                }
                                                                                else
                                                                                {
                                                                                    isSplitPopUp = false;
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                }
                                                            }
                                                            catch
                                                            {
                                                            }

                                                            if (isSplitPopUp)
                                                            {
                                                                this.MoreInfo = TicketSearchStatus.MoreInfoQuantityNotMatch + "Searching quantity:" + this._CurrentParameter.Quantity;
                                                                return false;
                                                            }
                                                        }
                                                    }

                                                    if (this.mapParameterIfAvaiableMobile(_CurrentParameter))
                                                    {
                                                        if (!this.IfWorking || !this.Ticket.isRunning)
                                                        {
                                                            return false;
                                                        }
                                                        _CurrentParameter.IfAvailable = true;

                                                        strHTML = this._session.Post("https://axsmobile.eventshopper.com/mobileshopper/ajax/searchSeats.json");

                                                        if (!strHTML.ToLower().Contains("false"))
                                                        {
                                                            strHTML = this._session.Get("https://axsmobile.eventshopper.com/mobileshopper/index.html?action=cart");
                                                        }
                                                        else
                                                        {
                                                            this.MoreInfo = "No Seats Found";
                                                            this.Session.mobileshopper = String.Empty;
                                                            return false;
                                                        }

                                                        result = true;
                                                    }
                                                    else
                                                    {
                                                        result = false;
                                                        if (this.Ticket.ifUseFoundOnFirstAttempt || this.Ticket.ifUseAvailableParameters)
                                                        {
                                                            this.MoreInfo = TicketSearchStatus.MoreInfoParamterNotMatch;
                                                            _CurrentParameter = null;
                                                        }
                                                    }

                                                }
                                                else // If Price levels does not exist in the event first page then show message.
                                                {
                                                    //this.MoreInfo = TicketSearchStatus.MoreInfoEventNotAvaiable;
                                                    this.MoreInfo = "";
                                                    result = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //For sold out events
                                            nodeElements = this._session.HtmlDocument.DocumentNode.SelectNodes("//p[@class = 'error soldOut']");
                                            if (nodeElements != null)
                                            {
                                                this.MoreInfo = TicketSearchStatus.MoreInfoTicketSoldOut;
                                                return false;
                                            }

                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    this.MoreInfo = TicketSearchStatus.MoreInfoEventNotAvaiable;
                                    ProxyPicker.ProxyPickerInstance.RecheckProxyStatus(this.Proxy, ex.Message);
                                    return false;
                                }
                            }
                            //else
                            //{
                            //    //this.MoreInfo = "Wrong AXS URL";
                            //    this.MoreInfo = "This event is sold on partner site";
                            //    return false;
                            //}
                        }
                        else
                        {


                            this.Sections = new List<AXSSection>();

                            //if (this._tmEvent == null || this._tmEvent.Sections.Count == 0)
                            {
                                this._tmEvent = new AXSEvent(this.doc, (AXSSearch)this);
                            }

                            if (!this._tmEvent.IfTicketAlive)
                            {
                                return false;
                            }
                            lock (this.Ticket)
                            {
                                this.Ticket.RunCount++;
                            }

                            changeStatus(TicketSearchStatus.FirstPageStatus);

                            if (String.IsNullOrEmpty(this.SessionKey))
                            {
                                if ((this.Recaptcha != null) && (this.Recaptcha.ToLower().Contains("enable")))
                                {
                                    if (String.IsNullOrEmpty(this.RecapToken))
                                    {
                                        return false;
                                    }
                                }
                            }

                            Boolean mapAvailable = false;

                            if (!this.TmEvent.ifJson)
                            {
                                mapAvailable = this.mapParameterIfAvaiable(_CurrentParameter);
                            }
                            else
                            {
                                mapAvailable = this.mapJSONParameterIfAvaiable(_CurrentParameter);
                            }

                            if (mapAvailable)
                            {
                                if ((_proxy != null) && (!GoodProxies._goodProxyList.Contains(_proxy)))
                                {
                                    _proxy.ProxySortOrder = Proxy.ProxyPriority.FirstPage;
                                    GoodProxies._goodProxyList.Add(_proxy);
                                }

                                _CurrentParameter.IfAvailable = true;
                                result = true;
                            }
                            else
                            {
                                result = false;
                                if (this.Ticket.ifUseFoundOnFirstAttempt || this.Ticket.ifUseAvailableParameters)
                                {
                                    this.MoreInfo = TicketSearchStatus.MoreInfoParamterNotMatch;
                                    _CurrentParameter = null;
                                }
                                this.SessionKey = String.Empty;
                            }
                        }
                    }
                    else
                    {
                        this.MoreInfo = "";//TicketSearchStatus.MoreInfoProxyNotAvaiable;
                        result = false;
                    }
                }
            }
            catch (Exception ex)
            {
                result = false;
                if (!ProxyPicker.ProxyPickerInstance.RecheckProxyStatus(this.Proxy, ex.Message))
                {
                    // Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
                }
            }
            return result;
        }

        public Dictionary<String, String> getAvailableOffers(HtmlNodeCollection offerNodes)
        {
            Dictionary<String, String> availableOffers = new Dictionary<string, string>();

            try
            {
                foreach (HtmlNode single in offerNodes)
                {
                    try
                    {
                        String title = String.Empty;
                        String URL = String.Empty;

                        HtmlNode titleNode = single.SelectSingleNode("div/h2[@class='c-card__title']");
                        if (titleNode != null)
                        {
                            title = titleNode.InnerText.Trim();
                        }

                        HtmlNode UrlNode = single.SelectSingleNode("div[@class='c-card__column2']/a");
                        if (UrlNode != null)
                        {
                            URL = UrlNode.Attributes["href"].Value.Replace("amp;", String.Empty);
                        }


                        if (string.IsNullOrEmpty(title) && string.IsNullOrEmpty(URL))
                        {
                            titleNode = single.SelectSingleNode("h2[@class='c-card__title']");
                            if (titleNode != null)
                            {
                                title = titleNode.InnerText.Trim();
                            }

                            UrlNode = single.SelectSingleNode("div[@class='c-card__column2']/a");
                            if (UrlNode != null)
                            {
                                URL = UrlNode.Attributes["href"].Value.Replace("amp;", String.Empty);
                            }
                            else
                            {
                                UrlNode = single.SelectSingleNode("h3");
                                if (UrlNode != null)
                                {
                                    URL = UrlNode.InnerText.Trim();
                                }
                            }
                        }

                        availableOffers.Add(title, URL);
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine(ex.Message);
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return availableOffers;
        }

        String queueID = String.Empty;
        String PrevServiceName = String.Empty;
        private Boolean SolveCaptchaBeforeQ(BrowserSession queueSession, String strHTML, String lastLayoutName)
        {
            Boolean flag = false;
            queueID = String.Empty;

            try
            {
                Match match = Regex.Match(strHTML.Replace("\r", string.Empty).Replace("\n", String.Empty), @"QueueIt.Queue.InQueueView((.|\n)*?\));");

                String captchaType = String.Empty, captchaPublicKey = String.Empty, invisibleCaptchaKey = String.Empty, challengeVerifyEndpoint=string.Empty, captchaVerify = String.Empty, captchaSource = String.Empty, captchaPostData = String.Empty;
                Boolean ifCaptcha = false;
                String Qcid = String.Empty;
                String eventStartTimeUTC = String.Empty;

                // Boolean ifValidated = false;

                //while (!ifValidated)
                //{
                //    ifValidated = processCaptchaPage();

                //    Thread.Sleep(10000);
                //}

                if (match.Success)
                {
                    changeStatus("QueueIT Captcha Page Loaded");

                    String queueInfo = match.Value.Replace("QueueIt.Queue.InQueueView(", String.Empty);
                    queueInfo = queueInfo.Replace(");", String.Empty);

                    try
                    {
                        queueInfo = queueInfo.Replace("decodeURIComponent('')", "null").Replace("window.messageFeed", String.Empty);
                        JObject queue = JObject.Parse(queueInfo);

                        if (queue != null)
                        {
                            if (queue.Property("culture") != null)
                            {
                                Qcid = queue["culture"].ToString();
                            }

                            if (queue.Property("showCaptcha") != null)
                            {
                                ifCaptcha = Convert.ToBoolean(queue["showCaptcha"].ToString());
                            }

                            if (queue.Property("captchaVerifyEndpoint") != null)
                            {
                                captchaVerify = queue["captchaVerifyEndpoint"].ToString();
                            }


                            if (queue.Property("challengeVerifyEndpoint") != null)
                            {
                                challengeVerifyEndpoint = queue["challengeVerifyEndpoint"].ToString();
                            }

                            if (queue.Property("captchaPublicKey") != null)
                            {
                                captchaPublicKey = queue["captchaPublicKey"].ToString();
                            }

                            if (queue.Property("captchaInvisiblePublicKey") != null)
                            {
                                invisibleCaptchaKey = queue["captchaInvisiblePublicKey"].ToString();
                            }

                            if (queue.Property("captchaType") != null)
                            {
                                captchaType = queue["captchaType"].ToString();
                            }

                            if (queue.Property("proofOfWorkSource") != null)
                            {
                                captchaType = "5";
                                ifCaptcha = true;
                            }

                            if (captchaType.Equals("4"))
                            {
                                eventStartTimeUTC = queue["inqueueInfo"]["ticket"]["eventStartTimeUTC"].ToString();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine(ex.Message);
                    }


                    if (ifCaptcha || captchaType.Equals("0"))
                    {
                        String RecaptchaV2Key = String.Empty, CaptchaResponse = String.Empty;
                        int count = 0;

                        if (captchaType.Equals("1"))
                        {
                            RecaptchaV2Key = captchaPublicKey;
                            captchaSource = "recaptcha";
                        }
                        else if (captchaType.Equals("2"))
                        {
                            RecaptchaV2Key = invisibleCaptchaKey;
                            captchaSource = "recaptcha-invisible";
                        }
                        //else if (captchaType.Equals("4"))
                        //{
                        //    return false;
                        //}

                        if (String.IsNullOrEmpty(CaptchaResponse))
                        {
                            TokenBucket tb = null;
                            int captchaPollRetry = 0;

                            if (this.Ticket.GlobalSetting.ifQueueITBucket && captchaType.Equals("1"))
                            {
                                #region Pool from bucket
                                do
                                {
                                    try
                                    {
                                        if (this.IfWorking && this.Ticket.isRunning)
                                        {
                                            changeStatus(TicketSearchStatus.ResolvingCaptchaStatus);
                                        }

                                        if (captchaType.Equals("1"))
                                        {
                                            tb = this.getRecapToken("QUEUE_V1");
                                        }
                                        else if (captchaType.Equals("2"))
                                        {
                                            tb = this.getRecapToken("QUEUE_V2");
                                        }

                                        captchaPollRetry++;

                                        if ((tb != null) && (!String.IsNullOrEmpty(tb.Recaptoken) && (String.IsNullOrEmpty(tb.Error))))
                                        {
                                            if (tb.Recaptoken.Equals("?"))
                                            {
                                                Thread.Sleep(2000);
                                                continue;
                                            }

                                            CaptchaResponse = tb.Recaptoken;
                                            break;
                                        }

                                        changeStatus(TicketSearchStatus.CaptchaPollStatus);
                                        Thread.Sleep(2000);
                                    }
                                    catch (Exception ex)
                                    {
                                        try
                                        {
                                            Debug.WriteLine(ex.Message + " - " + ex.StackTrace);
                                        }
                                        catch (Exception xe)
                                        {
                                            Debug.WriteLine(xe.Message + Environment.NewLine + xe.StackTrace);
                                        }
                                    }

                                } while (captchaPollRetry < 60 && this.IfWorking);
                                #endregion
                            }
                            else if (captchaType.Equals("2"))
                            {
                                #region on request captcha solving

                                #region for recap v2
                                Uri site = new Uri(queueSession.LastURL);
                                JWTTokenMessage msg = new JWTTokenMessage();
                                //msg.Site = site.Host;

                                #region selectCaptchaservice
                                //if (this.Ticket.AutoCaptchaServices.ifDBCAutoCaptcha)
                                //{
                                //    msg.Username = this.Ticket.AutoCaptchaServices.DBCUserName;
                                //    msg.Password = this.Ticket.AutoCaptchaServices.DBCPassword;
                                //    msg.ServiceName = "DBC";
                                //}
                                //else if (this.Ticket.AutoCaptchaServices.if2CAutoCaptcha)
                                //{
                                //    Debug.WriteLine("2C selected");
                                //    msg.Key = this.Ticket.AutoCaptchaServices.C2Key;
                                //    msg.ServiceName = "2C";
                                //}
                                //else if (this.Ticket.AutoCaptchaServices.ifAntigate)
                                //{
                                //    msg.Key = this.Ticket.AutoCaptchaServices.AntigateKey;
                                //    msg.ServiceName = "A";
                                //}
                                //else if (this.Ticket.AutoCaptchaServices.ifRDCAutoCaptcha)
                                //{
                                //    msg.Username = this.Ticket.AutoCaptchaServices.RDCUserName;
                                //    msg.Password = this.Ticket.AutoCaptchaServices.RDCPassword;
                                //    msg.ServiceName = "RDC";
                                //}
                                #endregion

                                PrevServiceName = String.Empty;

                                int retryc = 0;

                                do
                                {
                                    msg = getNextCaptchaService();
                                    msg.Host = site.Host;

                                    changeStatus("Solving QueueIT Captcha with - " + msg.ServiceName);

                                    if (!msg.ServiceName.Equals("2C") && !msg.ServiceName.Equals("A") && !msg.ServiceName.Equals("RDC") && !msg.ServiceName.Equals("DBC"))
                                    {
                                        return false;
                                    }
                                    else if (msg.ServiceName.Equals("2C"))
                                    {
                                        PrevServiceName += msg.ServiceName;
                                        CaptchaResponse = new RecaptchaTokenApi2C().GetRecaptchaToken(msg.Key, RecaptchaV2Key, msg.Site);
                                    }
                                    else if (msg.ServiceName.Equals("RDC"))
                                    {
                                        PrevServiceName += msg.ServiceName;
                                        CaptchaResponse = new RecaptchaTokenRDC().GetRecaptchaToken(msg.Username, msg.Password, RecaptchaV2Key, msg.Site, String.Empty, String.Empty);
                                    }
                                    else if (msg.ServiceName.Equals("A"))
                                    {
                                        PrevServiceName += msg.ServiceName;
                                        CaptchaResponse = new RecaptchaTokenApiAntigate().GetRecaptchaTokenProxyLess(msg.Key, RecaptchaV2Key, msg.Site);
                                    }
                                    else if (msg.ServiceName.Equals("DBC"))
                                    {
                                        PrevServiceName += msg.ServiceName;
                                        CaptchaResponse = new RecaptchaTokenApiDBC().GetRecaptchaToken(msg.Username, msg.Password, RecaptchaV2Key, msg.Site, "", "");
                                    }

                                    retryc++;

                                    Thread.Sleep(1000);
                                } while (String.IsNullOrEmpty(CaptchaResponse) && this.Ticket.isRunning && this.IfWorking && retryc < 10);
                                #endregion

                                #endregion
                            }
                            if (captchaType.Equals("4") || captchaType.Equals("5"))
                            {
                                #region qualifiesOld commented out
                                //DateTime dteventStartTime = DateTime.Parse(eventStartTimeUTC);

                                //long EpochEventStartTime = UnixTimeNow(dteventStartTime);
                                //long EpochTimeNow = UnixTimeNow(DateTime.UtcNow);

                                //while (this.IfWorking && this.Ticket.isRunning)
                                //{
                                //    try
                                //    {
                                //        if (EpochTimeNow < EpochEventStartTime)
                                //        {
                                //            //double minsRemaining = DateTime.UtcNow.Subtract(dteventStartTime).TotalMinutes;
                                //            TimeSpan ts = dteventStartTime.Subtract(DateTime.UtcNow.AddSeconds(-60));

                                //            this.MoreInfo = ts.Minutes + " mins, " + ts.Seconds + " secs remaining to event";
                                //            changeStatus("QueueIT Page Loaded");

                                //            Thread.Sleep(1500);

                                //            EpochTimeNow = UnixTimeNow(DateTime.UtcNow.AddSeconds(-60));
                                //        }
                                //        else
                                //        {
                                //            flag = true;

                                //            this.MoreInfo = "Searching for Tickets.";
                                //            changeStatus(TicketSearchStatus.SearchingStatus);

                                //            while (String.IsNullOrEmpty(queueSession.RedirectLocation) && this.IfWorking && this.Ticket.isRunning)
                                //            {
                                //                try
                                //                {
                                //                    Thread.Sleep(5000);

                                //                    strHTML = queueSession.Get(this.Ticket.URL);
                                //                }
                                //                catch (Exception x)
                                //                {
                                //                    Debug.WriteLine(x.Message);
                                //                    break;
                                //                }
                                //            }

                                //            break;
                                //        }
                                //    }
                                //    catch (Exception ex)
                                //    {
                                //        Debug.WriteLine(ex.Message);
                                //        flag = true;

                                //        this.MoreInfo = "Searching for Tickets.";
                                //        changeStatus(TicketSearchStatus.SearchingStatus);

                                //        while (String.IsNullOrEmpty(queueSession.RedirectLocation) && this.IfWorking && this.Ticket.isRunning)
                                //        {
                                //            try
                                //            {
                                //                Thread.Sleep(5000);

                                //                strHTML = queueSession.Get(this.Ticket.URL);
                                //            }
                                //            catch (Exception x)
                                //            {
                                //                Debug.WriteLine(x.Message);
                                //                break;
                                //            }
                                //        }

                                //        break;
                                //    }
                                //} 
                                #endregion

                                #region new addition
                                HtmlNode node = queueSession.HtmlDocument.DocumentNode.SelectSingleNode("//*[@id='queue-it_log']");
                                if (node != null)
                                {
                                    exeventID = ExtractEventId(strHTML);

                                    String dataid = node.Attributes["data-userid"].Value;

                                    #region Case2
                                    //String Response = Captcha4Solving(exeventID, dataid);
                                    //if (String.IsNullOrEmpty(Response))
                                    //{
                                    //    flag = ParserQueueInfo(Response, queueSession, lastLayoutName);
                                    //}
                                    //else
                                    //{
                                    //    return false;
                                    //} 
                                    #endregion

                                    BrowserSession cloned = (BrowserSession)queueSession.Clone();
                                    cloned.StrCookies = null;
                                    cloned.HTMLWeb.Referrer = this.Ticket.URL;
                                    //strHTML = cloned.Get("https://eu-west-1-machinecaptcha.queue-it.net/api/challenge/" + dataid);

                                    if (captchaType.Equals("5"))
                                    {
                                        strHTML = cloned.Get("https://shop.axs.com/serviceapi/pow/challenge/" + dataid);

                                    }
                                    else
                                    {
                                        strHTML = cloned.Get("https://shop.axs.com/serviceapi/machinecaptcha/challenge/" + dataid);
                                    }

                                    match = Regex.Match(cloned.HtmlDocument.OriginalText, "\"challengeId\":(.*?)}");

                                    if (match.Success)
                                    {
                                        string arg = "{" + match.Value;
                                        Match subMatch = Regex.Match(cloned.HtmlDocument.OriginalText, "\"checksum\":(.*?)}");
                                        if (subMatch.Success)
                                        {
                                            arg += "," + subMatch.Value;

                                            JObject obj = JsonConvert.DeserializeObject<JObject>(arg, new JsonSerializerSettings() { DateParseHandling = DateParseHandling.None });
                                            if (obj != null)
                                            {
                                                int postfix = 0;
                                                DateTime timeBeforeCalculating = DateTime.Now;

                                                String hash = getSHA256HashQ(obj["parameters"]["Input"].ToString(), obj["parameters"]["ZeroCount"].ToString(), out postfix);

                                                DateTime timestamp = DateTime.Parse(obj["timestamp"].ToString());
                                                double duration = Math.Round(DateTime.Now.Subtract(timeBeforeCalculating).TotalMilliseconds);

                                                String sessionid = "{\"userId\": \"" + dataid + "\",\"challengeId\": \"" + obj["challengeId"].ToString() + "\",\"timestamp\": \"" + obj["timestamp"].ToString() + "\",\"parameters\": {\"Input\": \"" + obj["parameters"]["Input"].ToString() + "\",\"ZeroCount\": " + obj["parameters"]["ZeroCount"].ToString() + "},\"checksum\": \"" + obj["checksum"].ToString() + "\",\"sessionId\": \"" + obj["sessionId"].ToString() + "\",\"ip\": \"" + obj["ip"].ToString() + "\",\"solution\": {\"postfix\": " + postfix + ",\"hash\": \"" + hash + "\"},\"tags\": [\"mcTag-CustomerId:axs\",\"mcTag-EventId:" + exeventID + "\"],\"stats\": {\"duration\": " + duration + ",\"tries\": 1,\"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\",\"screen\": \"1900 x 1200\",\"browser\": \"Firefox\",\"browserVersion\": \"66.0\",\"isMobile\": false,\"os\": \"Windows\",\"osVersion\": \"10\",\"cookiesEnabled\": true}}";

                                                if (obj.Property("difficulty") != null)
                                                {
                                                    sessionid = "{\"userId\": \"" + dataid + "\",\"challengeId\": \"" + obj["challengeId"].ToString() + "\",\"timestamp\": \"" + obj["timestamp"].ToString() + "\",\"parameters\": {\"Input\": \"" + obj["parameters"]["Input"].ToString() + "\",\"ZeroCount\": " + obj["parameters"]["ZeroCount"].ToString() + "},\"checksum\": \"" + obj["checksum"].ToString() + "\",\"sessionId\": \"" + obj["sessionId"].ToString() + "\",\"ip\": \"" + obj["ip"].ToString() + "\",\"solution\": {\"postfix\": " + postfix + ",\"hash\": \"" + hash + "\"},\"tags\": [\"mcTag-CustomerId:axs\",\"mcTag-EventId:" + exeventID + "\"],\"stats\": {\"duration\": " + duration + ",\"tries\": 1,\"difficulty\":" + obj["difficulty"].ToString() + ",\"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\",\"screen\": \"1900 x 1200\",\"browser\": \"Firefox\",\"browserVersion\": \"66.0\",\"isMobile\": false,\"os\": \"Windows\",\"osVersion\": \"10\",\"cookiesEnabled\": true}}";
                                                }

                                                sessionid = Convert.ToBase64String(Encoding.UTF8.GetBytes(sessionid)).Replace("=", "");

                                                String CaptchaVerifyData = string.Empty;

                                                if (captchaType.Equals("5"))
                                                {
                                                    CaptchaVerifyData = "{\"captchaProvider\":\"proofofwork\",\"sessionId\":\"" + sessionid + "\",\"customerId\":\"axs\",\"eventId\":\"" + exeventID + "\",\"version\":4}";
                                                }
                                                else
                                                {
                                                    CaptchaVerifyData = "{\"captchaProvider\":\"machinecaptcha\",\"sessionId\":\"" + sessionid + "\",\"customerId\":\"axs\",\"eventId\":\"" + exeventID + "\",\"version\":" + captchaType + "}";
                                                }
                                                queueSession.Payload = CaptchaVerifyData;
                                                queueSession._IfJSOn = true;
                                                queueSession.HTMLWeb.Referrer = this.Ticket.URL;

                                                if (captchaType.Equals("5"))
                                                {
                                                    strHTML = queueSession.Post(challengeVerifyEndpoint);

                                                }
                                                else
                                                {
                                                    strHTML = queueSession.Post(captchaVerify);
                                                }
                                                queueSession._IfJSOn = false;

                                                flag = ParserQueueInfo(strHTML, queueSession, lastLayoutName);

                                                return flag;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        JObject obj = JsonConvert.DeserializeObject<JObject>(cloned.HtmlDocument.OriginalText, new JsonSerializerSettings() { DateParseHandling = DateParseHandling.None });

                                        if (captchaType.Equals("5"))
                                        {
                                            int postfix = 0;
                                            DateTime timeBeforeCalculating = DateTime.Now;



                                            String hash = getSHA256HashQ(obj["parameters"]["input"].ToString(), obj["parameters"]["zeroCount"].ToString(), out postfix);

                                            //DateTime timestamp = DateTime.Parse(obj["timestamp"].ToString());
                                            //double duration = Math.Round(DateTime.Now.Subtract(timeBeforeCalculating).TotalMilliseconds);


                                            string meta = obj["meta"].ToString();
                                            string sid = obj["sessionId"].ToString();

                                            string sessionid = "{\"userId\":\"" + dataid + "\",\"meta\":\"" + meta + "\",\"sessionId\":\"" + sid + "\",\"solution\":{\"postfix\":" + postfix + ",\"hash\":\"" + hash + "\"},\"tags\":[\"powTag-CustomerId:axs\",\"powTag-EventId:" + exeventID + "\",\"powTag-UserId:" + dataid + "\"],\"stats\":{\"duration\":430,\"tries\":1,\"userAgent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0\",\"screen\":\"1920 x 1080\",\"browser\":\"Firefox\",\"browserVersion\":\"79.0\",\"isMobile\":false,\"os\":\"Windows\",\"osVersion\":\"10\",\"cookiesEnabled\":true},\"parameters\":{\"input\":\"" + obj["parameters"]["input"].ToString() + "\",\"zeroCount\":" + obj["parameters"]["zeroCount"].ToString() + "}}";

                                            //String sessionid = "{\"userId\": \"" + dataid + "\",\"challengeId\": \"" + obj["challengeId"].ToString() + "\",\"timestamp\": \"" + obj["timestamp"].ToString() + "\",\"parameters\": {\"Input\": \"" + obj["parameters"]["Input"].ToString() + "\",\"ZeroCount\": " + obj["parameters"]["ZeroCount"].ToString() + "},\"checksum\": \"" + obj["checksum"].ToString() + "\",\"sessionId\": \"" + obj["sessionId"].ToString() + "\",\"ip\": \"" + obj["ip"].ToString() + "\",\"solution\": {\"postfix\": " + postfix + ",\"hash\": \"" + hash + "\"},\"tags\": [\"mcTag-CustomerId:axs\",\"mcTag-EventId:" + exeventID + "\"],\"stats\": {\"duration\": " + duration + ",\"tries\": 1,\"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\",\"screen\": \"1900 x 1200\",\"browser\": \"Firefox\",\"browserVersion\": \"66.0\",\"isMobile\": false,\"os\": \"Windows\",\"osVersion\": \"10\",\"cookiesEnabled\": true}}";


                                            //if (obj.Property("difficulty") != null)
                                            //{
                                            //    sessionid = "{\"userId\": \"" + dataid + "\",\"challengeId\": \"" + obj["challengeId"].ToString() + "\",\"timestamp\": \"" + obj["timestamp"].ToString() + "\",\"parameters\": {\"Input\": \"" + obj["parameters"]["Input"].ToString() + "\",\"ZeroCount\": " + obj["parameters"]["ZeroCount"].ToString() + "},\"checksum\": \"" + obj["checksum"].ToString() + "\",\"sessionId\": \"" + obj["sessionId"].ToString() + "\",\"ip\": \"" + obj["ip"].ToString() + "\",\"solution\": {\"postfix\": " + postfix + ",\"hash\": \"" + hash + "\"},\"tags\": [\"mcTag-CustomerId:axs\",\"mcTag-EventId:" + exeventID + "\"],\"stats\": {\"duration\": " + duration + ",\"tries\": 1,\"difficulty\":" + obj["difficulty"].ToString() + ",\"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\",\"screen\": \"1900 x 1200\",\"browser\": \"Firefox\",\"browserVersion\": \"66.0\",\"isMobile\": false,\"os\": \"Windows\",\"osVersion\": \"10\",\"cookiesEnabled\": true}}";
                                            //}

                                            sessionid = Convert.ToBase64String(Encoding.UTF8.GetBytes(sessionid)).Replace("=", "");

                                            String CaptchaVerifyData = string.Empty;

                                            if (captchaType.Equals("5"))
                                            {
                                                CaptchaVerifyData = "{\"captchaProvider\":\"proofofwork\",\"sessionId\":\"" + sessionid + "\",\"customerId\":\"axs\",\"eventId\":\"" + exeventID + "\",\"version\":4}";

                                            }
                                            else
                                            {
                                                CaptchaVerifyData = "{\"captchaProvider\":\"machinecaptcha\",\"sessionId\":\"" + sessionid + "\",\"customerId\":\"axs\",\"eventId\":\"" + exeventID + "\",\"version\":" + captchaType + "}";
                                            }
                                            queueSession.Payload = CaptchaVerifyData;
                                            queueSession._IfJSOn = true;
                                            queueSession.HTMLWeb.Referrer = this.Ticket.URL;

                                            if (captchaType.Equals("5"))
                                            {
                                                strHTML = queueSession.Post(challengeVerifyEndpoint);

                                            }
                                            else
                                            {
                                                strHTML = queueSession.Post(captchaVerify);
                                            }
                                            queueSession._IfJSOn = false;

                                            flag = ParserQueueInfo(strHTML, queueSession, lastLayoutName);

                                            return flag;

                                        }

                                    }
                                }
                                #endregion
                            }


                            if (!String.IsNullOrEmpty(CaptchaResponse) && !captchaType.Equals("4") && !captchaType.Equals("5"))
                            {
                                if (this.IfWorking && this.Ticket.isRunning)
                                {
                                    changeStatus(TicketSearchStatus.CaptchaResolvedStatus);
                                }

                                exeventID = ExtractEventId(strHTML);
                                String postData = "{\"captchaProvider\":\"" + captchaSource + "\",\"sessionId\":\"" + CaptchaResponse + "\",\"customerId\":\"axs\",\"eventId\":\"" + exeventID + "\",\"version\":2}";

                                queueSession.Payload = postData;
                                queueSession._IfJSOn = true;

                                String str = queueSession.Post(captchaVerify);
                                queueSession._IfJSOn = false;

                                flag = ParserQueueInfo(str, queueSession, lastLayoutName);
                            }

                            if (captchaType.Equals("0"))
                            {
                                exeventID = ExtractEventId(strHTML).Trim();

                                queueSession.Payload = "{\"layoutName\":\"" + lastLayoutName.Trim() + " \",\"customUrlParams\":\"\",\"targetUrl\":\"\"}";
                                queueSession._IfJSOn = true;

                                String url = String.Empty;

                                if (!this.Ticket.IsUkEvent)
                                {
                                    url = "https://shop.axs.com/spa-api/queue/axs/" + exeventID + "/enqueue?cid=en-US";
                                }
                                else
                                {
                                    url = "https://shop.axs.com/spa-api/queue/axs/" + exeventID + "/enqueue?cid=en-GB";
                                }


                                String str = queueSession.Post(url);
                                if (!String.IsNullOrEmpty(str))
                                {
                                    JObject queue = JObject.Parse(str);
                                    if (queue != null)
                                    {
                                        if (queue.Property("queueId") != null)
                                        {
                                            queueID = queue["queueId"].ToString();

                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return flag;
        }

        private String Captcha4Solving(string eventid, string dataid)
        {
            String response = String.Empty;

            try
            {
                //String eventid = "41068243", dataid = "4c6709e2-533c-477d-b55a-3cd9b872a99c";

                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

                WebClient wc = new WebClient();
                wc.Proxy = new WebProxy("127.0.0.1:8888");

                wc.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0");
                wc.Headers.Add("Accept", "application/json, text/javascript, */*; q=0.01");
                wc.Headers.Add("Accept-Language", "en-US,en;q=0.5");
                wc.Headers.Add("Accept-Encoding", "gzip, deflate, br");
                wc.Headers.Add("Referer", "http://shop.axs.com/?c=axs&e=" + eventid);
                wc.Headers.Add("mcTag-CustomerId", "axs");
                wc.Headers.Add("mcTag-EventId", eventid);
                wc.Headers.Add("Content-Type", "application/json");
                wc.Headers.Add("Origin", "http://shop.axs.com");

                response = wc.DownloadString("https://eu-west-1-machinecaptcha.queue-it.net/api/challenge/" + dataid);

                JObject obj = JsonConvert.DeserializeObject<JObject>(response, new JsonSerializerSettings() { DateParseHandling = DateParseHandling.None });

                if (obj != null)
                {
                    String sessionid = "";
                    String s = obj["timestamp"].ToString().ToUpper();

                    int postfix = 0;
                    DateTime timeBeforeCalculating = DateTime.Now;

                    String hash = getSHA256HashQ(obj["parameters"]["Input"].ToString(), obj["parameters"]["ZeroCount"].ToString(), out postfix);

                    DateTime timestamp = DateTime.Parse(obj["timestamp"].ToString());
                    double duration = Math.Round(DateTime.Now.Subtract(timeBeforeCalculating).TotalMilliseconds);

                    sessionid = "{\"userId\": \"" + dataid + "\",\"challengeId\": \"" + obj["challengeId"].ToString() + "\",\"timestamp\": \"" + obj["timestamp"].ToString() + "\",\"parameters\": {\"Input\": \"" + obj["parameters"]["Input"].ToString() + "\",\"ZeroCount\": " + obj["parameters"]["ZeroCount"].ToString() + "},\"checksum\": \"" + obj["checksum"].ToString() + "\",\"sessionId\": \"" + obj["sessionId"].ToString() + "\",\"ip\": \"" + obj["ip"].ToString() + "\",\"solution\": {\"postfix\": " + postfix + ",\"hash\": \"" + hash + "\"},\"tags\": [\"mcTag-CustomerId:axs\",\"mcTag-EventId:" + eventid + "\"],\"stats\": {\"duration\": " + duration + ",\"tries\": 1,\"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\",\"screen\": \"1900 x 1200\",\"browser\": \"Firefox\",\"browserVersion\": \"66.0\",\"isMobile\": false,\"os\": \"Windows\",\"osVersion\": \"10\",\"cookiesEnabled\": true}}";

                    if (obj.Property("difficulty") != null)
                    {
                        //sessionid = "{\"userId\": \"" + "507f3ebd-0b2b-4eb7-bff6-c11a5f74e6c7" + "\",\"challengeId\": \"" + obj["challengeId"].ToString() + "\",\"timestamp\": \"" + obj["timestamp"].ToString() + "\",\"parameters\": {\"Input\": \"" + obj["parameters"]["Input"].ToString() + "\",\"ZeroCount\": " + obj["parameters"]["ZeroCount"].ToString() + "},\"checksum\": \"" + obj["checksum"].ToString() + "\",\"sessionId\": \"" + obj["sessionId"].ToString() + "\",\"ip\": \"" + obj["ip"].ToString() + "\",\"solution\": {\"postfix\": " + splitted[2] + ",\"hash\": \"" + splitted[0] + "\"},\"tags\": [\"mcTag-CustomerId:axs\",\"mcTag-EventId:" + 55003534 + "\"],\"stats\": {\"duration\": " + splitted[1] + ",\"tries\": 1,\"difficulty\":" + obj["difficulty"].ToString() + ",\"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\",\"screen\": \"1900 x 1200\",\"browser\": \"Firefox\",\"browserVersion\": \"66.0\",\"isMobile\": false,\"os\": \"Windows\",\"osVersion\": \"10\",\"cookiesEnabled\": true}}";

                        sessionid = "{\"userId\": \"" + dataid + "\",\"challengeId\": \"" + obj["challengeId"].ToString() + "\",\"timestamp\": \"" + obj["timestamp"].ToString() + "\",\"parameters\": {\"Input\": \"" + obj["parameters"]["Input"].ToString() + "\",\"ZeroCount\": " + obj["parameters"]["ZeroCount"].ToString() + "},\"checksum\": \"" + obj["checksum"].ToString() + "\",\"sessionId\": \"" + obj["sessionId"].ToString() + "\",\"ip\": \"" + obj["ip"].ToString() + "\",\"solution\": {\"postfix\": " + postfix + ",\"hash\": \"" + hash + "\"},\"tags\": [\"mcTag-CustomerId:axs\",\"mcTag-EventId:" + eventid + "\"],\"stats\": {\"duration\": " + duration + ",\"tries\": 1,\"difficulty\":" + obj["difficulty"].ToString() + ",\"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\",\"screen\": \"1900 x 1200\",\"browser\": \"Firefox\",\"browserVersion\": \"66.0\",\"isMobile\": false,\"os\": \"Windows\",\"osVersion\": \"10\",\"cookiesEnabled\": true}}";
                    }

                    sessionid = Convert.ToBase64String(Encoding.UTF8.GetBytes(sessionid)).Replace("=", "");

                    wc = new WebClient();
                    wc.Proxy = new WebProxy("127.0.0.1:8888");
                    wc.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0");
                    wc.Headers.Add("Accept", "application/json, text/javascript, */*; q=0.01");
                    wc.Headers.Add("Accept-Language", "en-US,en;q=0.5");
                    wc.Headers.Add("Accept-Encoding", "gzip, deflate, br");
                    wc.Headers.Add("Content-Type", "application/json");
                    wc.Headers.Add("DNT", "1");
                    wc.Headers.Add("Referer", "http://shop.axs.com/?c=axs&e=" + eventid);
                    wc.Headers.Add("Origin", "http://shop.axs.com");

                    response = wc.UploadString("https://eu-west-1-verifycaptcha-api.queue-it.net/captchaverify", "{\"captchaProvider\":\"machinecaptcha\",\"sessionId\":\"" + sessionid + "\",\"customerId\":\"axs\",\"eventId\":\"" + eventid + "\",\"version\":2}");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return response;
        }

        public long UnixTimeNow(DateTime datetime)
        {
            TimeSpan _TimeSpan = (datetime - new DateTime(1970, 1, 1, 0, 0, 0));
            return (long)_TimeSpan.TotalMilliseconds;
        }

        private Boolean ParserQueueInfo(String str, BrowserSession queueSession, String lastLayoutName)
        {
            Boolean flag = false;

            try
            {
                if (!String.IsNullOrEmpty(str))
                {
                    Newtonsoft.Json.JsonSerializerSettings ser = new Newtonsoft.Json.JsonSerializerSettings();
                    ser.DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat;
                    ser.DateParseHandling = Newtonsoft.Json.DateParseHandling.None;

                    JObject res = Newtonsoft.Json.JsonConvert.DeserializeObject<JObject>(str, ser);
                    if (res != null)
                    {
                        String sessionId = "", timestamp = "", checksum = "", sourceIp = "", provider = "";
                        //if (res.Property("data") != null)
                        {
                            if (res.Property("sessionInfo") != null)
                            {
                                changeStatus("QueueIT Captcha Resolved.");

                                if (((JObject)res["sessionInfo"]).Property("sessionId") != null)
                                {
                                    sessionId = res["sessionInfo"]["sessionId"].ToString();
                                }
                                if (((JObject)res["sessionInfo"]).Property("timestamp") != null)
                                {
                                    timestamp = res["sessionInfo"]["timestamp"].ToString();
                                }
                                if (((JObject)res["sessionInfo"]).Property("checksum") != null)
                                {
                                    checksum = res["sessionInfo"]["checksum"].ToString();
                                }
                                if (((JObject)res["sessionInfo"]).Property("captchaProvider") != null)
                                {
                                    provider = res["sessionInfo"]["captchaProvider"].ToString();
                                }
                                if (((JObject)res["sessionInfo"]).Property("sourceIp") != null)
                                {
                                    sourceIp = res["sessionInfo"]["sourceIp"].ToString();
                                }

                                //string postData = "{\"captchaSession\":{\"sessionId\":\"" + sessionId + "\",\"timestamp\":\"" + timestamp + "\",\"checksum\":\"" + checksum + "\"},\"layoutName\":\"" + lastLayoutName + "\",\"targetUrl\":\"\"}";
                               // string postData = "{\"captchaSession\":{\"captchaProvider\":\"" + provider + "\",\"sessionId\":\"" + sessionId + "\",\"sourceIp\":\"" + sourceIp + "\",\"timestamp\":\"" + timestamp + "\",\"checksum\":\"" + checksum + "\",\"version\":" + 4 + "},\"customUrlParams\":\"\",\"layoutName\":\"" + lastLayoutName + "\",\"targetUrl\":\"\"}";


                                string postData = "{\"challengeSessions\":[{\"sessionId\":\"" + sessionId + "\",\"timestamp\":\"" + timestamp + "\",\"checksum\":\"" + checksum + "\",\"sourceIp\":\"" + sourceIp + "\",\"captchaProvider\":\"proofofwork\",\"version\":4}],\"layoutName\":\"" + lastLayoutName + "\",\"customUrlParams\":\"t_locale%3Den-US\",\"targetUrl\":\"\",\"Referrer\":\"\"}";
                                queueSession.Payload = postData;

                                queueSession._IfJSOn = true;

                                queueSession.HTMLWeb.Referrer = this.Ticket.URL;
                                str = queueSession.Post("https://shop.axs.com/spa-api/queue/axs/" + exeventID + "/enqueue?cid=en-US");

                                queueSession._IfJSOn = false;

                                if (!String.IsNullOrEmpty(str))
                                {
                                    JObject queue = JObject.Parse(str);
                                    if (queue != null)
                                    {
                                        if (queue.Property("queueId") != null)
                                        {
                                            queueID = queue["queueId"].ToString();

                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
            }

            return flag;
        }

        private JWTTokenMessage getNextCaptchaService()
        {
            JWTTokenMessage msg = new JWTTokenMessage();

            try
            {
                #region selectCaptchaservice
                if (String.IsNullOrEmpty(PrevServiceName))
                {
                    getService(msg);
                }
                else
                {
                    if (this.Ticket.AutoCaptchaServices.ifDBCAutoCaptcha && !PrevServiceName.Contains("DBC"))
                    {
                        msg.Username = this.Ticket.AutoCaptchaServices.DBCUserName;
                        msg.Password = this.Ticket.AutoCaptchaServices.DBCPassword;
                        msg.ServiceName = "DBC";
                    }
                    else if (this.Ticket.AutoCaptchaServices.if2CAutoCaptcha && !PrevServiceName.Contains("2C"))
                    {
                        msg.Key = this.Ticket.AutoCaptchaServices.C2Key;
                        msg.ServiceName = "2C";
                    }
                    else if (this.Ticket.AutoCaptchaServices.ifAntigate && !PrevServiceName.Contains("A"))
                    {
                        msg.Key = this.Ticket.AutoCaptchaServices.AntigateKey;
                        msg.ServiceName = "A";
                    }
                    else if (this.Ticket.AutoCaptchaServices.ifRDCAutoCaptcha && !PrevServiceName.Contains("RDC"))
                    {
                        msg.Username = this.Ticket.AutoCaptchaServices.RDCUserName;
                        msg.Password = this.Ticket.AutoCaptchaServices.RDCPassword;
                        msg.ServiceName = "RDC";
                    }


                    if (String.IsNullOrEmpty(msg.ServiceName))
                    {
                        PrevServiceName = String.Empty;
                        getService(msg);
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return msg;
        }

        private void getService(JWTTokenMessage msg)
        {
            try
            {
                if (this.Ticket.AutoCaptchaServices.ifDBCAutoCaptcha)
                {
                    msg.Username = this.Ticket.AutoCaptchaServices.DBCUserName;
                    msg.Password = this.Ticket.AutoCaptchaServices.DBCPassword;
                    msg.ServiceName = "DBC";
                }
                else if (this.Ticket.AutoCaptchaServices.if2CAutoCaptcha)
                {
                    msg.Key = this.Ticket.AutoCaptchaServices.C2Key;
                    msg.ServiceName = "2C";
                }
                else if (this.Ticket.AutoCaptchaServices.ifAntigate)
                {
                    msg.Key = this.Ticket.AutoCaptchaServices.AntigateKey;
                    msg.ServiceName = "A";
                }
                else if (this.Ticket.AutoCaptchaServices.ifRDCAutoCaptcha)
                {
                    msg.Username = this.Ticket.AutoCaptchaServices.RDCUserName;
                    msg.Password = this.Ticket.AutoCaptchaServices.RDCPassword;
                    msg.ServiceName = "RDC";
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }

        private string ParseHtml(string html)
        {
            string json = string.Empty;

            try
            {
                int startindex = html.IndexOf("countdownFinishedText") - 2;

                int endIndex = html.IndexOf("DocumentTitle\":\"Queue-it\"");

                html = html.Replace(html.Substring(startindex, endIndex - startindex), "null");

                json = html.Replace("DocumentTitle\":\"Queue-it\"}", "");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }

            return json;
        }

        private string ExtractLastLayoutVersion(string html)
        {
            string version = string.Empty;

            try
            {
                Match match = Regex.Match(html, "layoutVersion:(.*?),");
                if (match.Success)
                {
                    version = match.Value.Replace("layoutVersion:", String.Empty).Replace(",", String.Empty);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }


            try
            {
                if (String.IsNullOrEmpty(version))
                {
                    try
                    {
                        version = html.Substring(html.IndexOf("lastLayoutVersion") + 19, (html.IndexOf("lastLayoutName") - 4) - (html.IndexOf("lastLayoutVersion") + 17));
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                    }

                    if (String.IsNullOrEmpty(version))
                    {
                        try
                        {
                            version = html.Substring(html.IndexOf("layoutVersion") + 15, (html.IndexOf("messageFeed") - 7) - (html.IndexOf("layoutVersion") + 20));
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                        }
                    }

                    if (String.IsNullOrEmpty(version))
                    {
                        try
                        {
                            version = html.Substring(html.IndexOf("layoutVersion") + 15, (html.IndexOf("updateInterval") - 4) - (html.IndexOf("layoutVersion") + 13));
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }

            return version;
        }

        private string ExtractLastLayoutName(string html)
        {
            string version = string.Empty;

            try
            {
                Match match = Regex.Match(html, "layout:(.*?),");
                if (match.Success)
                {
                    version = match.Value.Replace("layout:", String.Empty).Replace(",", String.Empty).Replace("'", String.Empty);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }


            if (String.IsNullOrEmpty(version))
            {
                try
                {
                    version = html.Substring(html.IndexOf("lastLayoutName") + 17, (html.IndexOf("\"},\"texts\":{\"header\":") - (html.IndexOf("lastLayoutName") + 17)));
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                }

                if (String.IsNullOrEmpty(version))
                {
                    try
                    {
                        version = html.Substring(html.IndexOf("layout:") + 9, (html.IndexOf("layoutVersion") - (html.IndexOf("layout:") + 21)));

                    }
                    catch (Exception ex)
                    {

                    }
                }

                if (String.IsNullOrEmpty(version))
                {
                    try
                    {
                        version = html.Substring(html.IndexOf("layoutName") + 13, (html.IndexOf("layoutVersion") - (html.IndexOf("layoutName") + 16)));

                    }
                    catch (Exception ex)
                    {

                    }
                }

            }

            return version;
        }

        private string ExtractEventId(string html)
        {
            String result = string.Empty;

            try
            {
                Match match = Regex.Match(html, "eventId:(.*?),");
                if (match.Success)
                {
                    result = match.Value.Replace("eventId:", String.Empty).Replace(",", String.Empty).Replace("'", String.Empty);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            if (String.IsNullOrEmpty(result))
            {
                try
                {
                    result = html.Substring(html.IndexOf("data-queueit-tag-eventid") + 26, 18).Replace("\"", "-").Split('-')[0].Trim();
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                }
            }

            return result;
        }

        protected Boolean processTixFirstPage()
        {
            MultiEvents = new List<MultiEvent>();

            Boolean result = false;
            String strHTML = String.Empty;

            try
            {
                if (this._CurrentParameter == null)
                {
                    _CurrentParameter = this.getNextParameter();
                }
                if (this._CurrentParameter != null)
                {
                    this.MoreInfo = "Searching quantity:" + this._CurrentParameter.Quantity;
                    changeStatus(TicketSearchStatus.SearchingStatus);
                }
                if (this._CurrentParameter.LowestPrice)
                {
                    this.MoreInfo += ", lowest Price";
                }

                if (this._CurrentParameter.TopPrice)
                {
                    this.MoreInfo += ", Top Price";
                }

                try
                {
                    if (this.Ticket.URL.Contains("?tags="))
                    {
                        this.Ticket.URL = this.Ticket.URL.Split(new string[] { "?tags=" }, StringSplitOptions.None)[0];
                    }
                }
                catch (Exception ex)
                {
                    try
                    {
                        Debug.WriteLine(ex.Message + " - " + ex.StackTrace);
                    }
                    catch (Exception xe)
                    {
                        Debug.WriteLine(xe.Message + Environment.NewLine + xe.StackTrace);
                    }
                }


                if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                {
                    this.MoreInfo = "Sorry! Event Not Supported..";
                    Thread.Sleep(300);
                    return false;
                }

                //Switch to next parameter if max bought exceeds
                if (this._CurrentParameter != null)
                {
                    if (this._CurrentParameter.MaxBought != null)
                    {
                        if (this._CurrentParameter.Bought >= this._CurrentParameter.MaxBought && this._CurrentParameter.MaxBought > 0)
                        {
                            this._CurrentParameter = null;
                            return false;
                        }
                    }
                }
                else
                {
                    // Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, logMessages.ErrorLogCurrentParameter + new System.Diagnostics.StackTrace(true).GetFrame(0).GetMethod().ToString() + new System.Diagnostics.StackTrace(true).GetFrame(0).GetFileLineNumber()));
                }
                this.doc = new HtmlAgilityPack.HtmlDocument();
                // doc.LoadHtml(this.post(this, "http://www3.o2priority.co.uk/", "MPN=07747606728&Password=password1"));
                if (this._CurrentParameter != null)
                {

                    this.MoreInfo = "Web, " + "Searching quantity:" + this._CurrentParameter.Quantity;

                    if (this._CurrentParameter.GetResaleTix)
                    {
                        this.MoreInfo += ", Resale Tix";
                    }

                    if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                    {
                        this.MoreInfo += ", price:" + this._CurrentParameter.PriceMin.ToString() + " - " + this._CurrentParameter.PriceMax.ToString();
                    }
                    if (!String.IsNullOrEmpty(this._CurrentParameter.PriceLevelString))
                    {
                        this.MoreInfo += ", ticket type:" + this._CurrentParameter.PriceLevelString;
                    }
                    if (!String.IsNullOrEmpty(this._CurrentParameter.TicketTypePasssword))
                    {
                        this.MoreInfo += ", password:" + this._CurrentParameter.TicketTypePasssword;
                    }
                    if (this._CurrentParameter.LowestPrice)
                    {
                        this.MoreInfo += ", lowest Price";
                    }

                    if (this._CurrentParameter.TopPrice)
                    {
                        this.MoreInfo += ", Top Price";
                    }
                }
                changeStatus(TicketSearchStatus.SearchingStatus);

                if (!string.IsNullOrEmpty(this.TemporaryURL))
                {
                    String strURl = this.TemporaryURL;
                }
                else
                {
                    String strURL = this.Ticket.URL;
                }

                if (this.Ticket.ifPesistSessionInEachSearch)
                {
                    if (this._proxy == null && this.Ticket.ifUseProxies && this.IfUseProxy)
                    {
                        if (this.IfWorking)
                        {
                            //_proxy = ProxyPicker.ProxyPickerInstance.getNextProxy(this);
                        }
                        else
                        {
                            this.MoreInfo = "";
                        }
                        if (_proxy == null)
                        {
                            //   _proxy = getLuminatiProxy();
                        }
                    }
                    Thread.Sleep(1000);
                    this.doc = new HtmlAgilityPack.HtmlDocument();
                }
                else
                {
                    //this._proxy = null;
                    //Proxy
                    if (this.Ticket.ifUseProxies && this.IfUseProxy)
                    {
                        if (this.IfWorking)
                        {
                            //_proxy = ProxyPicker.ProxyPickerInstance.getNextProxy(this);
                        }
                        else
                        {
                            this.MoreInfo = "";
                        }
                        if (_proxy == null)
                        {
                            // _proxy = getLuminatiProxy();
                        }
                    }

                    this.doc = new HtmlAgilityPack.HtmlDocument();
                }

                changeStatus(TicketSearchStatus.SearchingStatus);

                if (this.Ticket.onStartSearching != null)
                {
                    this.Ticket.onStartSearching(this.Ticket);
                }

                this._selectedAccountForAutoBuy = null;

                if (this.Ticket.URL.Contains("/shop/") || this.Ticket.URL.Contains("/#/"))
                {
                    this.isJSON = true;
                }

                this._session = new BrowserSession();

                if(!string.IsNullOrEmpty(this.cfclearance))
                   // this._session.StrCookies = this.cfclearance;


                //Proxy
                if (_proxy != null)
                {
                    if (_proxy.TheProxyType == Core.Proxy.ProxyType.Luminati || _proxy.TheProxyType == Core.Proxy.ProxyType.Relay)
                    {
                        if (String.IsNullOrEmpty(_proxy.LuminatiSessionId))
                        {
                            _proxy.generateLuminatiSessionId();
                        }
                    }

                    if (_proxy.IfLuminatiProxy)
                    {
                        this._session.luminatiSessionId = _proxy.LuminatiSessionId;
                    }

                    this._session.Proxy = _proxy.toWebProxy(context);
                }
                else
                {
                    if ((this.Ticket.ifUseProxies && this.IfUseProxy) && (GoodProxies._goodProxyList.Distinct().ToList().Count > 0))
                    {
                        _proxy = GoodProxies.getFoundProxy();
                        if (_proxy == null)
                            _proxy = GoodProxies.getProxy();
                        if (_proxy != null)
                        {
                            if (_proxy.TheProxyType == Proxy.ProxyType.MyIP || _proxy.TheProxyType == Core.Proxy.ProxyType.Luminati)
                            {
                                this._session.luminatiSessionId = _proxy.LuminatiSessionId;
                            }

                            _proxy.ProxySortOrder = Proxy.ProxyPriority.Use;
                            this._session.Proxy = _proxy.toWebProxy(context);
                        }
                    }
                }

                if (this.IfWorking && this.Ticket.isRunning)
                {
                    if (ProxyPicker.ProxyPickerInstance.ifSearchAllowed(this))
                    {
                        String strURl = string.Empty;

                        if (!string.IsNullOrEmpty(this.TemporaryURL))
                        {
                             strURL = this.TemporaryURL;
                        }
                        else
                        {
                            strURL = this.Ticket.URL;
                        }

                        //this._session.HTMLWeb = new HtmlWeb();

                        //this._session.HTMLWeb.IfAllowAutoRedirect = false;

                        String html = this._session.Get(strURL);

                        /*************************************
                        /*************************************
                         ** thats where distill appears on  **
                         ** sale time.                      **
                         *************************************
                         *************************************/

                        HtmlNode NodeBlock = this._session.HtmlDocument.DocumentNode.SelectSingleNode("//div[@id='distil_ident_block']");
                        if (NodeBlock != null)
                        {
                            //this.Distil_Indent_Block();
                            //strHTML = this._session.Get(strURL);
                            Distill.checkForDistilIdentificationBlock(this.Session, this.Ticket.AutoCaptchaServices, this.Ticket, this);
                        }
                        else
                        {
                            NodeBlock = this._session.HtmlDocument.DocumentNode.SelectSingleNode("//div[@id='distilIdentificationBlock']");
                            if (NodeBlock != null)
                            {
                                Distill.checkForDistilIdentificationBlock(this.Session, this.Ticket.AutoCaptchaServices, this.Ticket, this);
                            }
                        }

                        if (html.Contains("hcaptcha"))
                        {
                            #region Need To solve hcaptcha
                            this.RecapToken = String.Empty;
                            this.RecapToken = GetRecaptchaTokenV1(true);

                            if (!string.IsNullOrEmpty(this.RecapToken))
                            {
                                SolveHCaptcha(this.Session.LastURL, this.Session, this.RecapToken);
                            }
                           
                            #endregion
                        }
                     

                        if (!String.IsNullOrEmpty(this._session.RedirectLocation))
                        {
                            html = this._session.Get(this._session.RedirectLocation);
                        }


                        //HtmlNodeCollection scripts = this._session.HtmlDocument.DocumentNode.SelectNodes("//script");
                        //List<HtmlNode> nodes = scripts.Where(s => s.InnerText.Contains("defer")).ToList();

                        //foreach (HtmlNode item in scripts)
                        //{
                        //    try
                        //    {

                        //        string value = item.Attributes["src"].Value;
                        //        if (!String.IsNullOrEmpty(value))
                        //        {
                        //            if (item.OuterHtml.Contains("defer"))
                        //            {
                        //                Distill.checkForDistillIdentificationBlock(this.Session, this.Ticket.AutoCaptchaServices, this.Ticket, value, this);
                        //                break;
                        //            }
                        //        }
                        //    }
                        //    catch { }
                        //}

                        if (!this.IfWorking || !this.Ticket.isRunning)
                        {
                            return false;
                        }

                        this.strURL = this._session.LastURL;

                        Uri url = new Uri(this.strURL);

                        this.OnSaleUrl = url.Segments[1].TrimEnd('/');

                        #region Extract js for Access_token

                        //Task.Delay(3000).Wait();

                        // changeStatus("JS STARTS.");
                        getAccessToken(url);
                        // changeStatus("JS ENDS HERE.");

                        // Task.Delay(3000).Wait();
                        #endregion

                        #region presale
                        _presaleSearch = new Presale(this);

                        if (_presaleSearch.startPresale())
                        {
                            try
                            {
                                this._isPresale = true;
                            }
                            catch
                            {
                            }
                        }
                        else
                        {

                            if (!this._presaleSearch.ifAvailable)
                            {
                                return false;
                            }
                            else
                                this._isPresale = false;
                        }
                        #endregion

                        if (String.IsNullOrEmpty(RecapToken) && (Recaptcha.ToLower().Contains("true")))
                        {
                            return false;
                        }

                        // if (String.IsNullOrEmpty(this.SessionKey))
                        //{
                        //this.SessionKey = createTixSessionKey();
                        //}
                        //if (this.Ticket.URL.Contains("shop.axs.co.uk") || this.Ticket.URL.Contains("q.axs.co.uk"))
                        if (this.Ticket.IsUkEvent)
                        {
                            this.SessionKey = createTixSessionKey();
                        }
                        else
                        {
                            createTixSessionKey();
                        }


                        if (String.IsNullOrEmpty(this.SessionKey))
                        {
                            return false;
                        }

                        //{
                        this.Sections = new List<AXSSection>();

                        //if (this._tmEvent == null || this._tmEvent.Sections.Count == 0)
                        // {
                        this._tmEvent = new AXSEvent(this.doc, (AXSSearch)this);
                        //}

                        if (!this._tmEvent.IfTicketAlive)
                        {
                            return false;
                        }
                        lock (this.Ticket)
                        {
                            this.Ticket.RunCount++;
                        }

                        changeStatus(TicketSearchStatus.FirstPageStatus);

                        Boolean mapAvailable = false;

                        mapAvailable = mapParameterIfAvaiableTix(_CurrentParameter);

                        if (mapAvailable)
                        {
                            if ((_proxy != null) && (!GoodProxies._goodProxyList.Contains(_proxy)))
                            {
                                _proxy.ProxySortOrder = Proxy.ProxyPriority.FirstPage;
                                GoodProxies._goodProxyList.Add(_proxy);
                            }

                            _CurrentParameter.IfAvailable = true;
                            result = true;
                        }
                        else
                        {
                            result = false;
                            if (this.Ticket.ifUseFoundOnFirstAttempt || this.Ticket.ifUseAvailableParameters)
                            {
                                this.MoreInfo = TicketSearchStatus.MoreInfoParamterNotMatch;
                                _CurrentParameter = null;
                            }
                            this.SessionKey = String.Empty;
                        }
                        // }
                    }
                    else
                    {
                        this.MoreInfo = "";//TicketSearchStatus.MoreInfoProxyNotAvaiable;
                        result = false;
                    }
                }
            }
            catch (Exception ex)
            {
                result = false;
                if (!ProxyPicker.ProxyPickerInstance.RecheckProxyStatus(this.Proxy, ex.Message))
                {
                    // Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
                }
            }
            return result;
        }

        public async void getAccessToken(Uri url)
        {
            try
            {
                await GetToken(url);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }

        public String version = "1.13.5";

        public async Task<Boolean> GetToken(Uri url)
        {
            Boolean flag = false;

            try
            {
                BrowserSession clone = (BrowserSession)Session.Clone();
                int retrycount = 0;

                HtmlNode js = this._session.HtmlDocument.DocumentNode.SelectSingleNode("//script[contains(@src,'bundle_')]");

                while (string.IsNullOrEmpty(this.AccessToken) && retrycount < 2)
                {
                    try
                    {
                        if (this.IfWorking && this.Ticket.isRunning)
                        {
                            String responseStr = String.Empty;

                            if (js != null)
                            {
                                if (url.Host.Contains("shop.axs.co.uk") || url.Host.Contains("q.axs.co.uk") || url.Host.Contains("tix.axs.com"))
                                {
                                    version = js.Attributes["src"].Value.Replace("/js/bundle_", String.Empty).Replace(".js", String.Empty);

                                    responseStr = clone.Get("https://" + url.Host + js.Attributes["src"].Value);

                                    //  responseStr = this.wc.Get("https://" + url.Host + js.Attributes["src"].Value);
                                }
                                else
                                {
                                    responseStr = clone.Get("https://" + url.Host + js.Attributes["src"].Value);
                                }
                            }
                            else
                            {
                                responseStr = clone.Get("https://tix.axs.com/js/bundle_0.9.7.js");
                            }


                            Match match = Regex.Match(responseStr, "\"urlparameters\":{(.*?)},");

                            if (match.Success)
                            {
                                flag = true;

                                responseStr = match.Value.TrimEnd(',');
                                responseStr = responseStr.Replace("\"urlparameters\":", String.Empty);

                                try
                                {
                                    JObject obj = JObject.Parse(responseStr);
                                    this.AccessToken = obj["access_token"].ToString();
                                }
                                catch (Exception ex)
                                {
                                    Debug.WriteLine(ex.Message);
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                    }

                    retrycount++;
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return flag;
        }

        public Boolean processCaptchaPage()
        {


            String captchakey = "6LexTBoTAAAAAESv_PtNKgDQM7ZP9KOKedZUbYay";
            Uri site = new Uri(this.Ticket.URL);
            Boolean result = false;
            //this.Captcha = new Captcha(null);
            //solveAutoCaptcha = new ReCaptcha2C(this.Ticket.AutoCaptchaServices, this.Captcha, captchakey, site.Host);
            //solveAutoCaptcha.solve();
            //this.RecapToken = this.Captcha.CaptchaWords;
            //return true;
            //this.Ticket.ifCapsium = false;
            if (this.Ticket.URL.Contains("/shop.axs.co.uk/"))
            {
                JObject KeyParser = JObject.Parse(Session.HtmlDocument.DocumentNode.InnerText);

                try
                {
                    if (KeyParser != null)
                    {
                        captchakey = KeyParser["recaptcha"]["siteKey"].ToString();
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                }
            }

            if (this.isEventko)
            {
                captchakey = "6LcxLC4UAAAAALApc8RfaPkUJ-YEtnapN5xAnZ37";
            }

            if ((this.Ticket.ifCapsium) && (this.Ticket.ifAutoCaptcha && this.IfUseAutoCaptcha))
            {
                TokenBucket tb = null;
                int captchaPollRetry = 0;

                do
                {
                    try
                    {
                        if (this.IfWorking && this.Ticket.isRunning)
                        {
                            changeStatus(TicketSearchStatus.ResolvingCaptchaStatus);
                        }

                        if (this.isEventko)
                        {
                            tb = this.getRecapToken("EVENKO");
                        }
                        else if (this.Ticket.IsUkEvent)//if (this.Ticket.URL.Contains("shop.axs.co.uk") || this.Ticket.URL.Contains("q.axs.co.uk"))
                        {
                            tb = this.getRecapToken("axsUK");
                        }
                        else
                        {
                            tb = this.getRecapToken("axsWEB");
                        }

                        captchaPollRetry++;

                        if ((tb != null) && (!String.IsNullOrEmpty(tb.Recaptoken) && (String.IsNullOrEmpty(tb.Error))))
                        {
                            if (tb.Recaptoken.Equals("?"))
                            {
                                Thread.Sleep(2500);
                                continue;
                            }

                            this.RecapToken = tb.Recaptoken;
                            result = true;
                            break;
                        }

                        changeStatus(TicketSearchStatus.CaptchaPollStatus);
                        Thread.Sleep(2500);
                    }
                    catch (Exception ex)
                    {
                        try
                        {
                            Debug.WriteLine(ex.Message + " - " + ex.StackTrace);
                        }
                        catch (Exception xe)
                        {
                            Debug.WriteLine(xe.Message + Environment.NewLine + xe.StackTrace);
                        }
                    }

                } while (captchaPollRetry < 60 && this.IfWorking);

                if (this.IfWorking && this.Ticket.isRunning)
                {
                    changeStatus(TicketSearchStatus.CaptchaResolvedStatus);
                }
            }
            else
            {

                NetworkStream stream = null;
                String strHTML = String.Empty;
                int nullCaptchaImageRetry = 0;
                int emptyCaptchaAnswerRetry = 0;
                Boolean ifCaptchaFailed = false;
                int retryCnt = 0;

                try
                {
                    changeStatus(TicketSearchStatus.CaptchaPageStatus);

                    do
                    {
                        RecaptchaV2Key = "6Lejv2AUAAAAAC2ga_dkzgFadQvGnUbuJW_FgsvC";

                        if (this.Ticket.ifAutoCaptcha && this.IfUseAutoCaptcha)
                        {
                            #region For getting images from Server

                            #region For images from server (fallback and i am robot)

                            JWTTokenMessage msg = new JWTTokenMessage();

                            msg.Site = site.Host;

                            if (this.Ticket.ifDBCAutoCaptcha)
                            {
                                msg.Username = this.Ticket.AutoCaptchaServices.DBCUserName;
                                msg.Password = this.Ticket.AutoCaptchaServices.DBCPassword;
                                msg.ServiceName = "DBC";
                                //  solveAutoCaptcha = new DeathByCaptchaAPI(this.Ticket.AutoCaptchaServices, this.Captcha);
                            }
                            else if (this.Ticket.ifRDAutoCaptcha)
                            {
                                msg.Username = this.Ticket.AutoCaptchaServices.RDUserName;
                                msg.Password = this.Ticket.AutoCaptchaServices.RDPassword;
                                msg.ServiceName = "RD";
                                //solveAutoCaptcha = new RDCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
                            }
                            else if (this.Ticket.ifCPTAutoCaptcha)
                            {
                                msg.Username = this.Ticket.AutoCaptchaServices.CPTUserName;
                                msg.Password = this.Ticket.AutoCaptchaServices.CPTPassword;
                                msg.ServiceName = "CPT";
                                //solveAutoCaptcha = new CPTCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
                            }
                            else if (this.Ticket.ifDCAutoCaptcha)
                            {
                                msg.Username = this.Ticket.AutoCaptchaServices.DCUserName;
                                msg.Password = this.Ticket.AutoCaptchaServices.DCPassword;
                                msg.Port = this.Ticket.AutoCaptchaServices.DCPort;
                                msg.ServiceName = "DC";
                                //solveAutoCaptcha = new DeCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
                            }
                            else if (this.Ticket.ifOCR)
                            {
                                msg.Host = this.Ticket.AutoCaptchaServices.OCRIP;
                                msg.Port = this.Ticket.AutoCaptchaServices.OCRPort;
                                msg.ServiceName = "OCR";
                                //solveAutoCaptcha = new OCRService(this.Ticket.AutoCaptchaServices, this.Captcha);
                            }
                            else if (this.Ticket.ifCAutoCaptcha)
                            {
                                msg.Host = this.Ticket.AutoCaptchaServices.CHost;
                                msg.Port = this.Ticket.AutoCaptchaServices.CPort;
                                msg.Username = this.Ticket.AutoCaptchaServices.CUserName;
                                msg.Password = this.Ticket.AutoCaptchaServices.CPassword;
                                msg.ServiceName = "C";
                                //solveAutoCaptcha = new CustomCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha);
                            }
                            else if (this.Ticket.ifROCR)
                            {
                                msg.Ip = this.Ticket.AutoCaptchaServices.ROCRIP;
                                msg.Port = this.Ticket.AutoCaptchaServices.ROCRPort;
                                msg.Username = this.Ticket.AutoCaptchaServices.ROCRUsername;
                                msg.Password = this.Ticket.AutoCaptchaServices.ROCRPassword;
                                msg.ServiceName = "ROCR";
                                //solveAutoCaptcha = new ROCRService(this.Ticket.AutoCaptchaServices, this.Captcha);
                            }
                            else if (this.Ticket.ifBoloOCR)
                            {
                                msg.Ip = this.Ticket.AutoCaptchaServices.BOLOIP;
                                msg.Port = this.Ticket.AutoCaptchaServices.BOLOPORT;
                                msg.ServiceName = "BOLO";
                                //solveAutoCaptcha = new BoloCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha);
                            }
                            else if (this.Ticket.ifSOCR)
                            {
                                msg.Ip = this.Ticket.AutoCaptchaServices.SOCRIP;
                                msg.Port = this.Ticket.AutoCaptchaServices.SOCRPort;
                                msg.Username = this.Ticket.AutoCaptchaServices.SOCRCaptchaURL;

                                msg.ServiceName = "SOCR";
                                //solveAutoCaptcha = new SOCRService(this.Ticket.AutoCaptchaServices, this.Captcha);
                            }
                            else if (this.Ticket.if2C)
                            {
                                Debug.WriteLine("2C selected");
                                //Captcha = new Captcha(null);
                                msg.Key = this.Ticket.AutoCaptchaServices.C2Key;
                                msg.ServiceName = "2C";
                                //solveAutoCaptcha = new ReCaptcha2C(this.Ticket.AutoCaptchaServices, Captcha, RecaptchaV2Key, site.Host);
                                //solveAutoCaptcha.solve();
                                //this.RecapToken = Captcha.CaptchaWords;
                                //Debug.WriteLine("Recap:" + this.RecapToken);
                            }
                            else if (this.Ticket.ifAntigateAutoCaptcha)
                            {
                                msg.Key = this.Ticket.AutoCaptchaServices.AntigateKey;
                                msg.ServiceName = "A";
                                //solveAutoCaptcha = new AntigateCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
                            }
                            else if (this.Ticket.ifAC1AutoCaptcha)
                            {
                                msg.Key = ServerPortsPicker.ServerPortsPickerInstance.AC1Credential;// this.Ticket.AutoCaptchaServices.AC1Key;
                                msg.ServiceName = "AC1";
                                msg.Audio = true;
                                //solveAutoCaptcha = new AntigateCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
                            }
                            else if (this.Ticket.ifRDCAutoCaptcha)
                            {
                                msg.Username = this.Ticket.AutoCaptchaServices.RDCUserName;
                                msg.Password = this.Ticket.AutoCaptchaServices.RDCPassword;
                                msg.ServiceName = "RDC";
                                //solveAutoCaptcha = new AntigateCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
                            }
                            else
                            {
                                // By Default use bypass auto captcha
                                msg.Key = this.Ticket.AutoCaptchaServices.AntigateKey;
                                msg.ServiceName = "BPC";
                            }

                            if (this.IfWorking && this.Ticket.isRunning)
                            {
                                changeStatus(TicketSearchStatus.ResolvingCaptchaStatus);
                            }

                            Capsium capsium = null;

                            if (this.Ticket.ifCaptchator)
                            {
                                if (Interlocked.Read(ref Captchator.CaptchatorInstance.CaptchatorWorkers) > Interlocked.Read(ref Captchator.CaptchatorInstance.Requested))
                                {
                                    _ifCaptchaWaiting = true;

                                    Interlocked.Increment(ref  Captchator.CaptchatorInstance.Requested);

                                    Captchator.CaptchatorInstance.getRecapToken(RecaptchaV2Key);

                                    if (Interlocked.Read(ref Captchator.CaptchatorInstance.Requested) > 0)
                                    {
                                        Interlocked.Decrement(ref Captchator.CaptchatorInstance.Requested);
                                    }

                                    int retry = 0;
                                    int maxretries = 30;

                                    while (retry < maxretries)  // wait for 30 seconds
                                    {
                                        this.RecapToken = Captchator.CaptchatorInstance.getCaptchatorToken();

                                        if (!String.IsNullOrEmpty(this.RecapToken))
                                        {
                                            this.MoreInfo = string.Empty;
                                            break;
                                        }

                                        Thread.Sleep(1000);
                                        _ifCaptchaWaiting = false;
                                        this.MoreInfo = "Captcha Retry: " + retry;
                                        retry++;

                                        if (!this.IfWorking || !this.Ticket.isRunning)
                                        {
                                            return false;
                                        }
                                    }
                                }

                                if (String.IsNullOrEmpty(this.RecapToken))
                                {
                                    this.MoreInfo = String.Empty;
                                    return false;
                                }
                            }
                            else
                            {
                                if (String.IsNullOrEmpty(this.RecapToken))
                                {
                                    if (Interlocked.Read(ref ServerPortsPicker.ServerPortsPickerInstance.LoadBalancerWorkers) > Interlocked.Read(ref ServerPortsPicker.ServerPortsPickerInstance.Requested))
                                    {
                                        _ifCaptchaWaiting = true;
                                        Interlocked.Increment(ref ServerPortsPicker.ServerPortsPickerInstance.Requested);

                                        if (!msg.ServiceName.Equals("2C") && !msg.ServiceName.Equals("A") && !msg.ServiceName.Equals("RDC") && !msg.ServiceName.Equals("DBC"))
                                        {
                                            return false;
                                        }
                                        else if (msg.ServiceName.Equals("2C"))
                                        {
                                            String recapaptchaToken = new RecaptchaTokenApi2C().GetRecaptchaToken(msg.Key, RecaptchaV2Key, msg.Site);
                                            capsium = new Capsium();
                                            capsium.RecapToken = recapaptchaToken.ToString();
                                            capsium.FallBack = true;
                                        }
                                        else if (msg.ServiceName.Equals("RDC"))
                                        {
                                            String recapaptchaToken = new RecaptchaTokenRDC().GetRecaptchaToken(msg.Username, msg.Password, RecaptchaV2Key, msg.Site, String.Empty, String.Empty);
                                            capsium = new Capsium();
                                            capsium.RecapToken = recapaptchaToken.ToString();
                                            capsium.FallBack = true;

                                        }
                                        else if (msg.ServiceName.Equals("A"))
                                        {
                                            capsium = new Capsium();
                                            capsium.RecapToken = new RecaptchaTokenApiAntigate().GetRecaptchaTokenProxyLess(msg.Key, RecaptchaV2Key, msg.Site);
                                            capsium.FallBack = true;
                                            capsium.ExpireTime = DateTime.Now.AddMinutes(2);
                                        }
                                        else if (msg.ServiceName.Equals("DBC"))
                                        {
                                            capsium = new Capsium();

                                            //capsium.RecapToken = new RecaptchaTokenApiDBC().GetRecaptchaToken("reedeee3", "raheel56", "6LexTBoTAAAAAESv_PtNKgDQM7ZP9KOKedZUbYay", "tix.axs.com", "", "");
                                            capsium.RecapToken = new RecaptchaTokenApiDBC().GetRecaptchaToken(msg.Username, msg.Password, RecaptchaV2Key, msg.Site, "", "");
                                            capsium.FallBack = true;
                                            capsium.ExpireTime = DateTime.Now.AddMinutes(2);
                                        }

                                        if (Interlocked.Read(ref ServerPortsPicker.ServerPortsPickerInstance.Requested) > 0)
                                        {
                                            Interlocked.Decrement(ref ServerPortsPicker.ServerPortsPickerInstance.Requested);
                                        }
                                    }

                                    if (this.IfWorking && this.Ticket.isRunning)
                                    {
                                        changeStatus(TicketSearchStatus.CaptchaResolvedStatus);
                                    }

                                    if ((capsium == null) || (!String.IsNullOrEmpty(capsium.ErrorMsg)))
                                    {
                                        nullCaptchaImageRetry++;
                                        Thread.Sleep(3000);
                                        if (nullCaptchaImageRetry >= 15)
                                        {
                                            this.MoreInfo = String.Empty;
                                            break;
                                        }
                                        ifCaptchaFailed = true;
                                        this.MoreInfo = "Captcha Retry: " + nullCaptchaImageRetry;
                                        continue;
                                    }

                                    nullCaptchaImageRetry = 0;

                                    _ifCaptchaWaiting = false;

                            #endregion

                                    if (!capsium.FallBack && capsium.Image != null)
                                    {
                                        this.Captcha = new Captcha(capsium.Image);

                                        if (!this.IfWorking || !this.Ticket.isRunning)
                                        {
                                            return false;
                                        }

                            #endregion

                                        if ((this.Captcha.CaptchesBytes == null || this.Captcha.CaptchaImage == null) && nullCaptchaImageRetry < 5)
                                        {
                                            nullCaptchaImageRetry++;
                                            continue;
                                        }
                                        else if ((this.Captcha.CaptchesBytes == null || this.Captcha.CaptchaImage == null) && nullCaptchaImageRetry >= 5)
                                        {
                                            break;
                                        }

                                        if (!this.IfWorking || !this.Ticket.isRunning)
                                        {
                                            return false;
                                        }

                                        this.Captcha.CValue = capsium.CValue;
                                        this.Captcha.CaptchesBytes = capsium.Image;

                                        string name = string.Empty;

                                        if (capsium.RecaptchaJS != null)
                                        {
                                            name = ImageBank.SelectImagefromBank(capsium.RecapToken, capsium.RecaptchaJS, this.Proxy);
                                        }

                                        if (string.IsNullOrEmpty(name) || name.Contains("/m"))
                                        {
                                            name = ImageBank.SelectImagefromBank(capsium.RecapToken);
                                        }

                                        this.Captcha.Question = name;
                                        this.Captcha.ImageUrl = (!String.IsNullOrEmpty(name)) ? name : capsium.RecapToken;

                                        if (this.IfWorking && this.Ticket.isRunning)
                                        {
                                            changeStatus(TicketSearchStatus.ResolvingCaptchaStatus);
                                        }

                                        if (this.Ticket.ifDBCAutoCaptcha)
                                        {
                                            Bitmap dummyImage;
                                            this.Captcha.CaptchesBytes = ImageMerger.ImageMergerInstance.getMergeImage(this.Captcha.CaptchesBytes, this.Captcha.ImageUrl, out dummyImage);
                                            this.Captcha.CaptchaImage = dummyImage;
                                            solveAutoCaptcha = new DeathByCaptchaAPI(this.Ticket.AutoCaptchaServices, this.Captcha);
                                        }
                                        else if (this.Ticket.ifRDAutoCaptcha)
                                        {
                                            Bitmap dummyImage;
                                            this.Captcha.CaptchesBytes = ImageMerger.ImageMergerInstance.getMergeImage(this.Captcha.CaptchesBytes, this.Captcha.ImageUrl, out dummyImage);
                                            this.Captcha.CaptchaImage = dummyImage;
                                            solveAutoCaptcha = new RDCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
                                        }
                                        else if (this.Ticket.ifCPTAutoCaptcha)
                                        {
                                            Bitmap dummyImage;
                                            this.Captcha.CaptchesBytes = ImageMerger.ImageMergerInstance.getMergeImage(this.Captcha.CaptchesBytes, this.Captcha.ImageUrl, out dummyImage);
                                            this.Captcha.CaptchaImage = dummyImage;
                                            solveAutoCaptcha = new CPTCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
                                        }
                                        else if (this.Ticket.ifDCAutoCaptcha)
                                        {
                                            //Bitmap dummyImage;
                                            //this.Captcha.CaptchesBytes = ImageMerger.ImageMergerInstance.getMergeImage(this.Captcha.CaptchesBytes, this.Captcha.ImageUrl, out dummyImage);
                                            //this.Captcha.CaptchaImage = dummyImage;
                                            solveAutoCaptcha = new DeCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
                                        }
                                        else if (this.Ticket.ifOCR)
                                        {
                                            Bitmap dummyImage;
                                            this.Captcha.CaptchesBytes = ImageMerger.ImageMergerInstance.getMergeImage(this.Captcha.CaptchesBytes, this.Captcha.ImageUrl, out dummyImage);
                                            this.Captcha.CaptchaImage = dummyImage;
                                            solveAutoCaptcha = new OCRService(this.Ticket.AutoCaptchaServices, this.Captcha);
                                        }
                                        else if (this.Ticket.ifCAutoCaptcha)
                                        {
                                            Bitmap dummyImage;
                                            this.Captcha.CaptchesBytes = ImageMerger.ImageMergerInstance.getMergeImage(this.Captcha.CaptchesBytes, this.Captcha.ImageUrl, out dummyImage);
                                            this.Captcha.CaptchaImage = dummyImage;
                                            solveAutoCaptcha = new CustomCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha);
                                        }
                                        else if (this.Ticket.ifROCR)
                                        {
                                            Bitmap dummyImage;
                                            this.Captcha.CaptchesBytes = ImageMerger.ImageMergerInstance.getMergeImage(this.Captcha.CaptchesBytes, this.Captcha.ImageUrl, out dummyImage);
                                            this.Captcha.CaptchaImage = dummyImage;
                                            solveAutoCaptcha = new ROCRService(this.Ticket.AutoCaptchaServices, this.Captcha);
                                        }
                                        else if (this.Ticket.ifBoloOCR)
                                        {
                                            Bitmap dummyImage;
                                            this.Captcha.CaptchesBytes = ImageMerger.ImageMergerInstance.getMergeImage(this.Captcha.CaptchesBytes, this.Captcha.ImageUrl, out dummyImage);
                                            this.Captcha.CaptchaImage = dummyImage;
                                            solveAutoCaptcha = new BoloCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha);
                                        }
                                        else if (this.Ticket.ifSOCR)
                                        {
                                            Bitmap dummyImage;
                                            this.Captcha.CaptchesBytes = ImageMerger.ImageMergerInstance.getMergeImage(this.Captcha.CaptchesBytes, this.Captcha.ImageUrl, out dummyImage);
                                            this.Captcha.CaptchaImage = dummyImage;
                                            solveAutoCaptcha = new SOCRService(this.Ticket.AutoCaptchaServices, this.Captcha);
                                        }
                                        else if (this.Ticket.if2C)
                                        {
                                            Bitmap dummyImage;
                                            this.Captcha.CaptchesBytes = ImageMerger.ImageMergerInstance.getMergeImage(this.Captcha.CaptchesBytes, this.Captcha.ImageUrl, out dummyImage);
                                            this.Captcha.CaptchaImage = dummyImage;
                                            solveAutoCaptcha = new Captcha2(this.Ticket.AutoCaptchaServices, this.Captcha, true);
                                        }
                                        else if (this.Ticket.ifAntigateAutoCaptcha)
                                        {
                                            solveAutoCaptcha = new AntigateCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
                                        }
                                        else
                                        {
                                            // By Default use bypass auto captcha
                                            Bitmap dummyImage;
                                            this.Captcha.CaptchesBytes = ImageMerger.ImageMergerInstance.getMergeImage(this.Captcha.CaptchesBytes, this.Captcha.ImageUrl, out dummyImage);
                                            this.Captcha.CaptchaImage = dummyImage;
                                            solveAutoCaptcha = new BypassAutoCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
                                        }
                                        if (this.IfWorking && this.Ticket.isRunning && solveAutoCaptcha != null)
                                        {
                                            solveAutoCaptcha.solve();
                                        }
                                        else
                                        {
                                            return false;
                                        }

                                        if (!String.IsNullOrEmpty(solveAutoCaptcha.CaptchaError))
                                        {
                                            //this.MoreInfo = TicketSearchStatus.MoreInfoAutoCaptchaError + solveAutoCaptcha.CaptchaError;
                                        }
                                        else
                                        {
                                            this.MoreInfo = "";
                                            if (this._CurrentParameter != null)
                                            {
                                                this.MoreInfo = "Searching quantity:" + this._CurrentParameter.Quantity;
                                                if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                {
                                                    this.MoreInfo += ", price:" + this._CurrentParameter.PriceMin.ToString() + " - " + this._CurrentParameter.PriceMax.ToString();
                                                }
                                                if (!String.IsNullOrEmpty(this._CurrentParameter.TicketTypePasssword))
                                                {
                                                    this.MoreInfo += ", password:" + this._CurrentParameter.TicketTypePasssword;
                                                }
                                            }
                                        }

                                        if (this.Captcha.CaptchaImage != null)
                                        {
                                            this.Captcha.CaptchaImage.Dispose();
                                            GC.SuppressFinalize(this.Captcha.CaptchaImage);
                                            this.Captcha.CaptchaImage = null;
                                        }

                                        if (!this.IfWorking || !this.Ticket.isRunning)
                                        {
                                            return false;
                                        }

                                        if (String.IsNullOrEmpty(this.Captcha.CaptchaWords.Trim()) && emptyCaptchaAnswerRetry < 3)
                                        {
                                            ifCaptchaFailed = true;
                                            emptyCaptchaAnswerRetry++;
                                            continue;
                                        }
                                        else if (String.IsNullOrEmpty(this.Captcha.CaptchaWords.Trim()) && emptyCaptchaAnswerRetry >= 3)
                                        {
                                            return false;
                                        }

                                        String getPosturl = @"https://www.google.com/recaptcha/api2/userverify?k=" + RecaptchaV2Key;
                                        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(getPosturl);

                                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

                                        request.Headers.Set(HttpRequestHeader.AcceptLanguage, "en-us");
                                        request.UserAgent = capsium.UserAgent;//"Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30";//"Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_1 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D201 Safari/9537.53";
                                        request.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                                        request.Referer = capsium.Referer;
                                        request.ContentType = "application/x-www-form-urlencoded;charset=UTF-8";
                                        request.KeepAlive = true;
                                        request.Headers.Add("DNT", @"1");
                                        request.Headers.Set(HttpRequestHeader.AcceptEncoding, "gzip, deflate");
                                        request.Method = "POST";
                                        request.ServicePoint.Expect100Continue = false;
                                        try { }
                                        catch { }

                                        if (!this.Ticket.ifAntigateAutoCaptcha && !this.Ticket.ifDCAutoCaptcha)
                                        {
                                            this.Captcha.CaptchaWords = commaSeperated(this.Captcha.CaptchaWords);
                                            this.Captcha.CaptchaWords = changeNumbers(this.Captcha.CaptchaWords);
                                        }

                                        this.Captcha.CaptchaWords = this.Captcha.CaptchaWords.TrimEnd(',');
                                        Debug.WriteLine(this.Captcha.CaptchaWords);

                                        String requestBody = capsium.PostBody;
                                        int indexOfResponse = requestBody.IndexOf("response=") + "response=".Length;
                                        int indexOfAmp = requestBody.IndexOf('&', indexOfResponse);

                                        Byte[] captchawords = Encoding.UTF8.GetBytes("{\"response\":\"" + this.Captcha.CaptchaWords + "\"}");
                                        string body = requestBody = requestBody.Insert(indexOfResponse, Convert.ToBase64String(captchawords).Replace("=", "")); //for post words                        
                                        byte[] postBytes = System.Text.Encoding.UTF8.GetBytes(body);
                                        request.ContentLength = postBytes.Length;
                                        request.ContentType = "application/x-www-form-urlencoded;charset=utf-8";
                                        Stream _stream = request.GetRequestStream();
                                        _stream.Write(postBytes, 0, postBytes.Length);
                                        _stream.Close();

                                        HtmlAgilityPack.HtmlDocument h = getResponse(request, out strHTML);

                                        if (strHTML.Contains("uvresp") && !strHTML.Contains("rresp"))
                                        {
                                            string remove = strHTML.Substring(0, strHTML.IndexOf("["));
                                            strHTML = strHTML.Replace(remove, "");

                                            if (!String.IsNullOrEmpty((JArray.Parse(strHTML)[1]).ToString()))
                                            {
                                                this.RecapToken = (JArray.Parse(strHTML)[1]).ToString();

                                                if (!this.IfWorking || !this.Ticket.isRunning)
                                                {
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                if (retryCnt >= 5)
                                                {
                                                    ifCaptchaFailed = false;
                                                    break;
                                                }
                                                retryCnt++;
                                                Thread.Sleep(500);

                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            if (retryCnt >= 5)
                                            {
                                                ifCaptchaFailed = false;
                                                break;
                                            }

                                            Thread.Sleep(500);

                                            continue;
                                        }

                                        if (this.Captcha.CaptchaImage != null)
                                        {
                                            this.Captcha.CaptchaImage.Dispose();
                                            GC.SuppressFinalize(this.Captcha.CaptchaImage);
                                            this.Captcha.CaptchaImage = null;
                                        }
                                    }
                                    else if (capsium.FallBack)
                                    {
                                        this.RecapToken = capsium.RecapToken;
                                    }
                                }
                            }
                        }
                        else
                        {
                            #region Recaptcha v2 handling  (manual only)

                            changeStatus(TicketSearchStatus.ManualCaptchaStatus);

                            if (this.captchaload == null)
                            {
                                this.captchaload = new AutoResetEvent(false);
                            }

                            AXSTicket _tmp = ((AXSTicket)this.Ticket);
                            lock (_tmp.CaptchaBrowserQueue)
                            {
                                _tmp.CaptchaBrowserQueue.Add(this);
                            }

                            this.captchaload.WaitOne();
                            _tmp.CaptchaBrowserQueue.Remove(this);

                            if (this.IfWorking && this.Ticket.isRunning)
                            {
                                changeStatus(TicketSearchStatus.CaptchaResolvedStatus);
                            }

                            #endregion
                        }

                        if (String.IsNullOrEmpty(RecapToken))
                        {
                            if (retryCnt >= 5)
                            {
                                ifCaptchaFailed = false;
                                this.MoreInfo = String.Empty;
                                break;
                            }
                            retryCnt++;
                            ifCaptchaFailed = true;
                            Thread.Sleep(500);
                            this.MoreInfo = "Captcha Retry: " + retryCnt;

                            continue;
                        }
                        else
                        {
                            this.MoreInfo = String.Empty;
                            ifCaptchaFailed = false;
                            result = true;
                        }
                        Thread.Sleep(100);
                    } while (ifCaptchaFailed && this.Ticket.isRunning && this.IfWorking);

                    if (this.IfWorking && this.Ticket.isRunning)
                    {
                        changeStatus(TicketSearchStatus.CaptchaResolvedStatus);
                    }
                }
                catch (Exception ex)
                {
                    result = false;
                }
            }

            try
            {
                if (this.isMobile && !this.isJSON)
                {
                    this.MoreInfo = String.Empty;
                    String url = "https://axsmobile.eventshopper.com/mobileshopper/ajax/createSession.json";

                    String post = "{\"token\":\"" + this.RecapToken + "\"}";
                    this._session.Payload = post;
                    string html = this.Session.Post(url);

                    this._session.Payload = String.Empty;
                    result = true;
                }
            }
            catch (Exception ex)
            {
                result = false;
                Debug.WriteLine(ex.Message);
            }

            return result;
        }

        protected HtmlAgilityPack.HtmlDocument getResponse(HttpWebRequest request, out string strHtml)
        {
            try
            {
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    Stream receiveStream = null;
                    HtmlAgilityPack.HtmlDocument h = new HtmlAgilityPack.HtmlDocument();
                    Encoding respenc = null;
                    var isGZipEncoding = false;
                    if (!string.IsNullOrEmpty(response.ContentEncoding))
                    {
                        if (response.ContentEncoding.ToLower().StartsWith("gzip")) isGZipEncoding = true;

                        if (!isGZipEncoding)
                        {
                            respenc = Encoding.GetEncoding(response.ContentEncoding);
                        }
                    }

                    if (isGZipEncoding)
                    {
                        receiveStream = new GZipStream(response.GetResponseStream(), CompressionMode.Decompress);
                    }
                    else
                    {
                        receiveStream = response.GetResponseStream();
                    }
                    var reader = new StreamReader(receiveStream);
                    strHtml = reader.ReadToEnd();
                    h.LoadHtml(strHtml);
                    return h;
                }
            }
            catch
            {
                strHtml = string.Empty;
                return null;
            }
        }

        private string commaSeperated(string words)
        {
            #region For numbers handling

            try
            {
                int n = 0;
                int x = 0;
                string answer = string.Empty;

                if (words.Contains(" "))
                {
                    words = words.Replace(" ", String.Empty);
                }

                if (words.ToString().Contains("0"))
                {
                    answer += "0,";
                    n = Convert.ToInt32(words.Replace("0", String.Empty));
                }
                else
                {
                    n = Convert.ToInt32(words);
                }

                do
                {
                    x = n % 10;
                    string temp = n.ToString().Replace(x.ToString(), String.Empty);

                    if (!String.IsNullOrEmpty(temp))
                    {
                        n = Convert.ToInt32(temp);
                    }
                    else
                    {
                        n = 0;
                    }

                    answer += x.ToString() + ",";
                }
                while ((n % 10) > 0);

                return answer.TrimEnd(',');

            }
            catch
            {
                return words;
            }
            #endregion

            #region For aplphabets handling
            //{
            //    try
            //    {
            //        p = p.Trim().Replace(",", "").Replace("\\", "");
            //        char[] array = p.ToLower().ToCharArray();
            //        string capwords = string.Empty;

            //        foreach (char c in array)
            //        {
            //            switch (c)
            //            {
            //                case 'a':
            //                    capwords += "0,";
            //                    break;
            //                case 'b':
            //                    capwords += "1,";
            //                    break;
            //                case 'c':
            //                    capwords += "2,";
            //                    break;
            //                case 'd':
            //                    capwords += "3,";
            //                    break;
            //                case 'e':
            //                    capwords += "4,";
            //                    break;
            //                case 'f':
            //                    capwords += "5,";
            //                    break;
            //                case 'g':
            //                    capwords += "6,";
            //                    break;
            //                case 'h':
            //                    capwords += "7,";
            //                    break;
            //                case 'i':
            //                    capwords += "8,";
            //                    break;
            //                case 'j':
            //                    capwords += "9,";
            //                    break;
            //                case 'k':
            //                    capwords += "10,";
            //                    break;
            //                case 'l':
            //                    capwords += "11,";
            //                    break;
            //                case 'm':
            //                    capwords += "12,";
            //                    break;
            //                case 'n':
            //                    capwords += "13,";
            //                    break;
            //                case 'o':
            //                    capwords += "14,";
            //                    break;
            //                case 'p':
            //                    capwords += "15,";
            //                    break;
            //            }
            //        }

            //        return capwords = capwords.TrimEnd(',');

            //    }
            //    catch
            //    {
            //        return p;
            //    }
            //} 
            #endregion
        }

        string changeNumbers(string words)
        {
            try
            {
                // words = words.Trim().Replace(",", "").Replace("\\", "");
                string[] array = words.Trim().Split(',');
                string capwords = string.Empty;

                foreach (string c in array)
                {
                    switch (c)
                    {
                        case "1":
                            capwords += "0,";
                            break;
                        case "2":
                            capwords += "1,";
                            break;
                        case "3":
                            capwords += "2,";
                            break;
                        case "4":
                            capwords += "3,";
                            break;
                        case "5":
                            capwords += "4,";
                            break;
                        case "6":
                            capwords += "5,";
                            break;
                        case "7":
                            capwords += "6,";
                            break;
                        case "8":
                            capwords += "7,";
                            break;
                        case "9":
                            capwords += "8,";
                            break;
                        case "10":
                            capwords += "9,";
                            break;
                        case "11":
                            capwords += "10,";
                            break;
                        case "l2":
                            capwords += "11,";
                            break;
                        case "13":
                            capwords += "12,";
                            break;
                        case "14":
                            capwords += "13,";
                            break;
                        case "15":
                            capwords += "14,";
                            break;
                        case "16":
                            capwords += "15,";
                            break;
                        case "a":
                            capwords += "0,";
                            break;
                        case "b":
                            capwords += "1,";
                            break;
                        case "c":
                            capwords += "2,";
                            break;
                        case "d":
                            capwords += "3,";
                            break;
                        case "e":
                            capwords += "4,";
                            break;
                        case "f":
                            capwords += "5,";
                            break;
                        case "g":
                            capwords += "6,";
                            break;
                        case "h":
                            capwords += "7,";
                            break;
                        case "i":
                            capwords += "8,";
                            break;
                        case "j":
                            capwords += "9,";
                            break;
                        case "k":
                            capwords += "10,";
                            break;
                        case "l":
                            capwords += "11,";
                            break;
                        case "m":
                            capwords += "12,";
                            break;
                        case "n":
                            capwords += "13,";
                            break;
                        case "o":
                            capwords += "14,";
                            break;
                        case "p":
                            capwords += "15,";
                            break;
                    }
                }

                return capwords = capwords.TrimEnd(',');

            }
            catch
            {
                return words;
            }
        }

        protected Boolean qualifiesOld()
        {
            bool ifQualifies = false;
            string searchSection = this.Section;
            string searchRow = this.Row;
            int isearchRow = 0;


            try
            {
                if (this.Ticket.TicketFoundCriterions == null)
                {
                    ifQualifies = true;
                    return ifQualifies;
                }
                else if (this.Ticket.TicketFoundCriterions.Count <= 0)
                {
                    ifQualifies = true;
                    return ifQualifies;
                }

                foreach (AXSFoundCriteria criteria in this.Ticket.TicketFoundCriterions)
                {

                    if (searchRow.Length == 1 && searchRow.Length == ((!String.IsNullOrEmpty(criteria.RowFrom)) ? criteria.RowFrom.Length : searchRow.Length) && searchRow.Length == ((!String.IsNullOrEmpty(criteria.RowTo)) ? criteria.RowTo.Length : searchRow.Length))
                    {
                        int iFirstRow = 0;
                        int iLastRow = 0;
                        //Below are the variable used to check whether the row contains numeric data or not.
                        bool bFirstRow = false;
                        bool bLastRow = false;
                        bool bSearchRow = false;


                        if (!String.IsNullOrEmpty(criteria.Section) && !String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                        {
                            bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                            bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                            bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                            if (!bSearchRow)
                            {
                                isearchRow = Convert.ToInt32(Convert.ToChar(searchRow.ToLower()));
                            }
                            if (!bFirstRow || !bLastRow)
                            {
                                iFirstRow = Convert.ToInt32(Convert.ToChar(criteria.RowFrom.ToLower()));
                                iLastRow = Convert.ToInt32(Convert.ToChar(criteria.RowTo.ToLower()));
                            }
                            if ((bFirstRow && bLastRow) && (!bSearchRow))
                            {
                                ifQualifies = false;
                            }
                            else if (criteria.Section.ToLower() == searchSection.ToLower() && (isearchRow >= iFirstRow && isearchRow <= iLastRow))
                            {
                                ifQualifies = true;
                                return ifQualifies;
                            }
                        }
                        else if (String.IsNullOrEmpty(criteria.Section) && (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo)))
                        {
                            bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                            bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                            bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                            if (!bSearchRow)
                            {
                                isearchRow = Convert.ToInt32(Convert.ToChar(searchRow.ToLower()));
                            }
                            if (!bFirstRow || !bLastRow)
                            {
                                iFirstRow = Convert.ToInt32(Convert.ToChar(criteria.RowFrom.ToLower()));
                                iLastRow = Convert.ToInt32(Convert.ToChar(criteria.RowTo.ToLower()));
                            }
                            if ((bFirstRow && bLastRow) && (!bSearchRow))
                            {
                                ifQualifies = false;
                            }
                            else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
                            {
                                ifQualifies = true;
                                return ifQualifies;
                            }
                        }
                        else if (!String.IsNullOrEmpty(criteria.Section) && (String.IsNullOrEmpty(criteria.RowFrom) && String.IsNullOrEmpty(criteria.RowTo)))
                        {
                            if (criteria.Section.ToLower() == searchSection.ToLower())
                            {
                                ifQualifies = true;
                                return ifQualifies;
                            }
                        }
                    }
                    else if (searchRow.Length > 1 && !String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                    {

                        if (searchRow.Length == criteria.RowFrom.Length && searchRow.Length == criteria.RowTo.Length)
                        {
                            try
                            {
                                int iFirstRow = 0;
                                int iLastRow = 0;
                                bool bFirstRow = false;
                                bool bLastRow = false;
                                bool bSearchRow = false;
                                int lengthRowFrom = criteria.RowFrom.ToLower().ToCharArray().Length - 1;
                                int lengthRowTo = criteria.RowTo.ToLower().ToCharArray().Length - 1;
                                int lengthSearchRow = searchRow.ToLower().ToCharArray().Length - 1;
                                string StartOfRowFrom = criteria.RowFrom.Substring(0, lengthRowFrom);
                                string StartOfRowTo = criteria.RowTo.Substring(0, lengthRowTo);
                                string StartOfSearchRow = searchRow.Substring(0, lengthSearchRow);

                                if (StartOfSearchRow.Equals(StartOfRowFrom) && StartOfSearchRow.Equals(StartOfRowTo))
                                {
                                    if (!String.IsNullOrEmpty(criteria.Section) && !String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                                    {
                                        bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                                        bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                                        bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);


                                        if (!bSearchRow)
                                        {
                                            isearchRow = Convert.ToInt32(searchRow.ToLower().ToCharArray()[lengthSearchRow]);
                                        }
                                        if (!bFirstRow || !bLastRow)
                                        {
                                            iFirstRow = Convert.ToInt32(criteria.RowFrom.ToLower().ToCharArray()[lengthRowFrom]);
                                            iLastRow = Convert.ToInt32(criteria.RowTo.ToLower().ToCharArray()[lengthRowTo]);
                                        }
                                        if (!bFirstRow || !bLastRow)
                                        {
                                            iFirstRow = Convert.ToInt32(criteria.RowFrom.ToLower().ToCharArray()[lengthRowFrom]);
                                            iLastRow = Convert.ToInt32(criteria.RowTo.ToLower().ToCharArray()[lengthRowTo]);
                                        }
                                        if ((bFirstRow && bLastRow) && (!bSearchRow))
                                        {
                                            ifQualifies = false;
                                        }
                                        else if (criteria.Section.ToLower() == searchSection.ToLower() && (isearchRow >= iFirstRow && isearchRow <= iLastRow))
                                        {
                                            ifQualifies = true;
                                            return ifQualifies;
                                        }
                                    }
                                    else if (String.IsNullOrEmpty(criteria.Section) && (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo)))
                                    {

                                        bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                                        bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                                        bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                                        if (!bSearchRow)
                                        {
                                            isearchRow = Convert.ToInt32(searchRow.ToLower().ToCharArray()[lengthSearchRow]);
                                        }
                                        if (!bFirstRow || !bLastRow)
                                        {
                                            iFirstRow = Convert.ToInt32(criteria.RowFrom.ToLower().ToCharArray()[lengthRowFrom]);
                                            iLastRow = Convert.ToInt32(criteria.RowTo.ToLower().ToCharArray()[lengthRowTo]);
                                        }
                                        if ((bFirstRow && bLastRow) && (!bSearchRow))
                                        {
                                            ifQualifies = false;
                                        }
                                        else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
                                        {
                                            ifQualifies = true;
                                            return ifQualifies;
                                        }
                                    }
                                    else if (!String.IsNullOrEmpty(criteria.Section) && (String.IsNullOrEmpty(criteria.RowFrom) && String.IsNullOrEmpty(criteria.RowTo)))
                                    {
                                        if (criteria.Section.ToLower() == searchSection.ToLower())
                                        {
                                            ifQualifies = true;
                                            return ifQualifies;
                                        }
                                    }
                                }
                            }
                            catch (Exception)
                            {
                                ifQualifies = false;
                            }
                        }
                    }
                    else
                    {
                        int iFirstRow = 0;
                        int iLastRow = 0;
                        //Below are the variable used to check whether the row contains numeric data or not.
                        bool bFirstRow = false;
                        bool bLastRow = false;
                        bool bSearchRow = false;

                        if (!String.IsNullOrEmpty(criteria.Section) && !String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                        {

                            bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                            bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                            bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);


                            if (!bFirstRow || !bLastRow || !bSearchRow)
                            {
                                return false;
                            }
                            if ((bFirstRow && bLastRow) && (!bSearchRow))
                            {
                                ifQualifies = false;
                            }
                            else if (criteria.Section.ToLower() == searchSection.ToLower() && (isearchRow >= iFirstRow && isearchRow <= iLastRow))
                            {
                                ifQualifies = true;
                                return ifQualifies;
                            }
                            else
                            {
                                ifQualifies = false;
                            }
                        }
                        else if (String.IsNullOrEmpty(criteria.Section) && (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo)))
                        {
                            bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                            bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                            bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                            if (!bFirstRow || !bLastRow || !bSearchRow)
                            {
                                return false;
                            }
                            if ((bFirstRow && bLastRow) && (!bSearchRow))
                            {
                                ifQualifies = false;
                            }
                            else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
                            {
                                ifQualifies = true;
                                return ifQualifies;
                            }
                            else
                            {
                                ifQualifies = false;
                            }
                        }
                        else if (!String.IsNullOrEmpty(criteria.Section) && (String.IsNullOrEmpty(criteria.RowFrom) && String.IsNullOrEmpty(criteria.RowTo)))
                        {
                            if (criteria.Section.ToLower() == searchSection.ToLower())
                            {
                                ifQualifies = true;
                                return ifQualifies;
                            }

                            else
                            {
                                ifQualifies = false;
                            }
                        }
                        else
                        {
                            ifQualifies = false;
                        }

                    }
                }
            }
            catch (Exception)
            {
                ifQualifies = false;
            }

            return ifQualifies;
        }

        protected Boolean qualifies()
        {
            bool ifQualifies = false;
            string searchSection = this.Section;
            string searchRow = this.Row;
            int isearchRow = 0;


            try
            {
                if (this.Ticket.TicketFoundCriterions == null)
                {
                    ifQualifies = true;
                    return ifQualifies;
                }
                else if (this.Ticket.TicketFoundCriterions.Count <= 0)
                {
                    ifQualifies = true;
                    return ifQualifies;
                }

                foreach (AXSFoundCriteria criteria in this.Ticket.TicketFoundCriterions)
                {

                    if (searchRow.Length == 1 && searchRow.Length == ((!String.IsNullOrEmpty(criteria.RowFrom)) ? criteria.RowFrom.Length : searchRow.Length) && searchRow.Length == ((!String.IsNullOrEmpty(criteria.RowTo)) ? criteria.RowTo.Length : searchRow.Length))
                    {
                        int iFirstRow = 0;
                        int iLastRow = 0;
                        //Below are the variable used to check whether the row contains numeric data or not.
                        bool bFirstRow = false;
                        bool bLastRow = false;
                        bool bSearchRow = false;

                        if (!String.IsNullOrEmpty(criteria.Section) && !String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                        {
                            bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                            bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                            bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                            if (!bSearchRow)
                            {
                                isearchRow = Convert.ToInt32(Convert.ToChar(searchRow.ToLower()));
                            }
                            if (!bFirstRow || !bLastRow)
                            {
                                iFirstRow = Convert.ToInt32(Convert.ToChar(criteria.RowFrom.ToLower()));
                                iLastRow = Convert.ToInt32(Convert.ToChar(criteria.RowTo.ToLower()));
                            }
                            if ((bFirstRow && bLastRow) && (!bSearchRow))
                            {
                                ifQualifies = false;
                            }
                            else if (criteria.Section.ToLower() == searchSection.ToLower() && (isearchRow >= iFirstRow && isearchRow <= iLastRow))
                            {
                                ifQualifies = true;
                                return ifQualifies;
                            }
                        }
                        else if (String.IsNullOrEmpty(criteria.Section) && (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo)))
                        {
                            bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                            bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                            bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                            if (!bSearchRow)
                            {
                                isearchRow = Convert.ToInt32(Convert.ToChar(searchRow.ToLower()));
                            }
                            if (!bFirstRow || !bLastRow)
                            {
                                iFirstRow = Convert.ToInt32(Convert.ToChar(criteria.RowFrom.ToLower()));
                                iLastRow = Convert.ToInt32(Convert.ToChar(criteria.RowTo.ToLower()));
                            }
                            if ((bFirstRow && bLastRow) && (!bSearchRow))
                            {
                                ifQualifies = false;
                            }
                            else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
                            {
                                ifQualifies = true;
                                return ifQualifies;
                            }
                        }
                        else if (!String.IsNullOrEmpty(criteria.Section) && (String.IsNullOrEmpty(criteria.RowFrom) && String.IsNullOrEmpty(criteria.RowTo)))
                        {
                            if (criteria.Section.ToLower() == searchSection.ToLower())
                            {
                                ifQualifies = true;
                                return ifQualifies;
                            }
                        }
                    }
                    else if (!String.IsNullOrEmpty(criteria.Section) && (String.IsNullOrEmpty(criteria.RowFrom) && String.IsNullOrEmpty(criteria.RowTo)))
                    {
                        if (criteria.Section.ToLower() == searchSection.ToLower())
                        {
                            ifQualifies = true;
                            return ifQualifies;
                        }
                    }
                    else if (searchRow.Length > 1 && searchRow.Length == criteria.RowFrom.Length && searchRow.Length == criteria.RowTo.Length)
                    {
                        try
                        {
                            int iFirstRow = 0;
                            int iLastRow = 0;
                            bool bFirstRow = false;
                            bool bLastRow = false;
                            bool bSearchRow = false;

                            if (!String.IsNullOrEmpty(criteria.Section) && !String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                            {
                                bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                                bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                                bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                                if (!bSearchRow)
                                {
                                    isearchRow = Convert.ToInt32(searchRow.ToLower().ToCharArray()[0]);
                                }
                                if (!bFirstRow || !bLastRow)
                                {
                                    iFirstRow = Convert.ToInt32(criteria.RowFrom.ToLower().ToCharArray()[0]);
                                    iLastRow = Convert.ToInt32(criteria.RowTo.ToLower().ToCharArray()[0]);
                                }
                                if ((bFirstRow && bLastRow) && (!bSearchRow))
                                {
                                    ifQualifies = false;
                                }
                                else if (criteria.Section.ToLower() == searchSection.ToLower() && (isearchRow >= iFirstRow && isearchRow <= iLastRow))
                                {
                                    ifQualifies = true;
                                    return ifQualifies;
                                }
                            }
                            else if (String.IsNullOrEmpty(criteria.Section) && (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo)))
                            {

                                bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                                bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                                bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                                if (!bSearchRow)
                                {
                                    isearchRow = Convert.ToInt32(searchRow.ToLower().ToCharArray()[0]);
                                }
                                if (!bFirstRow || !bLastRow)
                                {
                                    iFirstRow = Convert.ToInt32(criteria.RowFrom.ToLower().ToCharArray()[0]);
                                    iLastRow = Convert.ToInt32(criteria.RowTo.ToLower().ToCharArray()[0]);
                                }
                                if ((bFirstRow && bLastRow) && (!bSearchRow))
                                {
                                    ifQualifies = false;
                                }
                                else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
                                {
                                    ifQualifies = true;
                                    return ifQualifies;
                                }
                            }
                            else if (!String.IsNullOrEmpty(criteria.Section) && (String.IsNullOrEmpty(criteria.RowFrom) && String.IsNullOrEmpty(criteria.RowTo)))
                            {
                                if (criteria.Section.ToLower() == searchSection.ToLower())
                                {
                                    ifQualifies = true;
                                    return ifQualifies;
                                }
                            }
                        }
                        catch (Exception)
                        {
                            ifQualifies = false;
                        }
                    }
                    else
                    {
                        int iFirstRow = 0;
                        int iLastRow = 0;
                        //Below are the variable used to check whether the row contains numeric data or not.
                        bool bFirstRow = false;
                        bool bLastRow = false;
                        bool bSearchRow = false;

                        if (!String.IsNullOrEmpty(criteria.Section) && !String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                        {

                            bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                            bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                            bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);


                            if (!bFirstRow || !bLastRow || !bSearchRow)
                            {
                                return false;
                            }
                            if ((bFirstRow && bLastRow) && (!bSearchRow))
                            {
                                ifQualifies = false;
                            }
                            else if (criteria.Section.ToLower() == searchSection.ToLower() && (isearchRow >= iFirstRow && isearchRow <= iLastRow))
                            {
                                ifQualifies = true;
                                return ifQualifies;
                            }
                            else
                            {
                                ifQualifies = false;
                            }
                        }
                        else if (String.IsNullOrEmpty(criteria.Section) && (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo)))
                        {
                            bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                            bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                            bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                            if (!bFirstRow || !bLastRow || !bSearchRow)
                            {
                                return false;
                            }
                            if ((bFirstRow && bLastRow) && (!bSearchRow))
                            {
                                ifQualifies = false;
                            }
                            else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
                            {
                                ifQualifies = true;
                                return ifQualifies;
                            }
                            else
                            {
                                ifQualifies = false;
                            }
                        }
                        else if (!String.IsNullOrEmpty(criteria.Section) && (String.IsNullOrEmpty(criteria.RowFrom) && String.IsNullOrEmpty(criteria.RowTo)))
                        {
                            if (criteria.Section.ToLower() == searchSection.ToLower())
                            {
                                ifQualifies = true;
                                return ifQualifies;
                            }
                            else
                            {
                                ifQualifies = false;
                            }
                        }
                        else
                        {
                            ifQualifies = false;
                        }

                    }
                }
            }
            catch (Exception)
            {
                ifQualifies = false;
            }

            return ifQualifies;
        }

        protected SeatsPair qualifiesTix(List<SeatsPair> pair)
        {
            bool ifQualifies = false;

            SeatsPair seatPait = new SeatsPair();

            try
            {
                if (this.Ticket.TicketFoundCriterions == null)
                {
                    ifQualifies = true;
                    return seatPait;
                }
                else if (this.Ticket.TicketFoundCriterions.Count <= 0)
                {
                    ifQualifies = true;
                    return seatPait;
                }

                foreach (SeatsPair item in pair)
                {
                    string searchRow = item.Row;
                    int isearchRow = 0;

                    foreach (AXSFoundCriteria criteria in this.Ticket.TicketFoundCriterions)
                    {
                        if (searchRow.Length == 1 && searchRow.Length == ((!String.IsNullOrEmpty(criteria.RowFrom)) ? criteria.RowFrom.Length : searchRow.Length) && searchRow.Length == ((!String.IsNullOrEmpty(criteria.RowTo)) ? criteria.RowTo.Length : searchRow.Length))
                        {
                            int iFirstRow = 0;
                            int iLastRow = 0;
                            //Below are the variable used to check whether the row contains numeric data or not.
                            bool bFirstRow = false;
                            bool bLastRow = false;
                            bool bSearchRow = false;


                            if (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                            {
                                bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                                bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                                bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                                if (!bSearchRow)
                                {
                                    isearchRow = Convert.ToInt32(Convert.ToChar(searchRow.ToLower()));
                                }
                                if (!bFirstRow || !bLastRow)
                                {
                                    iFirstRow = Convert.ToInt32(Convert.ToChar(criteria.RowFrom.ToLower()));
                                    iLastRow = Convert.ToInt32(Convert.ToChar(criteria.RowTo.ToLower()));
                                }
                                if ((bFirstRow && bLastRow) && (!bSearchRow))
                                {
                                    ifQualifies = false;
                                }
                                else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
                                {
                                    ifQualifies = true;
                                    seatPait = item;
                                    return seatPait;
                                }
                            }
                            else if (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                            {
                                bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                                bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                                bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                                if (!bSearchRow)
                                {
                                    isearchRow = Convert.ToInt32(Convert.ToChar(searchRow.ToLower()));
                                }
                                if (!bFirstRow || !bLastRow)
                                {
                                    iFirstRow = Convert.ToInt32(Convert.ToChar(criteria.RowFrom.ToLower()));
                                    iLastRow = Convert.ToInt32(Convert.ToChar(criteria.RowTo.ToLower()));
                                }
                                if ((bFirstRow && bLastRow) && (!bSearchRow))
                                {
                                    ifQualifies = false;
                                }
                                else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
                                {
                                    ifQualifies = true;
                                    seatPait = item;
                                    return seatPait;
                                }
                            }
                        }
                        else if (searchRow.Length > 1 && !String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                        {

                            if (searchRow.Length == criteria.RowFrom.Length && searchRow.Length == criteria.RowTo.Length)
                            {
                                try
                                {
                                    int iFirstRow = 0;
                                    int iLastRow = 0;
                                    bool bFirstRow = false;
                                    bool bLastRow = false;
                                    bool bSearchRow = false;
                                    int lengthRowFrom = criteria.RowFrom.ToLower().ToCharArray().Length - 1;
                                    int lengthRowTo = criteria.RowTo.ToLower().ToCharArray().Length - 1;
                                    int lengthSearchRow = searchRow.ToLower().ToCharArray().Length - 1;
                                    string StartOfRowFrom = criteria.RowFrom.Substring(0, lengthRowFrom);
                                    string StartOfRowTo = criteria.RowTo.Substring(0, lengthRowTo);
                                    string StartOfSearchRow = searchRow.Substring(0, lengthSearchRow);

                                    if (StartOfSearchRow.Equals(StartOfRowFrom) && StartOfSearchRow.Equals(StartOfRowTo))
                                    {
                                        if (!String.IsNullOrEmpty(criteria.Section) && !String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                                        {
                                            bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                                            bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                                            bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                                            if (!bSearchRow)
                                            {
                                                isearchRow = Convert.ToInt32(searchRow.ToLower().ToCharArray()[lengthSearchRow]);
                                            }
                                            if (!bFirstRow || !bLastRow)
                                            {
                                                iFirstRow = Convert.ToInt32(criteria.RowFrom.ToLower().ToCharArray()[lengthRowFrom]);
                                                iLastRow = Convert.ToInt32(criteria.RowTo.ToLower().ToCharArray()[lengthRowTo]);
                                            }
                                            if (!bFirstRow || !bLastRow)
                                            {
                                                iFirstRow = Convert.ToInt32(criteria.RowFrom.ToLower().ToCharArray()[lengthRowFrom]);
                                                iLastRow = Convert.ToInt32(criteria.RowTo.ToLower().ToCharArray()[lengthRowTo]);
                                            }
                                            if ((bFirstRow && bLastRow) && (!bSearchRow))
                                            {
                                                ifQualifies = false;
                                            }
                                            else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
                                            {
                                                ifQualifies = true;
                                                seatPait = item;
                                                return seatPait;
                                            }
                                        }
                                        else if (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                                        {

                                            bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                                            bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                                            bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                                            if (!bSearchRow)
                                            {
                                                isearchRow = Convert.ToInt32(searchRow.ToLower().ToCharArray()[lengthSearchRow]);
                                            }
                                            if (!bFirstRow || !bLastRow)
                                            {
                                                iFirstRow = Convert.ToInt32(criteria.RowFrom.ToLower().ToCharArray()[lengthRowFrom]);
                                                iLastRow = Convert.ToInt32(criteria.RowTo.ToLower().ToCharArray()[lengthRowTo]);
                                            }
                                            if ((bFirstRow && bLastRow) && (!bSearchRow))
                                            {
                                                ifQualifies = false;
                                            }
                                            else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
                                            {
                                                ifQualifies = true;
                                                seatPait = item;
                                                return seatPait;
                                            }
                                        }
                                        else if (String.IsNullOrEmpty(criteria.RowFrom) && String.IsNullOrEmpty(criteria.RowTo))
                                        {
                                            ifQualifies = true;
                                            seatPait = item;
                                            return seatPait;
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                    ifQualifies = false;
                                }
                            }
                        }
                        else
                        {
                            int iFirstRow = 0;
                            int iLastRow = 0;
                            //Below are the variable used to check whether the row contains numeric data or not.
                            bool bFirstRow = false;
                            bool bLastRow = false;
                            bool bSearchRow = false;

                            if (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                            {

                                bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                                bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                                bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);


                                if (!bFirstRow || !bLastRow || !bSearchRow)
                                {
                                    return seatPait;
                                }
                                if ((bFirstRow && bLastRow) && (!bSearchRow))
                                {
                                    ifQualifies = false;
                                }
                                else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
                                {
                                    ifQualifies = true;
                                    seatPait = item;
                                    return seatPait;
                                }
                                else
                                {
                                    ifQualifies = false;
                                }
                            }
                            else if (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
                            {
                                bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
                                bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
                                bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

                                if (!bFirstRow || !bLastRow || !bSearchRow)
                                {
                                    return seatPait;
                                }
                                if ((bFirstRow && bLastRow) && (!bSearchRow))
                                {
                                    ifQualifies = false;
                                }
                                else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
                                {
                                    ifQualifies = true;
                                    seatPait = item;
                                    return seatPait;
                                }
                                else
                                {
                                    ifQualifies = false;
                                }
                            }
                            else if (String.IsNullOrEmpty(criteria.RowFrom) && String.IsNullOrEmpty(criteria.RowTo))
                            {
                                ifQualifies = true;
                                seatPait = item;
                                return seatPait;
                            }
                            else
                            {
                                ifQualifies = false;
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                ifQualifies = false;
            }

            return seatPait;
        }

        protected Boolean getSection()
        {
            bool ifQualifies = false;

            selectedSection = null;

            try
            {
                if (this.Ticket.TicketFoundCriterions == null || this.Ticket.TicketFoundCriterions.Count == 0)
                {
                    Random rnd = new Random();
                    int index = 0;
                    index = rnd.Next(0, selectedPriceLevelTix.Sections.Count);

                    ifQualifies = true;

                    // selectedSection = selectedPriceLevelTix.Sections[0];//first or default whose has quantity >= _CurrentParameter.quantity.
                    List<AXSTixSection> sectionsToConsider = selectedPriceLevelTix.Sections.Where(s => s.SeatsAvailable >= _CurrentParameter.Quantity).ToList();
                    if (sectionsToConsider != null && sectionsToConsider.Count > 0)
                    {
                        try
                        {
                            selectedSection = sectionsToConsider[index];
                        }
                        catch
                        {
                            selectedSection = sectionsToConsider[index - 1];
                        }
                    }
                    else
                    {
                        selectedSection = selectedPriceLevelTix.Sections.FirstOrDefault(s => s.SeatsAvailable >= _CurrentParameter.Quantity);
                    }

                    return ifQualifies;
                }

                foreach (AXSTixSection item in selectedPriceLevelTix.Sections)
                {
                    foreach (AXSFoundCriteria criteria in this.Ticket.TicketFoundCriterions)
                    {
                        if (!String.IsNullOrEmpty(criteria.Section))
                        {
                            if (criteria.Section.ToLower() == item.Label.ToLower())
                            {
                                if (item.SeatsAvailable >= _CurrentParameter.Quantity)
                                {
                                    ifQualifies = true;
                                    selectedSection = item;
                                    break;
                                }
                            }
                            else
                            {
                                ifQualifies = false;
                            }
                        }
                        else
                        {
                            ifQualifies = false;
                        }

                        //if (selectedSection != null)
                        //{
                        //    break;
                        //}
                    }

                    if (selectedSection != null)
                    {
                        break;
                    }
                }
            }
            catch (Exception)
            {
                ifQualifies = false;
            }

            return ifQualifies;
        }


        //protected Boolean qualifies()
        //{
        //    bool ifQualifies = false;
        //    string searchSection = this.Section;
        //    string searchRow = this.Row;
        //    int isearchRow = 0;


        //    try
        //    {
        //        if (this.Ticket.TicketFoundCriterions == null)
        //        {
        //            ifQualifies = true;
        //            return ifQualifies;
        //        }
        //        else if (this.Ticket.TicketFoundCriterions.Count <= 0)
        //        {
        //            ifQualifies = true;
        //            return ifQualifies;
        //        }

        //        foreach (AXSFoundCriteria criteria in this.Ticket.TicketFoundCriterions)
        //        {

        //            if (searchRow.Length == 1 && searchRow.Length == ((!String.IsNullOrEmpty(criteria.RowFrom)) ? criteria.RowFrom.Length : searchRow.Length) && searchRow.Length == ((!String.IsNullOrEmpty(criteria.RowTo)) ? criteria.RowTo.Length : searchRow.Length))
        //            {
        //                int iFirstRow = 0;
        //                int iLastRow = 0;
        //                //Below are the variable used to check whether the row contains numeric data or not.
        //                bool bFirstRow = false;
        //                bool bLastRow = false;
        //                bool bSearchRow = false;

        //                if (!String.IsNullOrEmpty(criteria.Section) && !String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
        //                {
        //                    bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
        //                    bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
        //                    bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

        //                    if (!bSearchRow)
        //                    {
        //                        isearchRow = Convert.ToInt32(Convert.ToChar(searchRow.ToLower()));
        //                    }
        //                    if (!bFirstRow || !bLastRow)
        //                    {
        //                        iFirstRow = Convert.ToInt32(Convert.ToChar(criteria.RowFrom.ToLower()));
        //                        iLastRow = Convert.ToInt32(Convert.ToChar(criteria.RowTo.ToLower()));
        //                    }
        //                    if ((bFirstRow && bLastRow) && (!bSearchRow))
        //                    {
        //                        ifQualifies = false;
        //                    }
        //                    else if (criteria.Section.ToLower() == searchSection.ToLower() && (isearchRow >= iFirstRow && isearchRow <= iLastRow))
        //                    {
        //                        ifQualifies = true;
        //                        return ifQualifies;
        //                    }
        //                }
        //                else if (String.IsNullOrEmpty(criteria.Section) && (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo)))
        //                {
        //                    bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
        //                    bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
        //                    bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

        //                    if (!bSearchRow)
        //                    {
        //                        isearchRow = Convert.ToInt32(Convert.ToChar(searchRow.ToLower()));
        //                    }
        //                    if (!bFirstRow || !bLastRow)
        //                    {
        //                        iFirstRow = Convert.ToInt32(Convert.ToChar(criteria.RowFrom.ToLower()));
        //                        iLastRow = Convert.ToInt32(Convert.ToChar(criteria.RowTo.ToLower()));
        //                    }
        //                    if ((bFirstRow && bLastRow) && (!bSearchRow))
        //                    {
        //                        ifQualifies = false;
        //                    }
        //                    else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
        //                    {
        //                        ifQualifies = true;
        //                        return ifQualifies;
        //                    }
        //                }
        //                else if (!String.IsNullOrEmpty(criteria.Section) && (String.IsNullOrEmpty(criteria.RowFrom) && String.IsNullOrEmpty(criteria.RowTo)))
        //                {
        //                    if (criteria.Section.ToLower() == searchSection.ToLower())
        //                    {
        //                        ifQualifies = true;
        //                        return ifQualifies;
        //                    }
        //                }
        //            }
        //            else if (searchRow.Length > 1 && searchRow.Length == criteria.RowFrom.Length && searchRow.Length == criteria.RowTo.Length)
        //            {
        //                try
        //                {
        //                    int iFirstRow = 0;
        //                    int iLastRow = 0;
        //                    bool bFirstRow = false;
        //                    bool bLastRow = false;
        //                    bool bSearchRow = false;

        //                    if (!String.IsNullOrEmpty(criteria.Section) && !String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
        //                    {
        //                        bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
        //                        bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
        //                        bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

        //                        if (!bSearchRow)
        //                        {
        //                            isearchRow = Convert.ToInt32(searchRow.ToLower().ToCharArray()[0]);
        //                        }
        //                        if (!bFirstRow || !bLastRow)
        //                        {
        //                            iFirstRow = Convert.ToInt32(criteria.RowFrom.ToLower().ToCharArray()[0]);
        //                            iLastRow = Convert.ToInt32(criteria.RowTo.ToLower().ToCharArray()[0]);
        //                        }
        //                        if ((bFirstRow && bLastRow) && (!bSearchRow))
        //                        {
        //                            ifQualifies = false;
        //                        }
        //                        else if (criteria.Section.ToLower() == searchSection.ToLower() && (isearchRow >= iFirstRow && isearchRow <= iLastRow))
        //                        {
        //                            ifQualifies = true;
        //                            return ifQualifies;
        //                        }
        //                    }
        //                    else if (String.IsNullOrEmpty(criteria.Section) && (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo)))
        //                    {

        //                        bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
        //                        bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
        //                        bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

        //                        if (!bSearchRow)
        //                        {
        //                            isearchRow = Convert.ToInt32(searchRow.ToLower().ToCharArray()[0]);
        //                        }
        //                        if (!bFirstRow || !bLastRow)
        //                        {
        //                            iFirstRow = Convert.ToInt32(criteria.RowFrom.ToLower().ToCharArray()[0]);
        //                            iLastRow = Convert.ToInt32(criteria.RowTo.ToLower().ToCharArray()[0]);
        //                        }
        //                        if ((bFirstRow && bLastRow) && (!bSearchRow))
        //                        {
        //                            ifQualifies = false;
        //                        }
        //                        else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
        //                        {
        //                            ifQualifies = true;
        //                            return ifQualifies;
        //                        }
        //                    }
        //                    else if (!String.IsNullOrEmpty(criteria.Section) && (String.IsNullOrEmpty(criteria.RowFrom) && String.IsNullOrEmpty(criteria.RowTo)))
        //                    {
        //                        if (criteria.Section.ToLower() == searchSection.ToLower())
        //                        {
        //                            ifQualifies = true;
        //                            return ifQualifies;
        //                        }
        //                    }
        //                }
        //                catch (Exception)
        //                {
        //                    ifQualifies = false;
        //                }
        //            }
        //            else
        //            {
        //                int iFirstRow = 0;
        //                int iLastRow = 0;
        //                //Below are the variable used to check whether the row contains numeric data or not.
        //                bool bFirstRow = false;
        //                bool bLastRow = false;
        //                bool bSearchRow = false;

        //                if (!String.IsNullOrEmpty(criteria.Section) && !String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo))
        //                {

        //                    bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
        //                    bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
        //                    bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);


        //                    if (!bFirstRow || !bLastRow || !bSearchRow)
        //                    {
        //                        return false;
        //                    }
        //                    if ((bFirstRow && bLastRow) && (!bSearchRow))
        //                    {
        //                        ifQualifies = false;
        //                    }
        //                    else if (criteria.Section.ToLower() == searchSection.ToLower() && (isearchRow >= iFirstRow && isearchRow <= iLastRow))
        //                    {
        //                        ifQualifies = true;
        //                        return ifQualifies;
        //                    }
        //                    else
        //                    {
        //                        ifQualifies = false;
        //                    }
        //                }
        //                else if (String.IsNullOrEmpty(criteria.Section) && (!String.IsNullOrEmpty(criteria.RowFrom) && !String.IsNullOrEmpty(criteria.RowTo)))
        //                {
        //                    bSearchRow = int.TryParse(searchRow.Trim(), out isearchRow);
        //                    bFirstRow = int.TryParse(criteria.RowFrom.Trim(), out iFirstRow);
        //                    bLastRow = int.TryParse(criteria.RowTo.Trim(), out iLastRow);

        //                    if (!bFirstRow || !bLastRow || !bSearchRow)
        //                    {
        //                        return false;
        //                    }
        //                    if ((bFirstRow && bLastRow) && (!bSearchRow))
        //                    {
        //                        ifQualifies = false;
        //                    }
        //                    else if (isearchRow >= iFirstRow && isearchRow <= iLastRow)
        //                    {
        //                        ifQualifies = true;
        //                        return ifQualifies;
        //                    }
        //                    else
        //                    {
        //                        ifQualifies = false;
        //                    }
        //                }
        //                else if (!String.IsNullOrEmpty(criteria.Section) && (String.IsNullOrEmpty(criteria.RowFrom) && String.IsNullOrEmpty(criteria.RowTo)))
        //                {
        //                    if (criteria.Section.ToLower() == searchSection.ToLower())
        //                    {
        //                        ifQualifies = true;
        //                        return ifQualifies;
        //                    }
        //                    else
        //                    {
        //                        ifQualifies = false;
        //                    }
        //                }
        //                else
        //                {
        //                    ifQualifies = false;
        //                }

        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ifQualifies = false;
        //        // Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace)); 
        //    }

        //    return ifQualifies;
        //}


        string timeToExpire;
        string unitprice;
        string charityValue = "0";
        protected Boolean processFoundPage()
        {
            String rowConcatenatd = "";
            Boolean result = false;

            try
            {
                if (!this.TmEvent.ifJson && !this.isMobile)
                {
                    result = processXMLFoundPage();
                }
                else if (!this.TmEvent.ifJson && this.isMobile)
                {
                    result = processMobileFoundPage();
                }
                else
                {
                    result = processJSONFoundPage();
                }
            }
            catch
            {
                result = false;
            }
            if (this.Ticket.onNotFound != null && !result)
            {
                this.Ticket.onNotFound(this.Ticket);
            }
            return result;
        }

        protected Boolean processTixFoundPage()
        {
            String rowConcatenatd = "";
            Boolean result = false;

            String _currency = String.Empty;

            try
            {
                //if (this.Session.HtmlDocument.DocumentNode.InnerText)
                //{
                // was trying to tackle special instructions but it dont matter now.
                //}
                JObject _extractFoundValues = JObject.Parse(this.Session.HtmlDocument.DocumentNode.InnerText);

                _extractFoundValues = (JObject)_extractFoundValues["cart"];

                JArray _priceNode = (JArray)_extractFoundValues["selections"];

                if (_priceNode != null)
                {
                    String _price = ((JValue)_priceNode[0]["priceTotal"]).Value.ToString();

                    try
                    {
                        _currency = selectedPrices.Currency;

                        this.TotalPrice = _price.Insert(_price.Length - 2, ".") + " " + _currency;
                    }
                    catch
                    {
                        this.TotalPrice = _price.Insert(_price.Length - 2, ".");
                    }
                }

                try
                {
                    JArray order = (JArray)_extractFoundValues["fees"];
                    int x = 0;

                    foreach (var _item in order)
                    {
                        try
                        {
                            //if (_item["unitPrice"] != null)
                            {
                                //foreach (var item in _item["items"])
                                {
                                    //if (_item["label"] == null)
                                    {
                                        if (_item["quantity"] != null)
                                        {
                                            if (Convert.ToInt32(_item["quantity"]) > 0)
                                            {
                                                int qty = Convert.ToInt32(_item["quantity"]);
                                                JValue _unitPrice = (JValue)_item["unitPrice"];
                                                x += Convert.ToInt32(_unitPrice) * qty;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        { }
                    }
                    unitprice = x.ToString();//(Convert.ToInt32(unitprice) + x).ToString();
                }
                catch
                {
                }

                try
                {
                    int xxx = String.IsNullOrEmpty(_currency) ? Convert.ToInt32(this.TotalPrice.Replace(".", String.Empty).Trim()) : Convert.ToInt32(this.TotalPrice.Replace(_currency, String.Empty).Replace(".", String.Empty).Trim());
                    this.TotalPrice = (xxx + Convert.ToInt32(unitprice)).ToString();//(int.Parse(unitprice) + Tax).ToString();
                    this.TotalPrice = this.TotalPrice.Insert(this.TotalPrice.Length - 2, ".") + " " + _currency;
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                }


                try
                {
                    this.TotalPrice = _extractFoundValues["grandTotal"].ToString();
                    this.TotalPrice = this.TotalPrice.Insert(this.TotalPrice.Length - 2, ".") + " " + _currency;
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                }

                /******************************************************/
                //Parse the cart
                /******************************************************/
                if (_priceNode != null)
                {
                    string PriceReplace = this.TotalPrice.Replace(" USD", "").Replace(" GBP", "").Replace("CAD", "").Replace("SEK", "");
                    decimal price = Convert.ToDecimal(PriceReplace);
                    if (this.TotalPrice.Contains("USD"))
                    {
                        this.Price = price.ToString() + " USD";
                    }
                    else if (this.TotalPrice.Contains("GBP"))
                    {
                        this.Price = price.ToString() + " GBP";
                    }
                    else if (this.TotalPrice.Contains("CAD"))
                    {
                        this.Price = price.ToString() + " CAD";
                    }
                    else if (this.TotalPrice.Contains("SEK"))
                    {
                        this.Price = price.ToString() + " SEK";
                    }
                    else
                    {
                        this.Price = price.ToString();
                    }

                    timeToExpire = _extractFoundValues["expiration"].ToString();

                    //timeToExpire = doc.DocumentNode.SelectSingleNode("//member/name[text() = 'lockttl']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                    //HtmlAgilityPack.HtmlDocument hdoc = new HtmlAgilityPack.HtmlDocument();

                    this.Quantity = this._CurrentParameter.Quantity.ToString();
                    //for (int i = Convert.ToInt32(this._CurrentParameter.Quantity); i >= 1; i--)
                    {
                        if (_extractFoundValues["selections"] != null)
                        {
                            JArray _seats = (JArray)_extractFoundValues["selections"];

                            foreach (JObject item in _seats)
                            {
                                this.Description = item["offerType"].ToString();

                                foreach (JObject seat in item["types"])
                                {
                                    foreach (var _s in seat["items"])
                                    {
                                        this.Section = _s["sectionLabel"].ToString();
                                        this.Row = _s["rowLabel"].ToString();
                                        this.Seat += _s["seatLabel"].ToString() + ", ";
                                    }
                                }
                            }
                        }
                        else
                        {
                            changeStatus("Seats Not Available");
                            lock (this.Ticket)
                            {
                                this.Ticket.SoldoutCount++;
                            }
                            if (this.Ticket.onNotFound != null)
                            {
                                this.Ticket.onNotFound(this.Ticket);
                            }
                            this.retrying();
                            result = false;
                            return result;
                        }

                        if (this.IfWorking && this.Ticket.isRunning)
                        {
                            if (!this.qualifies())
                            {
                                this.IfFound = false;
                                this.MoreInfo = "Found Row: " + this.Row + ", Section: " + this.Section + ". " + TicketSearchStatus.MoreInfoCriteriaDoesNotMatch;
                                changeStatus(TicketSearchStatus.FoundCriteriaDoesNotMatch);
                                if (this.Ticket.onNotFound != null)
                                {
                                    this.Ticket.onNotFound(this.Ticket);
                                }
                                result = false;
                                return result;
                            }

                            lock (this.Ticket)
                            {
                                this.Ticket.FoundCount++;
                            }
                        }

                        changeStatus(TicketSearchStatus.FoundPageStatus);
                        this.IfFound = true;
                        this.Ticket.Email.sendFoundEmail(this);

                        if (this.Ticket.onFound != null)
                        {
                            this.Ticket.onFound(this.Ticket);
                        }

                    }

                    if (!string.IsNullOrEmpty(rowConcatenatd))
                    {
                        this.Row = rowConcatenatd.Remove(0, 1);
                    }

                    int l = this.Seat.Length;
                    if (l > 0)
                    {
                        this.Seat = this.Seat.Trim().TrimEnd(',');//this.Seat.Substring(0, (l - 1));
                    }

                    this.currLog.Section = this.Section;
                    this.currLog.Seat = this.Seat;
                    this.currLog.Row = this.Row;
                    this.currLog.Price = this.Price;
                    this.currLog.FoundDateTime = System.DateTime.Now;

                    if (this.Ticket.ifAutoBuy)
                    {
                        this.IfAutoBuy = true;
                        if (this.Ticket.ifAutoBuyWitoutProxy)
                        {
                            if (this._proxy != null)
                            {

                                if (this._proxy.TheProxyType != Core.Proxy.ProxyType.Relay)
                                {
                                    if (ProxyPicker.ProxyPickerInstance.ProxyManager != null)
                                    {
                                        ProxyPicker.ProxyPickerInstance.ProxyManager.ReleaseProxy(this._proxy);
                                    }
                                }
                                else
                                {
                                    if (ProxyPicker.ProxyPickerInstance.ProxyRelayManager != null)
                                    {
                                        #region Release Session from Server

                                        ClearSessionFromServer();

                                        #endregion

                                        ProxyPicker.ProxyPickerInstance.ProxyRelayManager.ReleaseProxy(this._proxy);
                                    }
                                }
                            }
                            this._proxy = null;

                        }
                    }
                    else
                    {
                        result = false;
                    }

                    if (this.Ticket.ifPlaySoundAlert == true && this.Status == TicketSearchStatus.FoundPageStatus)
                    {
                        this.Ticket.SoundAlert.Play();
                    }

                    if (!GoodProxies._goodProxyList.Contains(_proxy))
                    {
                        GoodProxies._goodProxyList.Add(_proxy);
                    }

                    if (_CurrentParameter != null)
                    {
                        _CurrentParameter.IfFound = true;
                    }

                    this.processTixTimer(TicketSearchStatus.FoundPageStatus);
                    result = true;
                }
                else
                {
                    changeStatus("Seats Not Available");
                    lock (this.Ticket)
                    {
                        this.Ticket.SoldoutCount++;
                    }

                    if (this.Ticket.onFound != null)
                    {
                        this.Ticket.onFound(this.Ticket);
                    }
                    result = false;
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            if (this.Ticket.onNotFound != null && !result)
            {
                this.Ticket.onNotFound(this.Ticket);
            }
            return result;
        }

        private Boolean processMobileFoundPage()
        {
            Boolean result = false;

            try
            {
                #region old
                String strHTML = this._session.HtmlDocument.DocumentNode.InnerHtml;
                String strHTMLLowered = strHTML.ToLower();
                if (strHTMLLowered.Contains("An error has occured") || strHTMLLowered.Contains("tickets are not available") || strHTMLLowered.Contains("no tickets available") || strHTMLLowered.Contains("we're sorry, we're unable to process your request. please try again"))
                {
                    if (_CurrentParameter != null)
                    {
                        _CurrentParameter.IfFound = false;
                        this.MoreInfo = "Sold out with Qty:" + _CurrentParameter.Quantity;
                        if (_CurrentParameter.PriceMin > 0)
                        {
                            this.MoreInfo += ", Min Price:" + _CurrentParameter.PriceMin;
                        }
                        if (_CurrentParameter.PriceMax > 0)
                        {
                            this.MoreInfo += ", Max Price:" + _CurrentParameter.PriceMax;
                        }
                        //if (!String.IsNullOrEmpty(_CurrentParameter.TicketTypeString))
                        //{
                        //    this.MoreInfo += ", Type:" + _CurrentParameter.TicketTypeString;
                        //}

                        if (this.Ticket.ifUseFoundOnFirstAttempt || this.Ticket.ifUseAvailableParameters)
                        {
                            _CurrentParameter = null;
                        }
                    }

                    lock (this.Ticket)
                    {
                        this.Ticket.SoldoutCount++;
                    }

                    if (this.Ticket.onNotFound != null)
                    {
                        this.Ticket.onNotFound(this.Ticket);
                    }
                    result = false;
                    return result;
                }
                else if (strHTMLLowered.Contains("0x201608") || strHTMLLowered.Contains("0x200113") || strHTMLLowered.Contains("our ticketing system is currently unavailable") || strHTMLLowered.Contains("we encountered an error and could not process your ticket request.") || strHTMLLowered.Contains("return to Event Page"))
                {
                    this.MoreInfo = TicketSearchStatus.MoreInfoSiteUnavailable;
                    if (this.Ticket.onNotFound != null)
                    {
                        this.Ticket.onNotFound(this.Ticket);
                    }
                    result = false;
                    return result;
                }
                if (this.IfWorking && this.Ticket.isRunning)
                {
                    this.extractMobileFoundValues();

                    if (String.IsNullOrEmpty(this.Price))
                    {
                        this.MoreInfo = "Ticket not found!";
                        if (this.Ticket.onNotFound != null)
                        {
                            this.Ticket.onNotFound(this.Ticket);
                        }
                        result = false;
                        return result;
                    }

                    lock (this.Ticket)
                    {
                        this.Ticket.FoundCount++;
                    }


                    if (!this.qualifies())
                    {
                        this.IfFound = false;
                        this.MoreInfo = "Found Row: " + this.Row + ", Section: " + this.Section + ". " + TicketSearchStatus.MoreInfoCriteriaDoesNotMatch;
                        changeStatus(TicketSearchStatus.FoundCriteriaDoesNotMatch);
                        if (this.Ticket.onNotFound != null)
                        {
                            this.Ticket.onNotFound(this.Ticket);
                        }
                        result = false;
                        return result;
                    }

                    changeStatus(TicketSearchStatus.FoundPageStatus);

                    this.IfFound = true;
                    this.Ticket.Email.sendFoundEmail(this);

                    if (this.Ticket.onFound != null)
                    {
                        this.Ticket.onFound(this.Ticket);
                    }

                    if (this.Ticket.ifAutoBuy)
                    {
                        this.IfAutoBuy = true;
                        if (this.Ticket.ifAutoBuyWitoutProxy)
                        {
                            if (this._proxy != null)
                            {
                                if (this._proxy.TheProxyType != Core.Proxy.ProxyType.Relay)
                                {
                                    if (ProxyPicker.ProxyPickerInstance.ProxyManager != null)
                                    {
                                        ProxyPicker.ProxyPickerInstance.ProxyManager.ReleaseProxy(this._proxy);
                                    }
                                }
                                else
                                {
                                    if (ProxyPicker.ProxyPickerInstance.ProxyRelayManager != null)
                                    {
                                        #region Release Session from Server

                                        ClearSessionFromServer();

                                        #endregion

                                        ProxyPicker.ProxyPickerInstance.ProxyRelayManager.ReleaseProxy(this._proxy);
                                    }
                                }
                            }

                            this._proxy = null;
                            this._session.Proxy = null;
                        }
                    }

                    if (this.Ticket.ifPlaySoundAlert)
                    {
                        this.Ticket.SoundAlert.Play();
                    }

                    if (!GoodProxies._goodProxyList.Contains(_proxy))
                    {
                        GoodProxies._goodProxyList.Add(_proxy);
                    }

                    //this.setManualURL();

                    if (_CurrentParameter != null)
                    {
                        _CurrentParameter.IfFound = true;
                    }

                    this.processTimer(TicketSearchStatus.FoundPageStatus);

                    result = true;

                }
                #endregion
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                result = false;
            }

            return result;
        }

        public void extractMobileFoundValues()
        {
            try
            {
                HtmlAgilityPack.HtmlDocument hdoc = this._session.HtmlDocument;
                HtmlNodeCollection nodeTicketInfo = hdoc.DocumentNode.SelectNodes("//div[@class='ui-grid-b']/div");
                if (nodeTicketInfo != null)
                {
                    foreach (HtmlNode nodeTicketRow in nodeTicketInfo)
                    {
                        if (nodeTicketRow.InnerText.ToLower().Contains("Section".ToLower()))
                        {
                            this.Section = nodeTicketRow.InnerText.Substring(nodeTicketRow.InnerText.IndexOf(':') + 1).Replace("\n", "").Trim();
                        }

                        if (nodeTicketRow.InnerText.ToLower().Contains("Row".ToLower()))
                        {
                            this.Row = nodeTicketRow.InnerText.Substring(nodeTicketRow.InnerText.IndexOf(':') + 1).Replace("\n", "").Trim();
                        }

                        if (nodeTicketRow.InnerText.ToLower().Contains("Seat".ToLower()))
                        {
                            this.Seat = nodeTicketRow.InnerText.Substring(nodeTicketRow.InnerText.IndexOf(':') + 1).Replace("\n", "").Trim();
                        }

                    }
                }
                else
                {
                    HtmlNode nodeTicketInfoSingle = hdoc.DocumentNode.SelectSingleNode("//li[@data-role='list-divider']");

                    try
                    {
                        this.Section = nodeTicketInfoSingle.NextSibling.NextSibling.InnerText.Remove(nodeTicketInfoSingle.NextSibling.NextSibling.InnerText.IndexOf('x')).Replace("\n", "").Trim();
                    }
                    catch (Exception ex)
                    {
                        this.Section = nodeTicketInfoSingle.NextSibling.NextSibling.NextSibling.NextSibling.InnerText.Remove(nodeTicketInfoSingle.NextSibling.NextSibling.NextSibling.NextSibling.InnerText.IndexOf('x')).Replace("\n", "").Trim();
                    }
                }

                //HtmlNode nodePrice = hdoc.DocumentNode.SelectSingleNode("//p[@id='total-cart-value']");
                //if (nodePrice != null)
                //{
                //    HtmlNodeCollection nodeConPrice = hdoc.DocumentNode.SelectNodes("//tbody");     //("//strong[@currency-code='USD']");
                //    this.Price = nodePrice.InnerText.Replace("\n", "").Trim();
                //}

                Match m = Regex.Match(hdoc.DocumentNode.InnerHtml.Replace("\n", ""), "var cartPunits =(.*?)\\);", RegexOptions.Multiline | RegexOptions.IgnoreCase);
                if (m.Success)
                {
                    string jsonString = m.Value.Remove(m.Value.IndexOf(";")).Replace("var cartPunits =", "");
                    JArray JSONArray = JArray.Parse(jsonString);
                    foreach (JObject item in JSONArray)
                    {
                        if (((item["items"][0]["unitPrice"]))[0] != null)
                        {
                            string jPrice = Convert.ToString(item["items"][0]["unitPrice"][0]);
                            int len = jPrice.Length - 2;
                            this.TotalPrice = this.Price = jPrice.Insert(len, ".");
                            break;
                        }

                    }
                }


                this.Quantity = this._CurrentParameter.Quantity.ToString();

                this.currLog.Section = this.Section;
                this.currLog.Seat = this.Seat;
                this.currLog.Row = this.Row;
                this.currLog.Price = this.Price;
                this.currLog.FoundDateTime = System.DateTime.Now;

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        private Boolean processXMLFoundPage()
        {
            String rowConcatenatd = String.Empty;
            Boolean result = false;
            String currency = String.Empty;

            try
            {
                HtmlNode totalPrice = doc.DocumentNode.SelectSingleNode("/methodresponse[1]/params[1]/value[1]/struct[1]/member[8]/value[1]/struct[1]/member[1]");
                HtmlNodeCollection unitPrice = null;
                if (totalPrice == null)
                {
                    totalPrice = this.doc.DocumentNode.SelectSingleNode("//name[text()='totalPrice']");
                    unitPrice = this.doc.DocumentNode.SelectNodes("//name[text()='unitPrice']");
                }

                //For charity node
                foreach (HtmlNode item in unitPrice)
                {
                    if (item.ParentNode != null && item.ParentNode.ParentNode != null && !string.IsNullOrEmpty(item.ParentNode.ParentNode.InnerText) && item.ParentNode.ParentNode.InnerText.ToLower().Contains("charity"))
                    {
                        HtmlNode node = item.ParentNode.ParentNode.SelectSingleNode(".//name[text()='quantity']").ParentNode;
                        node = node.SelectSingleNode(".//value/int");
                        int qty = Convert.ToInt32(node.InnerText);

                        if (qty > 0)
                        {
                            charityValue = item.ParentNode.InnerText.Replace("\nunitPrice\n\n", "").Replace("\nGBP\n\n", "").Replace("\nUSD\n\n", "").Replace("\nSEK\n\n", "").Replace("\nCAD\n\n", "");
                        }
                    }
                }

                try
                {
                    //unitprice = unitPrice[3].ParentNode.InnerText.Replace("\nunitPrice\n\n", "").Replace("\nGBP\n\n", "").Replace("\nUSD\n\n", "");
                    if (this.doc.DocumentNode.InnerText.ToLower().Contains("service charge"))
                    {
                        unitprice = (Convert.ToInt32(unitPrice[0].ParentNode.InnerText.Replace("\nunitPrice\n\n", "").Replace("\nGBP\n\n", "").Replace("\nUSD\n\n", "").Replace("\nSEK\n\n", "").Replace("\nCAD\n\n", "")) + Convert.ToInt32(unitPrice[1].ParentNode.InnerText.Replace("\nunitPrice\n\n", "").Replace("\nGBP\n\n", "").Replace("\nUSD\n\n", "").Replace("\nSEK\n\n", "").Replace("\nCAD\n\n", "")) + (Convert.ToInt32(unitPrice[2].ParentNode.InnerText.Replace("\nunitPrice\n\n", "").Replace("\nGBP\n\n", "").Replace("\nUSD\n\n", "").Replace("\nSEK\n\n", "").Replace("\nCAD\n\n", "")))).ToString();
                    }
                    else
                    {
                        unitprice = (Convert.ToInt32(unitPrice[0].ParentNode.InnerText.Replace("\nunitPrice\n\n", "").Replace("\nGBP\n\n", "").Replace("\nUSD\n\n", "").Replace("\nSEK\n\n", "").Replace("\nCAD\n\n", "")) + Convert.ToInt32(unitPrice[1].ParentNode.InnerText.Replace("\nunitPrice\n\n", "").Replace("\nGBP\n\n", "").Replace("\nUSD\n\n", "").Replace("\nSEK\n\n", "").Replace("\nCAD\n\n", ""))).ToString();

                    }
                }
                catch
                {
                }

                try
                {
                    int x = 0;

                    foreach (HtmlNode item in unitPrice)
                    {
                        if (item.ParentNode != null && item.ParentNode.ParentNode != null && !string.IsNullOrEmpty(item.ParentNode.ParentNode.InnerText))
                        {
                            HtmlNode node = item.ParentNode.ParentNode.SelectSingleNode(".//name[text()='quantity']").ParentNode;
                            node = node.SelectSingleNode(".//value/int");

                            if (node == null)
                            {
                                continue;
                            }
                            int qty = Convert.ToInt32(node.InnerText);

                            node = item.ParentNode.ParentNode.SelectSingleNode(".//name[text()='label']");

                            if (node == null)
                            {
                                if (!item.ParentNode.ParentNode.InnerText.ToLower().Contains("charity"))
                                {
                                    if (qty > 0)
                                    {
                                        node = item.ParentNode.ParentNode.SelectSingleNode(".//name[text()='unitPrice']").ParentNode;
                                        node = node.SelectSingleNode(".//value/int");
                                        int price = Convert.ToInt32(node.InnerText) * qty;
                                        x += price;
                                    }
                                }
                                else
                                {

                                }
                            }
                        }
                    }

                    unitprice = x.ToString();
                }
                catch (Exception ex)
                {

                }

                /******************************************************/
                //Parse the cart
                /******************************************************/
                if (totalPrice != null)
                {
                    if (!String.IsNullOrEmpty(unitprice))
                    {
                        currency = totalPrice.InnerText.Replace("totalPrice", "").Trim().Replace("\n", "");///methodresponse[1]/params[1]/value[1]/struct[1]/member[8]/value[1]/struct[1]/member[1]/value[2]
                        if (String.IsNullOrEmpty(currency))
                        {
                            currency = totalPrice.ParentNode.InnerText.Replace("\ntotalPrice\n\n", "").Trim().Replace("\n", "");
                        }

                        this.TotalPrice = unitprice;

                        if (currency.Contains("USD"))
                        {
                            currency = "USD";
                            this.TotalPrice = unitprice + "USD";
                        }
                        else if (currency.Contains("GBP"))
                        {
                            currency = "GBP";
                            this.TotalPrice = unitprice + "GBP";
                        }
                        else if (currency.Contains("CAD"))
                        {
                            currency = "CAD";
                            this.TotalPrice = unitprice + "CAD";
                        }
                        else if (currency.Contains("SEK"))
                        {
                            currency = "SEK";
                            this.TotalPrice = unitprice + "SEK";
                        }
                    }
                    else
                    {
                        this.TotalPrice = totalPrice.InnerText.Replace("totalPrice", "").Trim().Replace("\n", "");///methodresponse[1]/params[1]/value[1]/struct[1]/member[8]/value[1]/struct[1]/member[1]/value[2]
                        if (String.IsNullOrEmpty(this.TotalPrice))
                        {
                            this.TotalPrice = totalPrice.ParentNode.InnerText.Replace("\ntotalPrice\n\n", "").Replace("\nCAD\n\n", "").Trim().Replace("\n", "");
                        }
                    }

                    if (this.TotalPrice.Contains("GBP"))
                    {
                        this.TotalPrice = this.TotalPrice.Insert(this.TotalPrice.Length - 5, ".");
                        this.TotalPrice = this.TotalPrice.Insert(this.TotalPrice.Length - 3, " ");
                    }
                    else if (this.TotalPrice.Contains("USD"))
                    {
                        this.TotalPrice = this.TotalPrice.Insert(this.TotalPrice.Length - 5, ".");
                        this.TotalPrice = this.TotalPrice.Insert(this.TotalPrice.Length - 3, " ");
                    }
                    else if (this.TotalPrice.Contains("CAD"))
                    {
                        this.TotalPrice = this.TotalPrice.Insert(this.TotalPrice.Length - 5, ".");
                        this.TotalPrice = this.TotalPrice.Insert(this.TotalPrice.Length - 3, " ");
                    }
                    else if (this.TotalPrice.Contains("SEK"))
                    {
                        this.TotalPrice = this.TotalPrice.Insert(this.TotalPrice.Length - 5, ".");
                        this.TotalPrice = this.TotalPrice.Insert(this.TotalPrice.Length - 3, " ");
                    }

                    string PriceReplace = this.TotalPrice.Replace(" USD", "").Replace(" GBP", "").Replace("CAD", "").Replace("SEK", "");
                    decimal price = Convert.ToDecimal(PriceReplace);
                    if (this.TotalPrice.Contains("USD"))
                    {
                        this.Price = price.ToString() + " USD";
                    }
                    else if (this.TotalPrice.Contains("GBP"))
                    {
                        this.Price = price.ToString() + " GBP";
                    }
                    else if (this.TotalPrice.Contains("CAD"))
                    {
                        this.Price = price.ToString() + " CAD";
                    }
                    else if (this.TotalPrice.Contains("SEK"))
                    {
                        this.Price = price.ToString() + " SEK";
                    }

                    timeToExpire = doc.DocumentNode.SelectSingleNode("//member/name[text() = 'lockttl']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                    HtmlAgilityPack.HtmlDocument hdoc = new HtmlAgilityPack.HtmlDocument();
                    hdoc.LoadHtml(doc.DocumentNode.SelectSingleNode("//member/name[text() = 'seats']").ParentNode.OuterHtml);
                    this.Quantity = this._CurrentParameter.Quantity.ToString();
                    for (int i = Convert.ToInt32(this._CurrentParameter.Quantity); i >= 1; i--)
                    {
                        HtmlNode seats = hdoc.DocumentNode.SelectSingleNode("/member/value/array/data/value[" + i.ToString() + "]/array/data/value[4]/string");
                        if (seats != null)
                        {
                            string cart_seats = seats.InnerHtml;
                            try
                            {
                                string section = hdoc.DocumentNode.SelectSingleNode("/member/value/array/data/value[" + i.ToString() + "]/array/data/value[4]/string").InnerText;
                                if (this.Section != section)
                                {
                                    try
                                    {
                                        this.Section += hdoc.DocumentNode.SelectSingleNode("/member/value/array/data/value[" + i.ToString() + "]/array/data/value[4]/string").InnerText;
                                    }
                                    catch { }
                                }
                            }
                            catch { }
                            try
                            {
                                string Row = hdoc.DocumentNode.SelectSingleNode("/member/value/array/data/value[" + i.ToString() + "]/array/data/value[5]/string").InnerText;
                                if (rowConcatenatd != Row)
                                {
                                    try
                                    {
                                        rowConcatenatd += ",";
                                        rowConcatenatd += hdoc.DocumentNode.SelectSingleNode("/member/value/array/data/value[" + i.ToString() + "]/array/data/value[5]/string").InnerText;
                                        this.Row = hdoc.DocumentNode.SelectSingleNode("/member/value/array/data/value[" + i.ToString() + "]/array/data/value[5]/string").InnerText;
                                    }
                                    catch { }
                                }
                            }
                            catch { }
                            try
                            {
                                string seat = hdoc.DocumentNode.SelectSingleNode("/member/value/array/data/value[" + i.ToString() + "]/array/data/value[6]/string").InnerText + ",";
                                if (this.Seat != seat)
                                {
                                    try
                                    {
                                        this.Seat += hdoc.DocumentNode.SelectSingleNode("/member/value/array/data/value[" + i.ToString() + "]/array/data/value[6]/string").InnerText + ",";
                                    }
                                    catch { }
                                }
                            }
                            catch { }
                        }

                        else
                        {
                            changeStatus("Seats Not Available");
                            lock (this.Ticket)
                            {
                                this.Ticket.SoldoutCount++;
                            }
                            if (this.Ticket.onNotFound != null)
                            {
                                this.Ticket.onNotFound(this.Ticket);
                            }
                            this.retrying();
                            result = false;
                            return result;
                        }


                        if (this.IfWorking && this.Ticket.isRunning)
                        {
                            lock (this.Ticket)
                            {
                                this.Ticket.FoundCount++;
                            }

                            if (!this.qualifies())
                            {
                                this.IfFound = false;
                                this.MoreInfo = "Found Row: " + this.Row + ", Section: " + this.Section + ". " + TicketSearchStatus.MoreInfoCriteriaDoesNotMatch;
                                changeStatus(TicketSearchStatus.FoundCriteriaDoesNotMatch);
                                if (this.Ticket.onNotFound != null)
                                {
                                    this.Ticket.onNotFound(this.Ticket);
                                }
                                result = false;
                                return result;
                            }
                        }

                        changeStatus(TicketSearchStatus.FoundPageStatus);
                        this.IfFound = true;
                        this.Ticket.Email.sendFoundEmail(this);

                        if (this.Ticket.onFound != null)
                        {
                            this.Ticket.onFound(this.Ticket);
                        }
                    }

                    if (!string.IsNullOrEmpty(rowConcatenatd))
                    {
                        this.Row = rowConcatenatd.Remove(0, 1);
                    }

                    HtmlAgilityPack.HtmlDocument newdoc = new HtmlAgilityPack.HtmlDocument();
                    if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                    {
                        newdoc.LoadHtml(post(this, this.XmlUrl.Replace("/info2/", "/bfox/").Replace("wroom", "tickets") + "?methodName=webapi.getMoreTimeAll&timeLeft=" + timeToExpire + "&sessionKey=" + this.SessionKey + "&XMLRPC_callCounter=6", String.Format("<methodCall><methodName>webapi.getMoreTimeAll</methodName><params><param><value><string>{0}</string></value></param></params></methodCall>", this.SessionKey)));
                    }
                    else
                    {
                        newdoc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.getMoreTimeAll&timeLeft=" + timeToExpire + "&sessionKey=" + this.SessionKey + "&XMLRPC_callCounter=6", String.Format("<methodCall><methodName>webapi.getMoreTimeAll</methodName><params><param><value><string>{0}</string></value></param></params></methodCall>", this.SessionKey)));
                    }

                    timeToExpire = newdoc.DocumentNode.InnerText.Trim();
                    int l = this.Seat.Length;

                    //if (l > 0)
                    //{
                    //    this.Seat = this.Seat.TrimEnd(',');//this.Seat.Substring(0, (l - 1));
                    //}
                    //if (l > 0)
                    //{
                    //    this.Seat = this.Seat.Substring(0, (l - 1));
                    //}

                    this.currLog.Section = this.Section;
                    this.currLog.Seat = this.Seat;
                    this.currLog.Row = this.Row;
                    this.currLog.Price = this.Price;
                    this.currLog.FoundDateTime = System.DateTime.Now;

                    if (this.Ticket.ifAutoBuy)
                    {
                        this.IfAutoBuy = true;
                        if (this.Ticket.ifAutoBuyWitoutProxy)
                        {
                            if (this._proxy != null)
                            {
                                if (this._proxy.TheProxyType != Core.Proxy.ProxyType.Relay)
                                {
                                    if (ProxyPicker.ProxyPickerInstance.ProxyManager != null)
                                    {
                                        ProxyPicker.ProxyPickerInstance.ProxyManager.ReleaseProxy(this._proxy);
                                    }
                                }
                                else
                                {
                                    if (ProxyPicker.ProxyPickerInstance.ProxyRelayManager != null)
                                    {
                                        #region Release Session from Server

                                        ClearSessionFromServer();

                                        #endregion

                                        ProxyPicker.ProxyPickerInstance.ProxyRelayManager.ReleaseProxy(this._proxy);
                                    }
                                }
                            }
                            this._proxy = null;
                        }
                    }
                    else
                    {
                        result = false;
                    }

                    if (this.Ticket.ifPlaySoundAlert == true && this.Status == TicketSearchStatus.FoundPageStatus)
                    {
                        this.Ticket.SoundAlert.Play();
                    }

                    if (!GoodProxies._goodProxyList.Contains(_proxy))
                    {
                        GoodProxies._goodProxyList.Add(_proxy);
                    }

                    if (_CurrentParameter != null)
                    {
                        _CurrentParameter.IfFound = true;
                    }

                    this.processTimer(TicketSearchStatus.FoundPageStatus);
                    result = true;
                }
                else
                {
                    changeStatus("Seats Not Available");
                    //Thread.Sleep(100);
                    lock (this.Ticket)
                    {
                        this.Ticket.SoldoutCount++;
                    }

                    if (this.Ticket.onFound != null)
                    {
                        this.Ticket.onFound(this.Ticket);
                    }
                    result = false;
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
            return result;
        }

        private Boolean processJSONFoundPage()
        {
            Boolean result = false;
            String rowConcatenatd = String.Empty, _currency = String.Empty;

            try
            {
                HtmlNode totalPrice = null;
                HtmlNodeCollection unitPrice = null;

                JObject _extractFoundValues = JObject.Parse(doc.DocumentNode.InnerHtml);

                JArray _priceNode = (JArray)_extractFoundValues["result"]["Order"]["totalPrice"];

                if (_priceNode != null)
                {
                    String _price = ((JValue)_priceNode[0]).Value.ToString();
                    _currency = ((JValue)_priceNode[1]).Value.ToString();

                    this.TotalPrice = _price.Insert(_price.Length - 2, ".") + " " + _currency;
                }

                try
                {
                    if (this.doc.DocumentNode.InnerText.ToLower().Contains("service charge") || this.doc.DocumentNode.InnerText.ToLower().Contains("convenience fee"))
                    {
                        unitprice = (Convert.ToInt32(this.UnitPrice[0]) + Convert.ToInt32(this.UnitPrice[1]) + Convert.ToInt32(this.UnitPrice[2])).ToString();
                    }
                    else
                    {
                        unitprice = (Convert.ToInt32(this.UnitPrice[0]) + Convert.ToInt32(this.UnitPrice[1])).ToString();
                    }

                    JArray order = (JArray)_extractFoundValues["result"]["Order"]["pUnits"];
                    int x = 0;

                    foreach (var _item in order)
                    {
                        try
                        {
                            if (_item["purchaseUnit"] != null)
                            {
                                foreach (var item in _item["items"])
                                {
                                    if (item["label"] == null)
                                    {
                                        if (item["quantity"] != null)
                                        {
                                            if (Convert.ToInt32(item["quantity"]) > 0)
                                            {
                                                int qty = Convert.ToInt32(item["quantity"]);
                                                JArray _unitPrice = (JArray)item["unitPrice"];
                                                x += Convert.ToInt32(_unitPrice[0]) * qty;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        { }
                    }
                    unitprice = x.ToString();//(Convert.ToInt32(unitprice) + x).ToString();
                }
                catch
                {
                }

                try
                {
                    this.TotalPrice = (unitprice).ToString();//(int.Parse(unitprice) + Tax).ToString();
                    this.TotalPrice = this.TotalPrice.Insert(this.TotalPrice.Length - 2, ".") + " " + _currency;
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                }
                /******************************************************/
                //Parse the cart
                /******************************************************/
                if (_priceNode != null)
                {
                    string PriceReplace = this.TotalPrice.Replace(" USD", "").Replace(" GBP", "").Replace("CAD", "").Replace("SEK", "");
                    decimal price = Convert.ToDecimal(PriceReplace);
                    if (this.TotalPrice.Contains("USD"))
                    {
                        this.Price = price.ToString() + " USD";
                    }
                    else if (this.TotalPrice.Contains("GBP"))
                    {
                        this.Price = price.ToString() + " GBP";
                    }
                    else if (this.TotalPrice.Contains("CAD"))
                    {
                        this.Price = price.ToString() + " CAD";
                    }
                    else if (this.TotalPrice.Contains("SEK"))
                    {
                        this.Price = price.ToString() + " SEK";
                    }

                    timeToExpire = _extractFoundValues["result"]["lockttl"].ToString();

                    //timeToExpire = doc.DocumentNode.SelectSingleNode("//member/name[text() = 'lockttl']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                    HtmlAgilityPack.HtmlDocument hdoc = new HtmlAgilityPack.HtmlDocument();



                    //hdoc.LoadHtml(doc.DocumentNode.SelectSingleNode("//member/name[text() = 'seats']").ParentNode.OuterHtml);
                    this.Quantity = this._CurrentParameter.Quantity.ToString();
                    //for (int i = Convert.ToInt32(this._CurrentParameter.Quantity); i >= 1; i--)
                    {
                        if (_extractFoundValues["result"]["locks"] != null)
                        {
                            JArray _seats = (JArray)_extractFoundValues["result"]["locks"];

                            JObject _selections = (JObject)_seats[0]["selections"];

                            if (_selections != null)
                            {
                                try
                                {
                                    if (_selections != null)
                                    {
                                        JArray _ob = (JArray)_selections["0"]["seats"];

                                        foreach (JToken item in _ob)
                                        {
                                            try
                                            {
                                                JArray __result = (JArray)item;

                                                string section = __result[3].ToString();

                                                if (!this.Section.Contains(section))
                                                {
                                                    this.Section = __result[3].ToString();
                                                }

                                                try
                                                {
                                                    string row = __result[4].ToString();

                                                    if (!this.Row.Contains(row))
                                                    {
                                                        this.Row = __result[4].ToString();
                                                    }

                                                }
                                                catch (Exception)
                                                {

                                                }

                                                try
                                                {
                                                    this.Seat += __result[5].ToString() + ",";
                                                }
                                                catch (Exception ex)
                                                {

                                                }
                                            }
                                            catch (Exception)
                                            {

                                            }

                                        }
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                            }
                        }
                        else
                        {
                            changeStatus("Seats Not Available");
                            lock (this.Ticket)
                            {
                                this.Ticket.SoldoutCount++;
                            }
                            if (this.Ticket.onNotFound != null)
                            {
                                this.Ticket.onNotFound(this.Ticket);
                            }
                            this.retrying();
                            result = false;
                            return result;
                        }

                        if (this.IfWorking && this.Ticket.isRunning)
                        {
                            lock (this.Ticket)
                            {
                                this.Ticket.FoundCount++;
                            }

                            if (!this.qualifies())
                            {
                                this.IfFound = false;
                                this.MoreInfo = "Found Row: " + this.Row + ", Section: " + this.Section + ". " + TicketSearchStatus.MoreInfoCriteriaDoesNotMatch;
                                changeStatus(TicketSearchStatus.FoundCriteriaDoesNotMatch);
                                if (this.Ticket.onNotFound != null)
                                {
                                    this.Ticket.onNotFound(this.Ticket);
                                }
                                result = false;
                                return result;
                            }


                        }

                        changeStatus(TicketSearchStatus.FoundPageStatus);
                        this.IfFound = true;
                        this.Ticket.Email.sendFoundEmail(this);

                        if (this.Ticket.onFound != null)
                        {
                            this.Ticket.onFound(this.Ticket);
                        }
                    }

                    if (!string.IsNullOrEmpty(rowConcatenatd))
                    {
                        this.Row = rowConcatenatd.Remove(0, 1);
                    }

                    HtmlAgilityPack.HtmlDocument newdoc = new HtmlAgilityPack.HtmlDocument();

                    String postdata = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.getMoreTimeAll\",\"params\":[\"" + this.SessionKey + "\"],\"id\":1}";
                    newdoc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/"), postdata));

                    JObject _timer = JObject.Parse(newdoc.DocumentNode.InnerText.Trim());

                    timeToExpire = _timer["result"].ToString();

                    int l = this.Seat.Length;
                    if (l > 0)
                    {
                        this.Seat = this.Seat.TrimEnd(',');//this.Seat.Substring(0, (l - 1));
                    }

                    this.currLog.Section = this.Section;
                    this.currLog.Seat = this.Seat;
                    this.currLog.Row = this.Row;
                    this.currLog.Price = this.Price;
                    this.currLog.FoundDateTime = System.DateTime.Now;

                    if (this.Ticket.ifAutoBuy)
                    {
                        this.IfAutoBuy = true;
                        if (this.Ticket.ifAutoBuyWitoutProxy)
                        {
                            if (this._proxy != null)
                            {

                                if (this._proxy.TheProxyType != Core.Proxy.ProxyType.Relay)
                                {
                                    if (ProxyPicker.ProxyPickerInstance.ProxyManager != null)
                                    {
                                        ProxyPicker.ProxyPickerInstance.ProxyManager.ReleaseProxy(this._proxy);
                                    }
                                }
                                else
                                {
                                    if (ProxyPicker.ProxyPickerInstance.ProxyRelayManager != null)
                                    {
                                        #region Release Session from Server

                                        ClearSessionFromServer();

                                        #endregion

                                        ProxyPicker.ProxyPickerInstance.ProxyRelayManager.ReleaseProxy(this._proxy);
                                    }
                                }
                            }
                            this._proxy = null;

                        }
                    }
                    else
                    {
                        result = false;
                    }

                    if (this.Ticket.ifPlaySoundAlert == true && this.Status == TicketSearchStatus.FoundPageStatus)
                    {
                        this.Ticket.SoundAlert.Play();
                    }

                    if (!GoodProxies._goodProxyList.Contains(_proxy))
                    {
                        GoodProxies._goodProxyList.Add(_proxy);
                    }

                    if (_CurrentParameter != null)
                    {
                        _CurrentParameter.IfFound = true;
                    }

                    this.processTimer(TicketSearchStatus.FoundPageStatus);
                    result = true;
                }
                else
                {
                    changeStatus("Seats Not Available");
                    lock (this.Ticket)
                    {
                        this.Ticket.SoldoutCount++;
                    }

                    if (this.Ticket.onFound != null)
                    {
                        this.Ticket.onFound(this.Ticket);
                    }
                    result = false;
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return result;
        }

        Dictionary<string, string> DeliveryOptions = new Dictionary<string, string>();

        protected Boolean processDeliveryPage()
        {
            Boolean result = false;
            try
            {
                String strHTML = String.Empty;
                DeliveryOptions = new Dictionary<string, string>();

                this.processRefreshPage();

                List<string> countryWiseDeliveryOptions = extractDeliveryOptions();

                if (countryWiseDeliveryOptions != null && this.IfAutoBuy)
                {
                    changeStatus(TicketSearchStatus.DeliveryPageStatus);
                    this.Ticket.DeliveryOption = "";

                    AXSTicket tick = (AXSTicket)this.Ticket;
                    if (!tick.IfSelectDeliveryWindowOpen)
                    {
                        tick.IfSelectDeliveryWindowOpen = true;
                        _frmSelectDO = new frmSelectDeliveryOption(countryWiseDeliveryOptions, this.Ticket, this, DeliveryOptions);
                        _frmSelectDO.ShowDialog();
                        tick.IfSelectDeliveryWindowOpen = false;
                        _frmSelectDO.Dispose();
                        _frmSelectDO = null;
                    }
                    else
                    {
                        while (String.IsNullOrEmpty(this.Ticket.DeliveryOption) && tick.IfSelectDeliveryWindowOpen)
                        {
                            if ((!this.IfWorking || !this.Ticket.isRunning))
                            {
                                break;
                            }
                            Thread.Sleep(500);
                        }
                    }
                    selectDeliveryOption(countryWiseDeliveryOptions, this.Ticket);

                    result = true;
                }
                else
                {
                    result = false;
                }
            }
            catch (Exception ex)
            {
                //  Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
                result = false;
            }

            return result;
        }

        protected Boolean processTixDeliveryPage()
        {
            Boolean result = false;
            try
            {
                String strHTML = String.Empty;
                DeliveryOptions = new Dictionary<string, string>();

                this.processRefreshPage();

                List<string> countryWiseDeliveryOptions = extractTixDeliveryOptions();

                if (countryWiseDeliveryOptions != null && this.IfAutoBuy)
                {
                    changeStatus(TicketSearchStatus.DeliveryPageStatus);
                    // this.Ticket.DeliveryOption = "";

                    selectDeliveryOption(countryWiseDeliveryOptions, this.Ticket);

                    if (!String.IsNullOrEmpty(this._SelectedDeliveryOption))
                    {
                        Delivery = new AXSDeliveryOption();
                        var key = DeliveryOptions.FirstOrDefault(pred => pred.Key.Equals(this._SelectedDeliveryOption));

                        Delivery.DeliveryOptionId = key.Value;
                        Delivery.DeliveryOption = key.Key;

                        this._session.Payload = "{\"selections\":[{\"offerID\":\"" + this.offerID + "\",\"eventID\":\"" + this.eventID + "\",\"deliveryMethodID\":\"" + Delivery.DeliveryOptionId + "\"}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":false}";

                        String strhtml = String.Empty;

                        if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                        {
                            if (countryWiseDeliveryOptions != null && countryWiseDeliveryOptions.Count == 1)
                            {
                                return true;
                            }
                            else
                            {
                                //BrowserSession sessClone = (BrowserSession)Session.Clone();
                               // strhtml = this._session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);

                                if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                                {
                                    strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);
                                }
                                else
                                {
                                    strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl + "&locale=en-US&checkPriceChange=true");
                                }

                                if (strhtml.Contains("Service is unavailable"))
                                {

                                }
                            }
                        }
                        else
                        {
                            //strhtml = this._session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);

                            if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                            {
                                strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);
                            }
                            else
                            {
                                strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl + "&locale=en-US&checkPriceChange=true");
                            }
                        }


                        JObject _extractFoundValues = JObject.Parse(this.Session.HtmlDocument.DocumentNode.InnerText);

                        _extractFoundValues = (JObject)_extractFoundValues["cart"];

                        JArray _priceNode = (JArray)_extractFoundValues["selections"];

                        String _currency = String.Empty;

                        if (_priceNode != null)
                        {
                            String _price = ((JValue)_priceNode[0]["priceTotal"]).Value.ToString();

                            try
                            {
                                _currency = selectedPrices.Currency;

                                this.TotalPrice = _price.Insert(_price.Length - 2, ".") + " " + _currency;
                            }
                            catch
                            {
                                this.TotalPrice = _price.Insert(_price.Length - 2, ".");
                            }
                        }

                        try
                        {
                            JArray order = (JArray)_extractFoundValues["fees"];
                            int x = 0;

                            foreach (var _item in order)
                            {
                                try
                                {
                                    //if (_item["unitPrice"] != null)
                                    {
                                        //foreach (var item in _item["items"])
                                        {
                                            //if (_item["label"] == null)
                                            {
                                                if (_item["quantity"] != null)
                                                {
                                                    if (Convert.ToInt32(_item["quantity"]) > 0)
                                                    {
                                                        int qty = Convert.ToInt32(_item["quantity"]);
                                                        JValue _unitPrice = (JValue)_item["unitPrice"];
                                                        x += Convert.ToInt32(_unitPrice) * qty;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                { }
                            }
                            unitprice = x.ToString();//(Convert.ToInt32(unitprice) + x).ToString();
                        }
                        catch
                        {
                        }

                        try
                        {
                            this.TotalPrice = (Convert.ToInt32(this.TotalPrice.Replace(_currency, String.Empty).Replace(".", String.Empty).Trim()) + Convert.ToInt32(unitprice)).ToString();//(int.Parse(unitprice) + Tax).ToString();
                            this.TotalPrice = this.TotalPrice.Insert(this.TotalPrice.Length - 2, ".") + " " + _currency;
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine(ex.Message);
                        }

                        string PriceReplace = this.TotalPrice.Replace(" USD", "").Replace(" GBP", "").Replace("CAD", "").Replace("SEK", "");
                        decimal price = Convert.ToDecimal(PriceReplace);
                        if (this.TotalPrice.Contains("USD"))
                        {
                            this.Price = price.ToString() + " USD";
                        }
                        else if (this.TotalPrice.Contains("GBP"))
                        {
                            this.Price = price.ToString() + " GBP";
                        }
                        else if (this.TotalPrice.Contains("CAD"))
                        {
                            this.Price = price.ToString() + " CAD";
                        }
                        else if (this.TotalPrice.Contains("SEK"))
                        {
                            this.Price = price.ToString() + " SEK";
                        }

                        this.Session.Payload = "{\"nextPage\":\"shop__signup-page\"}";

                        if (this.Ticket.IsUkEvent)//if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                        {
                            strhtml = Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/update-timer?onsaleID=" + this.OnSaleUrl);
                        }
                        else
                        {
                            strhtml = Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/update-timer?onsaleID=" + this.OnSaleUrl);
                        }
                        result = true;
                    }
                    else
                    {
                        this.MoreInfo = "Delivery does not match.";
                        result = false;
                    }
                }
                else
                {
                    result = false;
                }
            }
            catch (Exception ex)
            {
                //  Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
                result = false;
            }

            return result;
        }

        protected Boolean processMobileDeliveryPage()
        {
            Boolean result = false;
            try
            {
                #region old
                String strHTML = String.Empty;
                {
                    changeStatus(TicketSearchStatus.DeliveryPageStatus);

                    Dictionary<String, HtmlNode> deliveryOptions = extractMobileDeliveryOptions();
                    HtmlNode selectedDeliveryOption = null;

                    selectedDeliveryOption = selectMobileDeliveryOption(deliveryOptions);

                    if (selectedDeliveryOption == null && this.IfAutoBuy)
                    {
                        this.Ticket.DeliveryOption = "";
                        selectedDeliveryOption = askMobileDeliveryOptionWhenEmpty(deliveryOptions);
                    }

                    if (selectedDeliveryOption != null && this.IfWorking && this.Ticket.isRunning)
                    {
                        //form element for Ticket Quantity 
                        decimal TicketTypeAmount = 0;
                        bool flag = false;

                        if (this.Session.FormElements.ContainsKey(selectedDeliveryOption.Attributes["value"].Value))
                        {
                            this.Session.FormElements[selectedDeliveryOption.Attributes["value"].Value] = "1";
                        }

                        HtmlNode nodeQuantity = _session.HtmlDocument.DocumentNode.SelectSingleNode("//input[@name='item-1-1']");
                        if (nodeQuantity != null)
                        {
                            if (!string.IsNullOrEmpty(_CurrentParameter.TicketType))
                            {
                                this.MoreInfo = TicketSearchStatus.MoreInfoNoTicketTypeString;
                                result = false;
                                return result;
                            }

                            this._session.FormElements["item-1-1"] = nodeQuantity.Attributes["value"].Value;
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(_CurrentParameter.TicketType))
                            {
                                HtmlNodeCollection nodeTicketTypes = _session.HtmlDocument.DocumentNode.SelectNodes("//label[@class='select']");
                                foreach (HtmlNode ticketItem in nodeTicketTypes)
                                {
                                    if (ticketItem.InnerText.ToLower().Contains(_CurrentParameter.TicketType.ToLower()))
                                    {
                                        flag = true;
                                        break;
                                    }
                                }

                                if (flag)
                                {
                                    if (!String.IsNullOrEmpty(this._CurrentParameter.TicketType))
                                    {
                                        this.MoreInfo += ", TicketType:" + this._CurrentParameter.TicketType;
                                    }

                                    //Adult
                                    if (this._session.FormElements.ContainsKey("item-1-1"))
                                        TicketTypeAmount += getMobileTicketTypePrice("item-1-1");

                                    //Senior
                                    if (this._session.FormElements.ContainsKey("item-1-3"))
                                        TicketTypeAmount += getMobileTicketTypePrice("item-1-3");

                                    //Youth
                                    if (this._session.FormElements.ContainsKey("item-1-2"))
                                        TicketTypeAmount += getMobileTicketTypePrice("item-1-2");
                                }
                                else
                                {
                                    this.MoreInfo = TicketSearchStatus.MoreInfoTicketTypeStringNotMatch;
                                    result = false;
                                    return result;
                                }
                            }
                        }


                        decimal priceDonation = 0;
                        //Form Elements if there is Donations
                        if (this._session.FormElements.ContainsKey("item-2-10"))
                            priceDonation += getMobileDonationPrice("item-2-10");

                        if (this._session.FormElements.ContainsKey("item-3-11"))
                            priceDonation += getMobileDonationPrice("item-3-11");

                        if (this._session.FormElements.ContainsKey("item-4-12"))
                            priceDonation += getMobileDonationPrice("item-4-12");

                        if (this._session.FormElements.ContainsKey("item-2-9"))
                            priceDonation += getMobileDonationPrice("item-2-9");

                        if (this._session.FormElements.ContainsKey("item-3-10"))
                            priceDonation += getMobileDonationPrice("item-3-10");

                        if (this._session.FormElements.ContainsKey("item-4-11"))
                            priceDonation += getMobileDonationPrice("item-4-11");

                        this._session.FormElements["dvf"] = selectedDeliveryOption.Attributes["value"].Value;
                        try
                        {
                            string forDAmount = string.Empty;

                            forDAmount = selectedDeliveryOption.Attributes["jsPrice"].Value;

                            string deliveryAmount = forDAmount.Trim();

                            if (flag)
                            {
                                HtmlNode nodeAmount = _session.HtmlDocument.DocumentNode.SelectSingleNode("//input[@name='amount']");
                                string actualAmount = nodeAmount != null ? nodeAmount.Attributes["value"].Value.Trim() : "";
                                decimal totalAmount = Convert.ToDecimal(actualAmount) + Convert.ToDecimal(deliveryAmount) - priceDonation - Convert.ToDecimal(this.Price) + TicketTypeAmount - Convert.ToDecimal(deductedAmount);
                                this.Price = TicketTypeAmount.ToString();
                                this._session.FormElements["amount"] = Convert.ToString(totalAmount);
                                this._session.FormElements["intAmount"] = Convert.ToString(totalAmount).Replace(".", "");
                            }
                            else
                            {
                                HtmlNode nodeAmount = _session.HtmlDocument.DocumentNode.SelectSingleNode("//input[@name='amount']");
                                string actualAmount = nodeAmount != null ? nodeAmount.Attributes["value"].Value.Trim() : "";
                                decimal totalAmount = Convert.ToDecimal(actualAmount) + Convert.ToDecimal(deliveryAmount) - priceDonation - Convert.ToDecimal(deductedAmount);
                                this._session.FormElements["amount"] = Convert.ToString(totalAmount);
                                this._session.FormElements["intAmount"] = Convert.ToString(totalAmount).Replace(".", "");
                            }
                        }
                        catch
                        {
                            result = false;
                            return result;
                        }
                        result = true;
                    }
                    else
                    {
                        if (this.IfWorking)
                        {
                            this.MoreInfo = TicketSearchStatus.MoreInfoDeliveryOptionDoesNotMatch;
                        }

                        result = false;
                    }
                }
                #endregion
            }
            catch (Exception)
            {
                result = false;
            }

            return result;
        }

        private decimal getMobileDonationPrice(string donateElement)
        {
            decimal donatePrice = 0;

            try
            {
                HtmlNode nodeDonation = _session.HtmlDocument.DocumentNode.SelectSingleNode("//select[@name='" + donateElement + "']/option[@selected]");
                string valueDonate = nodeDonation != null ? nodeDonation.Attributes["value"].Value : "";

                if (!string.IsNullOrEmpty(valueDonate) && valueDonate != "0")
                {
                    string temp = string.Empty;

                    if (nodeDonation.NextSibling.InnerText.Contains("$"))
                        temp = nodeDonation.NextSibling.InnerText.Substring(nodeDonation.NextSibling.InnerText.IndexOf('$') + 1).Replace("\n", "").Replace(")", "").Trim();

                    else if (nodeDonation.NextSibling.InnerText.Contains("£"))
                        temp = nodeDonation.NextSibling.InnerText.Substring(nodeDonation.NextSibling.InnerText.IndexOf('£') + 1).Replace("\n", "").Replace(")", "").Trim();

                    donatePrice = Convert.ToDecimal(temp);
                }

                this._session.FormElements[donateElement] = "0";
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }

            return donatePrice;
        }

        private decimal getMobileTicketTypePrice(string ticketTypeElement)
        {
            decimal ticketTypePrice = 0;
            string tickeType = string.Empty;

            try
            {
                HtmlNode nodeQuantity = _session.HtmlDocument.DocumentNode.SelectSingleNode("//select[@name='" + ticketTypeElement + "']/option[@value='1']");
                // string valueDonate = nodeQuantity != null ? nodeQuantity.Attributes["value"].Value : "";
                //if (valueDonate != "0")
                //{
                //}

                if (nodeQuantity != null && !string.IsNullOrEmpty(_CurrentParameter.TicketType))
                {
                    if (nodeQuantity.ParentNode.ParentNode.Name.Contains("li"))
                        tickeType = nodeQuantity.ParentNode.ParentNode.InnerText.Remove(nodeQuantity.ParentNode.ParentNode.InnerText.IndexOf(":")).Replace("\n", "").Trim();

                    if (tickeType.ToLower().Contains(_CurrentParameter.TicketType.ToLower()))
                    {
                        string temp = string.Empty;

                        if (nodeQuantity.NextSibling.InnerText.Contains("$"))
                            temp = nodeQuantity.NextSibling.InnerText.Substring(nodeQuantity.NextSibling.InnerText.IndexOf('$') + 1).Replace("\n", "").Replace(")", "").Trim();

                        else if (nodeQuantity.NextSibling.InnerText.Contains("£"))
                            temp = nodeQuantity.NextSibling.InnerText.Substring(nodeQuantity.NextSibling.InnerText.IndexOf('£') + 1).Replace("\n", "").Replace(")", "").Trim();

                        this._session.FormElements[ticketTypeElement] = _CurrentParameter.Quantity.ToString();

                        ticketTypePrice = Convert.ToDecimal(temp);
                    }
                    else
                        this._session.FormElements[ticketTypeElement] = "0";

                }
                else
                    this._session.FormElements[ticketTypeElement] = nodeQuantity != null ? nodeQuantity.Attributes["value"].Value : "0";


            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }

            return ticketTypePrice;
        }

        private HtmlNode selectMobileDeliveryOption(Dictionary<String, HtmlNode> deliveryOptions)
        {
            HtmlNode selectedDeliveryOption = null;
            try
            {
                if (this.Ticket.ifSelectDeliveryOptionAutoBuying)
                {
                    {
                        selectedDeliveryOption = askMobileDeliveryOptionWhenEmpty(deliveryOptions);
                    }
                }
                else
                {
                    if (this.Ticket.SelectedDeliveryOptions != null)
                    {
                        IEnumerable<AXSDeliveryOption> selectedDeliveryOptions = this.Ticket.SelectedDeliveryOptions.Where(p => p.IfSelected == true);
                        string option = string.Empty;
                        foreach (AXSDeliveryOption dopt in selectedDeliveryOptions)
                        {
                            if (deliveryOptions.Keys.Contains(dopt.DeliveryOption))
                            {
                                option = dopt.DeliveryOption;
                                break;
                            }
                        }
                        if (!string.IsNullOrEmpty(option))
                            selectedDeliveryOption = deliveryOptions[option];

                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }

            return selectedDeliveryOption;
        }

        private HtmlNode askMobileDeliveryOptionWhenEmpty(Dictionary<String, HtmlNode> deliveryOptions)
        {
            HtmlNode selectedDeliveryOption = null;
            //if (this.IfAutoBuy && (String.IsNullOrEmpty(this.Ticket.DeliveryOption) || String.IsNullOrEmpty(this.Ticket.DeliveryCountry)))

            try
            {
                if (String.IsNullOrEmpty(this.Ticket.DeliveryOption))
                {
                    AXSTicket tick = (AXSTicket)this.Ticket;
                    if (!tick.IfSelectDeliveryWindowOpen)
                    {
                        ITicketDeliveryOption _selectedDeliveryOption = null;
                        tick.IfSelectDeliveryWindowOpen = true;
                        _frmSelectDO = new frmSelectDeliveryOption(deliveryOptions, this.Ticket, this);
                        //_frmSelectDO.ShowDialog();
                        _selectedDeliveryOption = _frmSelectDO.promptDeliveryOption();
                        _frmSelectDO.ShowDialog();
                        tick.IfSelectDeliveryWindowOpen = false;
                        _frmSelectDO.Dispose();
                        _frmSelectDO = null;
                        if (_selectedDeliveryOption != null)
                        {
                            this.Ticket.DeliveryOption = _selectedDeliveryOption.DeliveryOption;
                        }
                    }
                    else
                    {
                        while (String.IsNullOrEmpty(this.Ticket.DeliveryOption) && tick.IfSelectDeliveryWindowOpen)
                        {
                            if ((!this.IfWorking || !this.Ticket.isRunning))
                            {
                                break;
                            }
                            Thread.Sleep(500);
                            //sleep(500);

                        }
                    }
                }

                if (!string.IsNullOrEmpty(this.Ticket.DeliveryOption))
                {
                    foreach (KeyValuePair<String, HtmlNode> item in deliveryOptions)
                    {
                        if (item.Key.ToLower().Contains(this.Ticket.DeliveryOption.ToLower()))
                        {
                            selectedDeliveryOption = item.Value;
                            break;

                        }
                        if (selectedDeliveryOption != null)
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }
            return selectedDeliveryOption;
        }

        String deductedAmount = String.Empty;

        private Dictionary<String, HtmlNode> extractMobileDeliveryOptions()
        {
            Dictionary<String, HtmlNode> dOptions = new Dictionary<String, HtmlNode>();
            try
            {
                HtmlNodeCollection nodeDelivary = this._session.HtmlDocument.DocumentNode.SelectNodes("//select[@id='dvf']/option");
                foreach (HtmlNode options in nodeDelivary)
                {
                    if (options.Attributes.Contains("desc"))
                    {
                        string dDiscription = options.Attributes["desc"].Value;
                        dOptions.Add(dDiscription, options);

                        if (!this._session.FormElements.ContainsKey(options.Attributes["value"].Value))
                        {
                            this._session.FormElements.Add(options.Attributes["value"].Value, "0");

                            if (options.Attributes["quantity"].Value == "1")
                            {
                                deductedAmount = options.Attributes["jsprice"].Value;
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                dOptions = null;
            }

            return dOptions;
        }

        protected Boolean processRefreshPage()
        {
            Boolean result = false;

            try
            {
                changeStatus(TicketSearchStatus.RefreshPageStatus);

                int wait = 1;
                //Don't delete the code below ************************
                //int wait = 4;                        
                //mRefresh = Regex.Match(this._session.HtmlDocument.DocumentNode.InnerHtml, "http-equiv=\"refresh\"(\\s+)content=\"(\\d+);", RegexOptions.IgnoreCase);
                //if (mRefresh.Success)
                //{
                //    mRefresh = Regex.Match(mRefresh.Value, "\\d+");
                //    if (mRefresh.Success)
                //    {
                //        wait = int.Parse(mRefresh.Value);
                //    }
                //}

                DateTime dateTimeFound = DateTime.Now;
                TimeSpan ts = dateTimeFound.AddSeconds(wait) - dateTimeFound;

                while (ts.TotalSeconds > 1 && this.IfWorking && this.Ticket.isRunning)
                {
                    ts = ts.Subtract(new TimeSpan(0, 0, 1));
                    System.Threading.Thread.Sleep(1000);
                    changeStatus(TicketSearchStatus.RefreshPageStatus);
                }



                //




                if (this.IfWorking && this.Ticket.isRunning)
                {
                    result = true;
                }
                else
                {
                    result = false;
                }
            }
            catch (Exception ex)
            {
                result = false;

                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }
            return result;
        }

        private DateTime epoch2string(double epoch)
        {
            return new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddMilliseconds(epoch);
        }

        private void processTixTimer(String statusMessage)
        {
            try
            {
                //int expirationTimeInSeconds = Convert.ToInt32(timeToExpire);

                DateTime dateTimeFound = DateTime.Now;
                DateTime dt = epoch2string(double.Parse(timeToExpire)).ToLocalTime();
                TimeSpan ts = dt - dateTimeFound;
                try
                {
                    this.TimeLeft = ts.ToString().Remove(0, 3);
                }
                catch
                {
                    this.TimeLeft = String.Format("{0}:{1}", System.Math.Truncate(ts.TotalMinutes).ToString(), System.Math.Truncate(Convert.ToDouble(ts.Seconds)).ToString());

                }

                while (ts.TotalSeconds > 1 && this.IfWorking && this.Ticket.isRunning && !this.IfAutoBuy)
                {
                    ts = ts.Subtract(new TimeSpan(0, 0, 1));
                    System.Threading.Thread.Sleep(1000);
                    try
                    {
                        this.TimeLeft = String.Format("{0}:{1}", System.Math.Truncate(ts.TotalMinutes).ToString(), System.Math.Truncate(Convert.ToDouble(ts.Seconds)).ToString());
                    }
                    catch
                    {
                        this.TimeLeft = String.Format("{0}:{1}", System.Math.Truncate(ts.TotalMinutes).ToString(), System.Math.Truncate(Convert.ToDouble(ts.Seconds)).ToString());

                    }
                    if (this.IfWorking)
                    {
                        changeStatus(statusMessage);
                    }
                }

                if (this.IfAutoBuy)
                {
                    this.MoreInfo = TicketSearchStatus.MoreInfoBuyingInProgress;
                    changeStatus(statusMessage);
                }
                this.TimeLeft = String.Empty;
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }

        private void processTimer(String statusMessage)
        {
            try
            {
                int expirationTimeInSeconds = Convert.ToInt32(timeToExpire);

                if (String.IsNullOrEmpty(timeToExpire))
                {
                    expirationTimeInSeconds = 170;
                    Regex.CacheSize = 0;
                    Match timeLeftMatch = Regex.Match(this._session.HtmlDocument.DocumentNode.InnerHtml, "time_left:(\\s)*(\\d)+(\\s)*}", RegexOptions.IgnoreCase);
                    if (timeLeftMatch.Success)
                    {
                        String strExpiryTime = Regex.Replace(timeLeftMatch.Value, "time_left:(\\s)*", "");
                        strExpiryTime = Regex.Replace(strExpiryTime, "(\\s)*}", "");
                        if (!String.IsNullOrEmpty(strExpiryTime))
                        {
                            int.TryParse(strExpiryTime, out expirationTimeInSeconds);
                        }
                        expirationTimeInSeconds = expirationTimeInSeconds - 14;
                    }
                }

                DateTime dateTimeFound = DateTime.Now;
                TimeSpan ts = dateTimeFound.AddSeconds(expirationTimeInSeconds) - dateTimeFound;
                try
                {
                    this.TimeLeft = ts.ToString().Remove(0, 3);
                }
                catch
                {
                    this.TimeLeft = String.Format("{0}:{1}", System.Math.Truncate(ts.TotalMinutes).ToString(), System.Math.Truncate(Convert.ToDouble(ts.Seconds)).ToString());

                }

                while (ts.TotalSeconds > 1 && this.IfWorking && this.Ticket.isRunning && !this.IfAutoBuy)
                {
                    ts = ts.Subtract(new TimeSpan(0, 0, 1));
                    System.Threading.Thread.Sleep(1000);
                    try
                    {
                        this.TimeLeft = ts.ToString().Remove(0, 3);
                    }
                    catch
                    {
                        this.TimeLeft = String.Format("{0}:{1}", System.Math.Truncate(ts.TotalMinutes).ToString(), System.Math.Truncate(Convert.ToDouble(ts.Seconds)).ToString());

                    }
                    changeStatus(statusMessage);
                }

                if (this.IfAutoBuy)
                {
                    this.MoreInfo = TicketSearchStatus.MoreInfoBuyingInProgress;
                    changeStatus(statusMessage);
                }
                this.TimeLeft = String.Empty;
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }

        ApplicationStartUp appStartup = new ApplicationStartUp(Application.StartupPath);
        Dictionary<String, String> _deliveryCost = null;

        void processAutoBuyPage()
        {
            try
            {
                if (this.IfAutoBuy && this.IfWorking && this.Ticket.isRunning)
                {
                    this._selectedAccountForAutoBuy = null;

                    lock (this.Ticket)
                    {
                        if (this.Ticket.BuyHistory == null)
                        {
                            this.Ticket.BuyHistory = new Dictionary<String, int>();
                        }
                    }

                    this._selectedAccountForAutoBuy = this.selectTicketAccount();

                    if (this._selectedAccountForAutoBuy != null && this.IfWorking && this.Ticket.isRunning)
                    {
                        this.currLog.Account = (this._selectedAccountForAutoBuy != null) ? this._selectedAccountForAutoBuy.EmailAddress : "";

                        HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                        XmlDocument xDoc = new XmlDocument();
                        try
                        {

                            this.MoreInfo = "Buying: " + this._selectedAccountForAutoBuy.EmailAddress;
                            string pmCode = String.Empty;
                            string cardTypeNum = string.Empty;
                            string country = string.Empty;
                            string state = string.Empty;
                            JObject paymentObject = null;

                            if (!this.isGuest)
                            {
                                #region axs
                                this.AuthorizarionHeader = "Basic " + Convert.ToBase64String(Encoding.UTF8.GetBytes(this._selectedAccountForAutoBuy.EmailAddress + ":" + this._selectedAccountForAutoBuy.Password));

                                String url = "https://api.axs.com/proxy/v2/users/1/axsid/" + this._selectedAccountForAutoBuy.EmailAddress.Replace("@", "%40") + "/authenticate?access_token=" + this.AccessToken + "&client_id=" + this.Client_ID + "&client_secret=" + this.Client_Secret;

                                String response = AXSEvent.get(this, url);
                                this.AccessToken = String.Empty;

                                if (!String.IsNullOrEmpty(response))
                                {
                                    JObject obj = JObject.Parse(response);

                                    if (obj.Property("oauth") != null)
                                    {
                                        JObject oauth = (JObject)obj["oauth"];

                                        if (oauth.Property("access_token") != null)
                                        {
                                            this.AccessToken = Convert.ToString(oauth["access_token"]);
                                        }
                                    }
                                }

                                if (!String.IsNullOrEmpty(this.AccessToken))
                                {
                                    response = AXSEvent.get(this, "https://api.axs.com/v2/users/undefined/axsid/" + this._selectedAccountForAutoBuy.EmailAddress.Replace("@", "%40") + "?access_token=" + this.AccessToken);

                                    this.AuthorizarionHeader = String.Empty;

                                    if (!String.IsNullOrEmpty(response))
                                    {
                                        JObject obj = JObject.Parse(response);

                                        if (obj.Property("id") != null)
                                        {
                                            this.extCustId = Convert.ToString(obj["id"]);
                                        }

                                        if (obj.Property("payments") != null)
                                        {
                                            JArray payment = (JArray)obj["payments"];
                                            Boolean isMatched = false;

                                            String lastFourDigits = String.Empty;

                                            if (this._selectedAccountForAutoBuy.GroupName.Equals("login"))
                                            {
                                                lastFourDigits = this._selectedAccountForAutoBuy.CardLastDigits;
                                            }
                                            else
                                            {
                                                lastFourDigits = this._selectedAccountForAutoBuy.CardNumber.Remove(0, this._selectedAccountForAutoBuy.CardNumber.Length - 4);
                                            }

                                            foreach (JObject item in payment)
                                            {
                                                String last_4 = Convert.ToString(item["cc_last_four"]);

                                                if (last_4.Equals(lastFourDigits))
                                                {
                                                    paymentObject = item;
                                                    isMatched = true;
                                                    break;
                                                }
                                            }

                                            if (!isMatched)
                                            {
                                                this.MoreInfo = "No card details matched.";
                                                this.currLog.MoreInfo = this.MoreInfo;
                                                this.currLog.BuyStatus = TicketsLog.NotBuyStatus;

                                                return;
                                            }
                                        }
                                        else
                                        {
                                            this.MoreInfo = "Please add payment info into your account.";
                                            this.currLog.MoreInfo = this.MoreInfo;
                                            this.currLog.BuyStatus = TicketsLog.NotBuyStatus;

                                            return;
                                        }
                                    }
                                }
                                else
                                {
                                    this.MoreInfo = "Error.";
                                    return;
                                }
                                #endregion
                            }
                            else
                            {
                                //if (this.SkipAsGuest)
                                {
                                    foreach (KeyValuePair<String, String> item in this.appStartup.Countries)
                                    {
                                        if (this._selectedAccountForAutoBuy.Country.ToLower().Trim() == item.Value.ToLower().Trim())
                                        {
                                            country = item.Key;
                                            break;
                                        }
                                    }
                                    if (this._selectedAccountForAutoBuy.Country.ToLower().Trim() == "canada")
                                    {
                                        foreach (KeyValuePair<String, String> item in this.appStartup._Canada_States)
                                        {
                                            if (this._selectedAccountForAutoBuy.State.ToLower().Trim() == item.Value.ToLower().Trim())
                                            {
                                                state = item.Key;
                                                break;
                                            }
                                        }
                                    }
                                    else if (this._selectedAccountForAutoBuy.Country.ToLower().Trim() == "united states")
                                    {
                                        foreach (KeyValuePair<String, String> item in this.appStartup._US_States)
                                        {
                                            if (this._selectedAccountForAutoBuy.State.ToLower().Trim() == item.Value.ToLower().Trim())
                                            {
                                                state = item.Key;
                                                break;
                                            }
                                        }
                                    }
                                    else if (this._selectedAccountForAutoBuy.Country.ToLower().Trim() == "australia")
                                    {
                                        foreach (KeyValuePair<String, String> item in this.appStartup._Australia_States)
                                        {
                                            if (this._selectedAccountForAutoBuy.State.ToLower().Trim() == item.Value.ToLower().Trim())
                                            {
                                                state = item.Key;
                                                break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        state = "";
                                    }
                                }
                                //else
                                //{
                                //    this.MoreInfo = "No guest checkout allowed.";
                                //    return;
                                //}
                            }

                            if (this._selectedAccountForAutoBuy.CardType == "AMEX")
                            {
                                foreach (string item in this.PmCodes)
                                {
                                    if (item.Contains(this._selectedAccountForAutoBuy.CardType))
                                    {
                                        pmCode = item;
                                        cardTypeNum = "003";
                                        break;
                                    }
                                }

                            }
                            else if (this._selectedAccountForAutoBuy.CardType == "Master Card")
                            {
                                foreach (string item in this.PmCodes)
                                {
                                    if (item.Contains("MC"))
                                    {
                                        pmCode = item;
                                        cardTypeNum = "004";
                                        break;
                                    }
                                }
                            }
                            else if (this._selectedAccountForAutoBuy.CardType == "Visa")
                            {
                                foreach (string item in this.PmCodes)
                                {
                                    if (item.Contains("VI"))
                                    {
                                        pmCode = item;
                                        cardTypeNum = "001";
                                        break;
                                    }
                                }
                            }
                            else if (this._selectedAccountForAutoBuy.CardType == "DISCOVER")
                            {
                                foreach (string item in this.PmCodes)
                                {
                                    if (item.Contains("DISCOVER"))
                                    {
                                        pmCode = item;
                                        cardTypeNum = "003";
                                        break;
                                    }
                                }
                            }

                            string currency = String.Empty;
                            if (this.TotalPrice.Contains("GBP"))
                            {
                                currency = "GBP";
                                this.TotalPrice = this.TotalPrice.Replace("GBP", "").Trim();
                            }
                            else if (this.TotalPrice.Contains("USD"))
                            {
                                currency = "USD";
                                this.TotalPrice = this.TotalPrice.Replace("USD", "").Trim();
                            }
                            else if (this.TotalPrice.Contains("SEK"))
                            {
                                currency = "SEK";
                                this.TotalPrice = this.TotalPrice.Replace("SEK", "").Trim();
                            }
                            else
                            {
                                currency = "CAD";
                                this.TotalPrice = this.TotalPrice.Replace("CAD", "").Trim();
                            }

                            decimal converted_Price = Convert.ToDecimal(this.TotalPrice);
                            // decimal deliveryCharges;
                            if (this.DeliveryOptions != null)
                            {
                                foreach (KeyValuePair<string, string> item in this.DeliveryOptions)
                                {
                                    if (this.Ticket.DeliveryOption == item.Key)
                                    {
                                        // deliveryCharges = Convert.ToDecimal(item.Value);
                                        // converted_Price = converted_Price + deliveryCharges;
                                        break;
                                    }
                                }
                            }
                            if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                            {
                                // this.TotalPrice = converted_Price.ToString("F2");
                                //this.TotalPrice = this.TotalPrice.Replace(".", "");
                            }
                            else
                            {
                                this.TotalPrice = this.TotalPrice.Replace(".", "");
                            }
                            bool isElectronicFirst = false;

                            foreach (KeyValuePair<string, string> itm in DeliveryOptions)
                            {
                                if (itm.Key.ToLower().Contains("electronic"))
                                {
                                    isElectronicFirst = true;
                                }
                                break;
                            }

                            //if (!isElectronicFirst && this.Ticket.DeliveryOption.ToLower().Contains("electronic"))
                            {
                                //this.TotalPrice = (Convert.ToInt32(unitprice) * Convert.ToInt32(this._CurrentParameter.Quantity)).ToString();
                                this.TotalPrice = Convert.ToInt32(unitprice).ToString();

                                if (!charityValue.Equals("0"))
                                {
                                    this.TotalPrice = Convert.ToString(Convert.ToInt32(this.TotalPrice) + (Convert.ToInt32(charityValue)));//Convert.ToString(Convert.ToInt32(this.TotalPrice) + (Convert.ToInt32(charityValue) * Convert.ToInt32(this._CurrentParameter.Quantity)));
                                }
                            }

                        retry:
                            string postData = String.Empty;
                            string shippingitems = String.Empty;


                            int purchaseUnitIndex = this.PurchaseUnit.Count - 1;
                            string selected = "";


                            foreach (KeyValuePair<string, string> itm in DeliveryOptions)
                            {
                                if (itm.Key.ToLower().Contains(this.Ticket.DeliveryOption.ToLower()))
                                {
                                    selected = itm.Value;
                                    break;
                                }
                            }

                            if (String.IsNullOrEmpty(selected))
                            {
                                if (this.Ticket.DeliveryOption.ToLower().Contains("electronic"))
                                {
                                    selected = (Convert.ToInt32(DeliveryOptions.LastOrDefault().Value) + 1).ToString();
                                }
                            }

                            if (!String.IsNullOrEmpty(selected))
                            {
                                // decimal deliveryCharges;
                                if (_deliveryCost != null)
                                {
                                    foreach (KeyValuePair<string, string> item in _deliveryCost)
                                    {
                                        if (selected.Equals(item.Key))
                                        {
                                            // deliveryCharges = Convert.ToDecimal(item.Value);
                                            this.TotalPrice = (int.Parse(this.TotalPrice.Replace(".", String.Empty)) + int.Parse(item.Value)).ToString();
                                            break;
                                        }
                                    }
                                }
                            }

                            Boolean firstAttempt = true;

                            if (!this.TmEvent.ifJson)
                            {
                                if (string.IsNullOrEmpty(selected))
                                {
                                    for (int i = this.pUnits.Count() - 1; i >= 0; i--)
                                    {
                                        for (int j = 0; j < this.pUnits[i].itemNums.Count; j++)
                                        {
                                            if (this.pUnits[i].quantity == null || this.pUnits[i].quantity.Count == 0)
                                            {
                                                continue;
                                            }

                                            if (this.pUnits[i].itemNums[j] == "1" || this.pUnits[i].itemNums[j] == "2" || this.pUnits[i].itemNums[j] == "3")
                                            {
                                                if (!shippingitems.Contains("<value><value><array><data><value><int>" + this.pUnits[i].purchaseUnit + "</int></value><value><int>" + this.pUnits[i].itemNums[j] + "</int></value><value><int>" + this.pUnits[i].quantity[j] + "</int></value></data></array></value></value>"))
                                                {
                                                    shippingitems += "<value><value><array><data><value><int>" + this.pUnits[i].purchaseUnit + "</int></value><value><int>" + this.pUnits[i].itemNums[j] + "</int></value><value><int>" + this.pUnits[i].quantity[j] + "</int></value></data></array></value></value>";
                                                }
                                            }
                                            else
                                            {
                                                if (!shippingitems.Contains("<value><value><array><data><value><int>" + this.pUnits[i].purchaseUnit + "</int></value><value><int>" + this.pUnits[i].itemNums[j] + "</int></value><value><int>" + this.pUnits[i].quantity[j] + "</int></value></data></array></value></value>"))
                                                {
                                                    shippingitems += "<value><value><array><data><value><int>" + this.pUnits[i].purchaseUnit + "</int></value><value><int>" + this.pUnits[i].itemNums[j] + "</int></value><value><int>" + this.pUnits[i].quantity[j] + "</int></value></data></array></value></value>";
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    for (int i = this.pUnits.Count() - 1; i >= 0; i--)
                                    {
                                        for (int j = 0; j < this.pUnits[i].itemNums.Count; j++)
                                        {
                                            if (this.pUnits[i].quantity == null || this.pUnits[i].quantity.Count == 0)
                                            {
                                                continue;
                                            }

                                            if (this.pUnits[i].itemNums[j].Equals(selected))
                                            {
                                                if (this.pUnits[i].itemNums[j] == "1" && selected == "1" && this.Ticket.URL.Contains(this.wRoom) && firstAttempt)
                                                {
                                                    // for jst one particular event
                                                    shippingitems += "<value><value><array><data><value><int>" + this.pUnits[i].purchaseUnit + "</int></value><value><int>" + this.pUnits[i].itemNums[j] + "</int></value><value><int>" + this._CurrentParameter.Quantity + "</int></value></data></array></value></value>";
                                                    firstAttempt = false;
                                                }
                                                else
                                                {
                                                    // for all other events
                                                    shippingitems += "<value><value><array><data><value><int>" + this.pUnits[i].purchaseUnit + "</int></value><value><int>" + this.pUnits[i].itemNums[j] + "</int></value><value><int>1</int></value></data></array></value></value>";
                                                }
                                            }
                                            else if (DeliveryOptions.ContainsValue(this.pUnits[i].itemNums[j]) && (!this.pUnits[i].itemNums[j].Equals(selected)))
                                            {
                                                shippingitems += "<value><value><array><data><value><int>" + this.pUnits[i].purchaseUnit + "</int></value><value><int>" + this.pUnits[i].itemNums[j] + "</int></value><value><int>0</int></value></data></array></value></value>";
                                            }
                                            else if (this.pUnits[i].itemNums[j] == "1" || this.pUnits[i].itemNums[j] == "2" || this.pUnits[i].itemNums[j] == "3")
                                            {
                                                shippingitems += "<value><value><array><data><value><int>" + this.pUnits[i].purchaseUnit + "</int></value><value><int>" + this.pUnits[i].itemNums[j] + "</int></value><value><int>" + this.pUnits[i].quantity[j] + "</int></value></data></array></value></value>";
                                            }
                                            else
                                            {
                                                shippingitems += "<value><value><array><data><value><int>" + this.pUnits[i].purchaseUnit + "</int></value><value><int>" + this.pUnits[i].itemNums[j] + "</int></value><value><int>" + this.pUnits[i].quantity[j] + "</int></value></data></array></value></value>";
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (string.IsNullOrEmpty(selected))
                                {
                                    for (int i = this.pUnits.Count() - 1; i >= 0; i--)
                                    {
                                        for (int j = 0; j < this.pUnits[i].itemNums.Count; j++)
                                        {
                                            if (this.pUnits[i].quantity == null || this.pUnits[i].quantity.Count == 0)
                                            {
                                                continue;
                                            }
                                            if (this.pUnits[i].itemNums[j] == "1" || this.pUnits[i].itemNums[j] == "2" || this.pUnits[i].itemNums[j] == "3")
                                            {
                                                if (!shippingitems.Contains("[" + this.pUnits[i].purchaseUnit + "," + this.pUnits[i].itemNums[j] + "," + this.pUnits[i].quantity[j] + "]"))
                                                {
                                                    shippingitems += "[" + this.pUnits[i].purchaseUnit + "," + this.pUnits[i].itemNums[j] + "," + this.pUnits[i].quantity[j] + "]";
                                                }
                                            }
                                            else
                                            {
                                                if (!shippingitems.Contains("[" + this.pUnits[i].purchaseUnit + "," + this.pUnits[i].itemNums[j] + "," + this.pUnits[i].quantity[j] + "]"))
                                                {
                                                    shippingitems += "[" + this.pUnits[i].purchaseUnit + "," + this.pUnits[i].itemNums[j] + "," + this.pUnits[i].quantity[j] + "]";
                                                }
                                            }
                                        }
                                    }
                                    shippingitems = shippingitems.TrimEnd(',');
                                }
                                else
                                {
                                    for (int i = this.pUnits.Count() - 1; i >= 0; i--)
                                    {
                                        for (int j = 0; j < this.pUnits[i].itemNums.Count; j++)
                                        {
                                            if (this.pUnits[i].quantity == null || this.pUnits[i].quantity.Count == 0)
                                            {
                                                continue;
                                            }
                                            if (this.pUnits[i].itemNums[j].Equals(selected))
                                            {
                                                if (this.pUnits[i].itemNums[j] == "1" && selected == "1" && this.Ticket.URL.Contains(this.wRoom) && firstAttempt)
                                                {
                                                    // for jst one particular event
                                                    shippingitems += "[" + this.pUnits[i].purchaseUnit + "," + this.pUnits[i].itemNums[j] + "," + this._CurrentParameter.Quantity + "],";
                                                    firstAttempt = false;
                                                }
                                                else
                                                {
                                                    // for all other events
                                                    shippingitems += "[" + this.pUnits[i].purchaseUnit + "," + this.pUnits[i].itemNums[j] + ",1],";
                                                }
                                            }
                                            else if (DeliveryOptions.ContainsValue(this.pUnits[i].itemNums[j]) && (!this.pUnits[i].itemNums[j].Equals(selected)))
                                            {
                                                shippingitems += "[" + this.pUnits[i].purchaseUnit + "," + this.pUnits[i].itemNums[j] + ",0],";
                                            }
                                            else if (this.pUnits[i].itemNums[j] == "1" || this.pUnits[i].itemNums[j] == "2" || this.pUnits[i].itemNums[j] == "3")
                                            {
                                                shippingitems += "[" + this.pUnits[i].purchaseUnit + "," + this.pUnits[i].itemNums[j] + "," + this.pUnits[i].quantity[j] + "],";
                                            }
                                            else
                                            {
                                                shippingitems += "[" + this.pUnits[i].purchaseUnit + "," + this.pUnits[i].itemNums[j] + "," + this.pUnits[i].quantity[j] + "],";
                                            }
                                        }
                                    }
                                }
                                shippingitems = shippingitems.TrimEnd(',');
                            }

                            if (currency == "GBP")
                            {
                                if (!this.TmEvent.ifJson)
                                {
                                    string firstSixDigits = this._selectedAccountForAutoBuy.CardNumber.Substring(0, 6);
                                    string lastFourDigits = this._selectedAccountForAutoBuy.CardNumber.Remove(0, this._selectedAccountForAutoBuy.CardNumber.Length - 4);

                                    {
                                        postData = "<methodCall><methodName>webapi.amodsell</methodName><params><param><value><string>" + this.SessionKey + "</string></value></param><param><struct><member><name>customer</name><value><struct><member><name>extCustId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>firstName</name><value><string>" + this._selectedAccountForAutoBuy.FirstName + "</string></value></member><member><name>lastName</name><value><string>" + this._selectedAccountForAutoBuy.LastName + "</string></value></member><member><name>preferredLanguage</name><value><string>en</string></value></member><member><name>type</name><value><string></string></value></member><member><name>emailOptOut</name><value><boolean>1</boolean></value></member><member><name>amexEmailOptOut</name><value><boolean>1</boolean></value></member><member><name>updateExtCustomer</name><value><boolean>0</boolean></value></member></struct></value></member><member><name>emails</name><value><array><data><value><struct><member><name>emailId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>emailAddress</name><value><string>" + this._selectedAccountForAutoBuy.EmailAddress + "</string></value></member><member><name>emailAddress2</name><value><string>" + this._selectedAccountForAutoBuy.EmailAddress + "</string></value></member><member><name>emailType</name><value><string>Primary</string></value></member></struct></value></data></array></value></member><member><name>addresses</name><value><array><data><value><struct><member><name>addressId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>address1</name><value><string>" + this._selectedAccountForAutoBuy.Address1 + "</string></value></member><member><name>address2</name><value><string>" + this._selectedAccountForAutoBuy.Address2 + "</string></value></member><member><name>city</name><value><string>" + this._selectedAccountForAutoBuy.Town + "</string></value></member><member><name>countryCode</name><value><string>" + country + "</string></value></member><member><name>regionCode</name><value><string>" + state + "</string></value></member><member><name>postCode</name><value><string>" + this._selectedAccountForAutoBuy.PostCode + "</string></value></member><member><name>addressType</name><value><string>Billing</string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>1</string></value></member></struct></value></data></array></value></member><member><name>phones</name><value><array><data><value><struct><member><name>phoneId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>1</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Telephone + "</string></value></member><member><name>phoneType</name><value><string>Day</string></value></member></struct></value><value><struct><member><name>phoneId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>0</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Telephone + "</string></value></member><member><name>phoneType</name><value><string>Home</string></value></member></struct></value></data></array></value></member></struct></param><param><value><array><data>" + shippingitems + "</data></array></value></param><param><value><array><data><value><struct><member><name>primaryId</name><value><string></string></value></member><member><name>countryCode</name><value><string>" + country + "</string></value></member><member><name>firstSixDigits</name><value><string>" + firstSixDigits + "</string></value></member><member><name>lastFourDigits</name><value><string>" + lastFourDigits + "</string></value></member><member><name>terminalId</name><value><string></string></value></member><member><name>cardNumber</name><value><string>" + this._selectedAccountForAutoBuy.CardNumber + "</string></value></member><member><name>cardToken</name><value><string></string></value></member><member><name>emailOptOut</name><value><boolean>1</boolean></value></member><member><name>amexEmailOptOut</name><value><boolean>1</boolean></value></member><member><name>noAddrFlag</name><value><string></string></value></member><member><name>docNumber</name><value><string></string></value></member><member><name>city</name><value><string>" + this._selectedAccountForAutoBuy.Town + "</string></value></member><member><name>regionCode</name><value><string>" + state + "</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Telephone + "</string></value></member><member><name>address1</name><value><string>" + this._selectedAccountForAutoBuy.Address1 + "</string></value></member><member><name>address2</name><value><string>" + this._selectedAccountForAutoBuy.Address2 + "</string></value></member><member><name>paymentType</name><value><string></string></value></member><member><name>pmCode</name><value><string>" + pmCode + "</string></value></member><member><name>firstName</name><value><string>" + this._selectedAccountForAutoBuy.FirstName + "</string></value></member><member><name>lastName</name><value><string>" + this._selectedAccountForAutoBuy.LastName + "</string></value></member><member><name>ccv</name><value><string>" + this._selectedAccountForAutoBuy.CCVNum + "</string></value></member><member><name>expMonth</name><value><string>" + this._selectedAccountForAutoBuy.ExpiryMonth + "</string></value></member><member><name>expYear</name><value><string>" + this._selectedAccountForAutoBuy.ExpiryYear + "</string></value></member><member><name>amount</name><value><array><data><value><int>" + this.TotalPrice + "</int></value><value><string>GBP</string></value></data></array></value></member><member><name>postCode</name><value><string>" + this._selectedAccountForAutoBuy.PostCode + "</string></value></member></struct></value></data></array></value></param><param><value><array><data><value><string>customer</string></value><value><string>emails</string></value><value><string>addresses</string></value><value><string>phones</string></value><value><string>payments</string></value><value><string>Order</string></value><value><string>lockttl</string></value></data></array></value></param><param><value><string>REGULAR</string></value></param><param><value><array><data/></array></value></param><param><value><string>sc:false,Ase:" + this.code + ",t:2,s,ff,fok:false,fok:true,ff,fok:true,</string></value></param></params></methodCall>";
                                    }
                                }
                                else
                                {
                                    if (paymentObject != null)
                                    {
                                        postData = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.amodsell\",\"params\":[\"" + this.SessionKey + "\",{\"customer\":{\"extCustId\":\"" + this.extCustId + "\",\"primaryId\":\"\",\"firstName\":\"" + paymentObject["first_name"].ToString() + "\",\"lastName\":\"" + paymentObject["last_name"].ToString() + "\",\"preferredLanguage\":\"en\",\"emailOptOut\":true,\"amexEmailOptOut\":true,\"updateExtCustomer\":false,\"serviceSubscription\":[],\"bSaveExtInfo\":false},\"emails\":[{\"emailId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"emailAddress\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailAddress2\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailType\":\"Primary\"}],\"addresses\":[{\"addressId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"address1\":\"" + paymentObject["address1"].ToString() + "\",\"address2\":\"" + paymentObject["address2"].ToString() + "\",\"city\":\"" + paymentObject["city"].ToString() + "\",\"countryCode\":\"" + paymentObject["country"].ToString() + "\",\"regionCode\":\"" + paymentObject["state_province"].ToString() + "\",\"postCode\":\"" + paymentObject["postal_code"].ToString() + "\",\"addressType\":\"Billing\",\"primary\":\"1\"}],\"phones\":[{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"1\",\"phoneNumber\":\"" + paymentObject["phone"].ToString() + "\",\"phoneType\":\"Day\"},{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"0\",\"phoneNumber\":\"\",\"phoneType\":\"Home\"}]},[" + shippingitems + "],[{\"primaryId\":\"\",\"paymentType\":1,\"pmCode\":\"" + pmCode + "\",\"cardNumber\":\"" + String.Empty + "\",\"firstSixDigits\":\"" + paymentObject["cc_first_six"].ToString() + "\",\"lastFourDigits\":\"" + paymentObject["cc_last_four"].ToString() + "\",\"cardToken\":\"" + paymentObject["payment_token"].ToString() + "\",\"ccv\":\"" + new String(this._selectedAccountForAutoBuy.CCVNum.Select(r => r == ' ' ? ' ' : '*').ToArray()) + "\",\"expMonth\":\"" + paymentObject["cc_exp_month"].ToString() + "\",\"expYear\":\"" + paymentObject["cc_exp_year"].ToString() + "\",\"amount\":[" + this.TotalPrice + ",\"GBP\"],\"terminalId\":\"\",\"docNumber\":\"\",\"noAddrFlag\":\"\",\"firstName\":\"" + paymentObject["first_name"].ToString() + "\",\"lastName\":\"" + paymentObject["last_name"].ToString() + "\",\"countryCode\":\"" + paymentObject["country"].ToString() + "\",\"regionCode\":\"" + paymentObject["state_province"].ToString() + "\",\"city\":\"" + paymentObject["city"].ToString() + "\",\"phoneNumber\":\"" + paymentObject["phone"].ToString() + "\",\"address1\":\"" + paymentObject["address1"].ToString() + "\",\"address2\":\"" + paymentObject["address2"].ToString() + "\",\"postCode\":\"" + paymentObject["postal_code"].ToString() + "\",\"emailOptOut\":true,\"amexEmailOptOut\":true}],[\"customer\",\"emails\",\"addresses\",\"phones\",\"payments\",\"Order\",\"lockttl\"],null,[],\"\"],\"id\":1}";
                                    }
                                    else
                                    {
                                        if (this.isGuest)
                                        {
                                            string firstSixDigits = this._selectedAccountForAutoBuy.CardNumber.Substring(0, 6);
                                            string lastFourDigits = this._selectedAccountForAutoBuy.CardNumber.Remove(0, this._selectedAccountForAutoBuy.CardNumber.Length - 4);

                                            postData = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.amodsell\",\"params\":[\"" + this.SessionKey + "\",{\"customer\":{\"extCustId\":\"" + this.extCustId + "\",\"primaryId\":\"\",\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" + this._selectedAccountForAutoBuy.LastName + "\",\"preferredLanguage\":\"en\",\"emailOptOut\":true,\"amexEmailOptOut\":true,\"updateExtCustomer\":false,\"serviceSubscription\":[],\"bSaveExtInfo\":false},\"emails\":[{\"emailId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"emailAddress\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailAddress2\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailType\":\"Primary\"}],\"addresses\":[{\"addressId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"address1\":\"" + this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town + "\",\"countryCode\":\"" + country + "\",\"regionCode\":\"" + state + "\",\"postCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"addressType\":\"Billing\",\"primary\":\"1\"}],\"phones\":[{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"1\",\"phoneNumber\":\"" + this._selectedAccountForAutoBuy.Telephone + "\",\"phoneType\":\"Day\"},{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"0\",\"phoneNumber\":\"\",\"phoneType\":\"Home\"}]},[" + shippingitems + "],[{\"primaryId\":\"\",\"paymentType\":1,\"pmCode\":\"" + pmCode + "\",\"cardNumber\":\"" + this._selectedAccountForAutoBuy.CardNumber + "\",\"firstSixDigits\":\"" + firstSixDigits + "\",\"lastFourDigits\":\"" + lastFourDigits + "\",\"cardToken\":\"\",\"ccv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"expMonth\":\"" + this._selectedAccountForAutoBuy.ExpiryMonth + "\",\"expYear\":\"" + this._selectedAccountForAutoBuy.ExpiryYear + "\",\"amount\":[" + this.TotalPrice + ",\"GBP\"],\"terminalId\":\"\",\"docNumber\":\"\",\"noAddrFlag\":\"\",\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" + this._selectedAccountForAutoBuy.LastName + "\",\"countryCode\":\"" + country + "\",\"regionCode\":\"" + state + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town + "\",\"phoneNumber\":\"" + this._selectedAccountForAutoBuy.Telephone + "\",\"address1\":\"" + this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"postCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"emailOptOut\":true,\"amexEmailOptOut\":true}],[\"customer\",\"emails\",\"addresses\",\"phones\",\"payments\",\"Order\",\"lockttl\"],null,[],\"\"],\"id\":1}";
                                        }
                                        else
                                        {
                                            this.MoreInfo = "Please add payment info into your account.";
                                            return;
                                        }
                                    }
                                }
                            }
                            else if (currency == "USD")
                            {
                                if (!this.TmEvent.ifJson)
                                {
                                    string firstSixDigits = this._selectedAccountForAutoBuy.CardNumber.Substring(0, 6);
                                    string lastFourDigits = this._selectedAccountForAutoBuy.CardNumber.Remove(0, this._selectedAccountForAutoBuy.CardNumber.Length - 4);

                                    postData = "<methodCall><methodName>webapi.amodsell</methodName><params><param><value><string>" + this.SessionKey + "</string></value></param><param><struct><member><name>customer</name><value><struct><member><name>extCustId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>firstName</name><value><string>" + this._selectedAccountForAutoBuy.FirstName + "</string></value></member><member><name>lastName</name><value><string>" + this._selectedAccountForAutoBuy.LastName + "</string></value></member><member><name>preferredLanguage</name><value><string>en</string></value></member><member><name>type</name><value><string></string></value></member><member><name>emailOptOut</name><value><boolean>1</boolean></value></member><member><name>amexEmailOptOut</name><value><boolean>1</boolean></value></member><member><name>updateExtCustomer</name><value><boolean>0</boolean></value></member></struct></value></member><member><name>emails</name><value><array><data><value><struct><member><name>emailId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>emailAddress</name><value><string>" + this._selectedAccountForAutoBuy.EmailAddress + "</string></value></member><member><name>emailAddress2</name><value><string>" + this._selectedAccountForAutoBuy.EmailAddress + "</string></value></member><member><name>emailType</name><value><string>Primary</string></value></member></struct></value></data></array></value></member><member><name>addresses</name><value><array><data><value><struct><member><name>addressId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>address1</name><value><string>" + this._selectedAccountForAutoBuy.Address1 + "</string></value></member><member><name>address2</name><value><string>" + this._selectedAccountForAutoBuy.Address2 + "</string></value></member><member><name>city</name><value><string>" + this._selectedAccountForAutoBuy.Town + "</string></value></member><member><name>countryCode</name><value><string>" + country + "</string></value></member><member><name>regionCode</name><value><string>" + state + "</string></value></member><member><name>postCode</name><value><string>" + this._selectedAccountForAutoBuy.PostCode + "</string></value></member><member><name>addressType</name><value><string>Billing</string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>1</string></value></member></struct></value></data></array></value></member><member><name>phones</name><value><array><data><value><struct><member><name>phoneId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>1</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Telephone + "</string></value></member><member><name>phoneType</name><value><string>Day</string></value></member></struct></value><value><struct><member><name>phoneId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>0</string></value></member><member><name>phoneNumber</name><value><string></string></value></member><member><name>phoneType</name><value><string>Home</string></value></member></struct></value></data></array></value></member></struct></param><param><value><array><data>" + shippingitems + "</data></array></value></param><param><value><array><data><value><struct><member><name>primaryId</name><value><string></string></value></member><member><name>countryCode</name><value><string>" + country + "</string></value></member><member><name>firstSixDigits</name><value><string>" + firstSixDigits + "</string></value></member><member><name>lastFourDigits</name><value><string>" + lastFourDigits + "</string></value></member><member><name>terminalId</name><value><string></string></value></member><member><name>cardNumber</name><value><string>" + this._selectedAccountForAutoBuy.CardNumber + "</string></value></member><member><name>cardToken</name><value><string></string></value></member><member><name>emailOptOut</name><value><boolean>1</boolean></value></member><member><name>amexEmailOptOut</name><value><boolean>1</boolean></value></member><member><name>noAddrFlag</name><value><string></string></value></member><member><name>docNumber</name><value><string></string></value></member><member><name>city</name><value><string>" + this._selectedAccountForAutoBuy.Town + "</string></value></member><member><name>regionCode</name><value><string>" + state + "</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Telephone + "</string></value></member><member><name>address1</name><value><string>" + this._selectedAccountForAutoBuy.Address1 + "</string></value></member><member><name>address2</name><value><string>" + this._selectedAccountForAutoBuy.Address2 + "</string></value></member><member><name>paymentType</name><value><string></string></value></member><member><name>pmCode</name><value><string>" + pmCode + "</string></value></member><member><name>firstName</name><value><string>" + this._selectedAccountForAutoBuy.FirstName + "</string></value></member><member><name>lastName</name><value><string>" + this._selectedAccountForAutoBuy.LastName + "</string></value></member><member><name>ccv</name><value><string>" + this._selectedAccountForAutoBuy.CCVNum + "</string></value></member><member><name>expMonth</name><value><string>" + this._selectedAccountForAutoBuy.ExpiryMonth + "</string></value></member><member><name>expYear</name><value><string>" + this._selectedAccountForAutoBuy.ExpiryYear + "</string></value></member><member><name>amount</name><value><array><data><value><int>" + this.TotalPrice + "</int></value><value><string>USD</string></value></data></array></value></member><member><name>postCode</name><value><string>" + this._selectedAccountForAutoBuy.PostCode + "</string></value></member></struct></value></data></array></value></param><param><value><array><data><value><string>customer</string></value><value><string>emails</string></value><value><string>addresses</string></value><value><string>phones</string></value><value><string>payments</string></value><value><string>Order</string></value><value><string>lockttl</string></value></data></array></value></param><param><value><string>REGULAR</string></value></param><param><value><array><data/></array></value></param><param><value><string>Ase:" + this.code + ",sc:false,t:1,s,rs:ff,fok:true,</string></value></param></params></methodCall>";
                                }
                                else
                                {
                                    if (paymentObject != null)
                                    {
                                        postData = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.amodsell\",\"params\":[\"" + this.SessionKey + "\",{\"customer\":{\"extCustId\":\"" + this.extCustId + "\",\"primaryId\":\"\",\"firstName\":\"" + paymentObject["first_name"].ToString() + "\",\"lastName\":\"" + paymentObject["last_name"].ToString() + "\",\"preferredLanguage\":\"en\",\"emailOptOut\":true,\"amexEmailOptOut\":true,\"updateExtCustomer\":false,\"serviceSubscription\":[],\"bSaveExtInfo\":false},\"emails\":[{\"emailId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"emailAddress\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailAddress2\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailType\":\"Primary\"}],\"addresses\":[{\"addressId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"address1\":\"" + paymentObject["address1"].ToString() + "\",\"address2\":\"" + paymentObject["address2"].ToString() + "\",\"city\":\"" + paymentObject["city"].ToString() + "\",\"countryCode\":\"" + paymentObject["country"].ToString() + "\",\"regionCode\":\"" + paymentObject["state_province"].ToString() + "\",\"postCode\":\"" + paymentObject["postal_code"].ToString() + "\",\"addressType\":\"Billing\",\"primary\":\"1\"}],\"phones\":[{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"1\",\"phoneNumber\":\"" + paymentObject["phone"].ToString() + "\",\"phoneType\":\"Day\"},{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"0\",\"phoneNumber\":\"\",\"phoneType\":\"Home\"}]},[" + shippingitems + "],[{\"primaryId\":\"\",\"paymentType\":1,\"pmCode\":\"" + pmCode + "\",\"cardNumber\":\"" + String.Empty + "\",\"firstSixDigits\":\"" + paymentObject["cc_first_six"].ToString() + "\",\"lastFourDigits\":\"" + paymentObject["cc_last_four"].ToString() + "\",\"cardToken\":\"" + paymentObject["payment_token"].ToString() + "\",\"ccv\":\"" + new String(this._selectedAccountForAutoBuy.CCVNum.Select(r => r == ' ' ? ' ' : '*').ToArray()) + "\",\"expMonth\":\"" + paymentObject["cc_exp_month"].ToString() + "\",\"expYear\":\"" + paymentObject["cc_exp_year"].ToString() + "\",\"amount\":[" + this.TotalPrice + ",\"GBP\"],\"terminalId\":\"\",\"docNumber\":\"\",\"noAddrFlag\":\"\",\"firstName\":\"" + paymentObject["first_name"].ToString() + "\",\"lastName\":\"" + paymentObject["last_name"].ToString() + "\",\"countryCode\":\"" + paymentObject["country"].ToString() + "\",\"regionCode\":\"" + paymentObject["state_province"].ToString() + "\",\"city\":\"" + paymentObject["city"].ToString() + "\",\"phoneNumber\":\"" + paymentObject["phone"].ToString() + "\",\"address1\":\"" + paymentObject["address1"].ToString() + "\",\"address2\":\"" + paymentObject["address2"].ToString() + "\",\"postCode\":\"" + paymentObject["postal_code"].ToString() + "\",\"emailOptOut\":true,\"amexEmailOptOut\":true}],[\"customer\",\"emails\",\"addresses\",\"phones\",\"payments\",\"Order\",\"lockttl\"],null,[],\"\"],\"id\":1}";
                                    }
                                    else
                                    {
                                        if (this.isGuest)
                                        {
                                            string firstSixDigits = this._selectedAccountForAutoBuy.CardNumber.Substring(0, 6);
                                            string lastFourDigits = this._selectedAccountForAutoBuy.CardNumber.Remove(0, this._selectedAccountForAutoBuy.CardNumber.Length - 4);

                                            postData = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.amodsell\",\"params\":[\"" + this.SessionKey + "\",{\"customer\":{\"extCustId\":\"" + this.extCustId + "\",\"primaryId\":\"\",\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" + this._selectedAccountForAutoBuy.LastName + "\",\"preferredLanguage\":\"en\",\"emailOptOut\":true,\"amexEmailOptOut\":true,\"updateExtCustomer\":false,\"serviceSubscription\":[],\"bSaveExtInfo\":false},\"emails\":[{\"emailId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"emailAddress\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailAddress2\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailType\":\"Primary\"}],\"addresses\":[{\"addressId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"address1\":\"" + this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town + "\",\"countryCode\":\"" + country + "\",\"regionCode\":\"" + state + "\",\"postCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"addressType\":\"Billing\",\"primary\":\"1\"}],\"phones\":[{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"1\",\"phoneNumber\":\"" + this._selectedAccountForAutoBuy.Telephone + "\",\"phoneType\":\"Day\"},{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"0\",\"phoneNumber\":\"\",\"phoneType\":\"Home\"}]},[" + shippingitems + "],[{\"primaryId\":\"\",\"paymentType\":1,\"pmCode\":\"" + pmCode + "\",\"cardNumber\":\"" + this._selectedAccountForAutoBuy.CardNumber + "\",\"firstSixDigits\":\"" + firstSixDigits + "\",\"lastFourDigits\":\"" + lastFourDigits + "\",\"cardToken\":\"\",\"ccv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"expMonth\":\"" + this._selectedAccountForAutoBuy.ExpiryMonth + "\",\"expYear\":\"" + this._selectedAccountForAutoBuy.ExpiryYear + "\",\"amount\":[" + this.TotalPrice + ",\"USD\"],\"terminalId\":\"\",\"docNumber\":\"\",\"noAddrFlag\":\"\",\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" + this._selectedAccountForAutoBuy.LastName + "\",\"countryCode\":\"" + country + "\",\"regionCode\":\"" + state + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town + "\",\"phoneNumber\":\"" + this._selectedAccountForAutoBuy.Telephone + "\",\"address1\":\"" + this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"postCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"emailOptOut\":true,\"amexEmailOptOut\":true}],[\"customer\",\"emails\",\"addresses\",\"phones\",\"payments\",\"Order\",\"lockttl\"],null,[],\"\"],\"id\":1}";
                                        }
                                        else
                                        {
                                            this.MoreInfo = "Please add payment info into your account.";
                                            return;
                                        }
                                    }
                                }
                            }
                            else if (currency == "CAD")
                            {
                                if (!this.TmEvent.ifJson)
                                {
                                    string firstSixDigits = this._selectedAccountForAutoBuy.CardNumber.Substring(0, 6);
                                    string lastFourDigits = this._selectedAccountForAutoBuy.CardNumber.Remove(0, this._selectedAccountForAutoBuy.CardNumber.Length - 4);

                                    postData = "<methodCall><methodName>webapi.amodsell</methodName><params><param><value><string>" + this.SessionKey + "</string></value></param><param><struct><member><name>customer</name><value><struct><member><name>extCustId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>firstName</name><value><string>" + this._selectedAccountForAutoBuy.FirstName + "</string></value></member><member><name>lastName</name><value><string>" + this._selectedAccountForAutoBuy.LastName + "</string></value></member><member><name>preferredLanguage</name><value><string>en</string></value></member><member><name>type</name><value><string></string></value></member><member><name>emailOptOut</name><value><boolean>1</boolean></value></member><member><name>amexEmailOptOut</name><value><boolean>1</boolean></value></member><member><name>updateExtCustomer</name><value><boolean>0</boolean></value></member></struct></value></member><member><name>emails</name><value><array><data><value><struct><member><name>emailId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>emailAddress</name><value><string>" + this._selectedAccountForAutoBuy.EmailAddress + "</string></value></member><member><name>emailAddress2</name><value><string>" + this._selectedAccountForAutoBuy.EmailAddress + "</string></value></member><member><name>emailType</name><value><string>Primary</string></value></member></struct></value></data></array></value></member><member><name>addresses</name><value><array><data><value><struct><member><name>addressId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>address1</name><value><string>" + this._selectedAccountForAutoBuy.Address1 + "</string></value></member><member><name>address2</name><value><string>" + this._selectedAccountForAutoBuy.Address2 + "</string></value></member><member><name>city</name><value><string>" + this._selectedAccountForAutoBuy.Town + "</string></value></member><member><name>countryCode</name><value><string>" + country + "</string></value></member><member><name>regionCode</name><value><string>" + state + "</string></value></member><member><name>postCode</name><value><string>" + this._selectedAccountForAutoBuy.PostCode + "</string></value></member><member><name>addressType</name><value><string>Billing</string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>1</string></value></member></struct></value></data></array></value></member><member><name>phones</name><value><array><data><value><struct><member><name>phoneId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>1</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Telephone + "</string></value></member><member><name>phoneType</name><value><string>Day</string></value></member></struct></value><value><struct><member><name>phoneId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>0</string></value></member><member><name>phoneNumber</name><value><string></string></value></member><member><name>phoneType</name><value><string>Home</string></value></member></struct></value></data></array></value></member></struct></param><param><value><array><data>" + shippingitems + "</data></array></value></param><param><value><array><data><value><struct><member><name>primaryId</name><value><string></string></value></member><member><name>countryCode</name><value><string>" + country + "</string></value></member><member><name>firstSixDigits</name><value><string>" + firstSixDigits + "</string></value></member><member><name>lastFourDigits</name><value><string>" + lastFourDigits + "</string></value></member><member><name>terminalId</name><value><string></string></value></member><member><name>cardNumber</name><value><string>" + this._selectedAccountForAutoBuy.CardNumber + "</string></value></member><member><name>cardToken</name><value><string></string></value></member><member><name>emailOptOut</name><value><boolean>1</boolean></value></member><member><name>amexEmailOptOut</name><value><boolean>1</boolean></value></member><member><name>noAddrFlag</name><value><string></string></value></member><member><name>docNumber</name><value><string></string></value></member><member><name>city</name><value><string>" + this._selectedAccountForAutoBuy.Town + "</string></value></member><member><name>regionCode</name><value><string>" + state + "</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Telephone + "</string></value></member><member><name>address1</name><value><string>" + this._selectedAccountForAutoBuy.Address1 + "</string></value></member><member><name>address2</name><value><string>" + this._selectedAccountForAutoBuy.Address2 + "</string></value></member><member><name>paymentType</name><value><string></string></value></member><member><name>pmCode</name><value><string>" + pmCode + "</string></value></member><member><name>firstName</name><value><string>" + this._selectedAccountForAutoBuy.FirstName + "</string></value></member><member><name>lastName</name><value><string>" + this._selectedAccountForAutoBuy.LastName + "</string></value></member><member><name>ccv</name><value><string>" + this._selectedAccountForAutoBuy.CCVNum + "</string></value></member><member><name>expMonth</name><value><string>" + this._selectedAccountForAutoBuy.ExpiryMonth + "</string></value></member><member><name>expYear</name><value><string>" + this._selectedAccountForAutoBuy.ExpiryYear + "</string></value></member><member><name>amount</name><value><array><data><value><int>" + this.TotalPrice + "</int></value><value><string>CAD</string></value></data></array></value></member><member><name>postCode</name><value><string>" + this._selectedAccountForAutoBuy.PostCode + "</string></value></member></struct></value></data></array></value></param><param><value><array><data><value><string>customer</string></value><value><string>emails</string></value><value><string>addresses</string></value><value><string>phones</string></value><value><string>payments</string></value><value><string>Order</string></value><value><string>lockttl</string></value></data></array></value></param><param><value><string>REGULAR</string></value></param><param><value><array><data/></array></value></param><param><value><string>Ase:" + this.code + ",sc:false,t:1,s,rs:ff,fok:true,</string></value></param></params></methodCall>";
                                }
                                else
                                {
                                    if (paymentObject != null)
                                    {
                                        postData = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.amodsell\",\"params\":[\"" + this.SessionKey + "\",{\"customer\":{\"extCustId\":\"" + this.extCustId + "\",\"primaryId\":\"\",\"firstName\":\"" + paymentObject["first_name"].ToString() + "\",\"lastName\":\"" + paymentObject["last_name"].ToString() + "\",\"preferredLanguage\":\"en\",\"emailOptOut\":true,\"amexEmailOptOut\":true,\"updateExtCustomer\":false,\"serviceSubscription\":[],\"bSaveExtInfo\":false},\"emails\":[{\"emailId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"emailAddress\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailAddress2\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailType\":\"Primary\"}],\"addresses\":[{\"addressId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"address1\":\"" + paymentObject["address1"].ToString() + "\",\"address2\":\"" + paymentObject["address2"].ToString() + "\",\"city\":\"" + paymentObject["city"].ToString() + "\",\"countryCode\":\"" + paymentObject["country"].ToString() + "\",\"regionCode\":\"" + paymentObject["state_province"].ToString() + "\",\"postCode\":\"" + paymentObject["postal_code"].ToString() + "\",\"addressType\":\"Billing\",\"primary\":\"1\"}],\"phones\":[{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"1\",\"phoneNumber\":\"" + paymentObject["phone"].ToString() + "\",\"phoneType\":\"Day\"},{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"0\",\"phoneNumber\":\"\",\"phoneType\":\"Home\"}]},[" + shippingitems + "],[{\"primaryId\":\"\",\"paymentType\":1,\"pmCode\":\"" + pmCode + "\",\"cardNumber\":\"" + String.Empty + "\",\"firstSixDigits\":\"" + paymentObject["cc_first_six"].ToString() + "\",\"lastFourDigits\":\"" + paymentObject["cc_last_four"].ToString() + "\",\"cardToken\":\"" + paymentObject["payment_token"].ToString() + "\",\"ccv\":\"" + new String(this._selectedAccountForAutoBuy.CCVNum.Select(r => r == ' ' ? ' ' : '*').ToArray()) + "\",\"expMonth\":\"" + paymentObject["cc_exp_month"].ToString() + "\",\"expYear\":\"" + paymentObject["cc_exp_year"].ToString() + "\",\"amount\":[" + this.TotalPrice + ",\"GBP\"],\"terminalId\":\"\",\"docNumber\":\"\",\"noAddrFlag\":\"\",\"firstName\":\"" + paymentObject["first_name"].ToString() + "\",\"lastName\":\"" + paymentObject["last_name"].ToString() + "\",\"countryCode\":\"" + paymentObject["country"].ToString() + "\",\"regionCode\":\"" + paymentObject["state_province"].ToString() + "\",\"city\":\"" + paymentObject["city"].ToString() + "\",\"phoneNumber\":\"" + paymentObject["phone"].ToString() + "\",\"address1\":\"" + paymentObject["address1"].ToString() + "\",\"address2\":\"" + paymentObject["address2"].ToString() + "\",\"postCode\":\"" + paymentObject["postal_code"].ToString() + "\",\"emailOptOut\":true,\"amexEmailOptOut\":true}],[\"customer\",\"emails\",\"addresses\",\"phones\",\"payments\",\"Order\",\"lockttl\"],null,[],\"\"],\"id\":1}";
                                    }
                                    else
                                    {
                                        if (this.isGuest)
                                        {
                                            string firstSixDigits = this._selectedAccountForAutoBuy.CardNumber.Substring(0, 6);
                                            string lastFourDigits = this._selectedAccountForAutoBuy.CardNumber.Remove(0, this._selectedAccountForAutoBuy.CardNumber.Length - 4);

                                            postData = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.amodsell\",\"params\":[\"" + this.SessionKey + "\",{\"customer\":{\"extCustId\":\"" + this.extCustId + "\",\"primaryId\":\"\",\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" + this._selectedAccountForAutoBuy.LastName + "\",\"preferredLanguage\":\"en\",\"emailOptOut\":true,\"amexEmailOptOut\":true,\"updateExtCustomer\":false,\"serviceSubscription\":[],\"bSaveExtInfo\":false},\"emails\":[{\"emailId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"emailAddress\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailAddress2\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailType\":\"Primary\"}],\"addresses\":[{\"addressId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"address1\":\"" + this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town + "\",\"countryCode\":\"" + country + "\",\"regionCode\":\"" + state + "\",\"postCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"addressType\":\"Billing\",\"primary\":\"1\"}],\"phones\":[{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"1\",\"phoneNumber\":\"" + this._selectedAccountForAutoBuy.Telephone + "\",\"phoneType\":\"Day\"},{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"0\",\"phoneNumber\":\"\",\"phoneType\":\"Home\"}]},[" + shippingitems + "],[{\"primaryId\":\"\",\"paymentType\":1,\"pmCode\":\"" + pmCode + "\",\"cardNumber\":\"" + this._selectedAccountForAutoBuy.CardNumber + "\",\"firstSixDigits\":\"" + firstSixDigits + "\",\"lastFourDigits\":\"" + lastFourDigits + "\",\"cardToken\":\"\",\"ccv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"expMonth\":\"" + this._selectedAccountForAutoBuy.ExpiryMonth + "\",\"expYear\":\"" + this._selectedAccountForAutoBuy.ExpiryYear + "\",\"amount\":[" + this.TotalPrice + ",\"CAD\"],\"terminalId\":\"\",\"docNumber\":\"\",\"noAddrFlag\":\"\",\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" + this._selectedAccountForAutoBuy.LastName + "\",\"countryCode\":\"" + country + "\",\"regionCode\":\"" + state + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town + "\",\"phoneNumber\":\"" + this._selectedAccountForAutoBuy.Telephone + "\",\"address1\":\"" + this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"postCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"emailOptOut\":true,\"amexEmailOptOut\":true}],[\"customer\",\"emails\",\"addresses\",\"phones\",\"payments\",\"Order\",\"lockttl\"],null,[],\"\"],\"id\":1}";
                                        }
                                        else
                                        {
                                            this.MoreInfo = "Please add payment info into your account.";
                                            return;
                                        }
                                    }
                                }
                            }
                            else if (currency == "SEK")
                            {
                                if (!this.TmEvent.ifJson)
                                {
                                    string firstSixDigits = this._selectedAccountForAutoBuy.CardNumber.Substring(0, 6);
                                    string lastFourDigits = this._selectedAccountForAutoBuy.CardNumber.Remove(0, this._selectedAccountForAutoBuy.CardNumber.Length - 4);

                                    postData = "<methodCall><methodName>webapi.amodsell</methodName><params><param><value><string>" + this.SessionKey + "</string></value></param><param><struct><member><name>customer</name><value><struct><member><name>extCustId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>firstName</name><value><string>" + this._selectedAccountForAutoBuy.FirstName + "</string></value></member><member><name>lastName</name><value><string>" + this._selectedAccountForAutoBuy.LastName + "</string></value></member><member><name>preferredLanguage</name><value><string>en</string></value></member><member><name>type</name><value><string></string></value></member><member><name>emailOptOut</name><value><boolean>1</boolean></value></member><member><name>amexEmailOptOut</name><value><boolean>1</boolean></value></member><member><name>updateExtCustomer</name><value><boolean>0</boolean></value></member></struct></value></member><member><name>emails</name><value><array><data><value><struct><member><name>emailId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>emailAddress</name><value><string>" + this._selectedAccountForAutoBuy.EmailAddress + "</string></value></member><member><name>emailAddress2</name><value><string>" + this._selectedAccountForAutoBuy.EmailAddress + "</string></value></member><member><name>emailType</name><value><string>Primary</string></value></member></struct></value></data></array></value></member><member><name>addresses</name><value><array><data><value><struct><member><name>addressId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>address1</name><value><string>" + this._selectedAccountForAutoBuy.Address1 + "</string></value></member><member><name>address2</name><value><string>" + this._selectedAccountForAutoBuy.Address2 + "</string></value></member><member><name>city</name><value><string>" + this._selectedAccountForAutoBuy.Town + "</string></value></member><member><name>countryCode</name><value><string>" + country + "</string></value></member><member><name>regionCode</name><value><string>" + state + "</string></value></member><member><name>postCode</name><value><string>" + this._selectedAccountForAutoBuy.PostCode + "</string></value></member><member><name>addressType</name><value><string>Billing</string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>1</string></value></member></struct></value></data></array></value></member><member><name>phones</name><value><array><data><value><struct><member><name>phoneId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>1</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Telephone + "</string></value></member><member><name>phoneType</name><value><string>Day</string></value></member></struct></value><value><struct><member><name>phoneId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>0</string></value></member><member><name>phoneNumber</name><value><string></string></value></member><member><name>phoneType</name><value><string>Home</string></value></member></struct></value></data></array></value></member></struct></param><param><value><array><data>" + shippingitems + "</data></array></value></param><param><value><array><data><value><struct><member><name>primaryId</name><value><string></string></value></member><member><name>countryCode</name><value><string>" + country + "</string></value></member><member><name>firstSixDigits</name><value><string>" + firstSixDigits + "</string></value></member><member><name>lastFourDigits</name><value><string>" + lastFourDigits + "</string></value></member><member><name>terminalId</name><value><string></string></value></member><member><name>cardNumber</name><value><string>" + this._selectedAccountForAutoBuy.CardNumber + "</string></value></member><member><name>cardToken</name><value><string></string></value></member><member><name>emailOptOut</name><value><boolean>1</boolean></value></member><member><name>amexEmailOptOut</name><value><boolean>1</boolean></value></member><member><name>noAddrFlag</name><value><string></string></value></member><member><name>docNumber</name><value><string></string></value></member><member><name>city</name><value><string>" + this._selectedAccountForAutoBuy.Town + "</string></value></member><member><name>regionCode</name><value><string>" + state + "</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Telephone + "</string></value></member><member><name>address1</name><value><string>" + this._selectedAccountForAutoBuy.Address1 + "</string></value></member><member><name>address2</name><value><string>" + this._selectedAccountForAutoBuy.Address2 + "</string></value></member><member><name>paymentType</name><value><string></string></value></member><member><name>pmCode</name><value><string>" + pmCode + "</string></value></member><member><name>firstName</name><value><string>" + this._selectedAccountForAutoBuy.FirstName + "</string></value></member><member><name>lastName</name><value><string>" + this._selectedAccountForAutoBuy.LastName + "</string></value></member><member><name>ccv</name><value><string>" + this._selectedAccountForAutoBuy.CCVNum + "</string></value></member><member><name>expMonth</name><value><string>" + this._selectedAccountForAutoBuy.ExpiryMonth + "</string></value></member><member><name>expYear</name><value><string>" + this._selectedAccountForAutoBuy.ExpiryYear + "</string></value></member><member><name>amount</name><value><array><data><value><int>" + this.TotalPrice + "</int></value><value><string>SEK</string></value></data></array></value></member><member><name>postCode</name><value><string>" + this._selectedAccountForAutoBuy.PostCode + "</string></value></member></struct></value></data></array></value></param><param><value><array><data><value><string>customer</string></value><value><string>emails</string></value><value><string>addresses</string></value><value><string>phones</string></value><value><string>payments</string></value><value><string>Order</string></value><value><string>lockttl</string></value></data></array></value></param><param><value><string>REGULAR</string></value></param><param><value><array><data/></array></value></param><param><value><string>Ase:" + this.code + ",sc:false,t:1,s,rs:ff,fok:true,</string></value></param></params></methodCall>";
                                }
                                else
                                {
                                    if (paymentObject != null)
                                    {
                                        postData = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.amodsell\",\"params\":[\"" + this.SessionKey + "\",{\"customer\":{\"extCustId\":\"" + this.extCustId + "\",\"primaryId\":\"\",\"firstName\":\"" + paymentObject["first_name"].ToString() + "\",\"lastName\":\"" + paymentObject["last_name"].ToString() + "\",\"preferredLanguage\":\"en\",\"emailOptOut\":true,\"amexEmailOptOut\":true,\"updateExtCustomer\":false,\"serviceSubscription\":[],\"bSaveExtInfo\":false},\"emails\":[{\"emailId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"emailAddress\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailAddress2\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailType\":\"Primary\"}],\"addresses\":[{\"addressId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"address1\":\"" + paymentObject["address1"].ToString() + "\",\"address2\":\"" + paymentObject["address2"].ToString() + "\",\"city\":\"" + paymentObject["city"].ToString() + "\",\"countryCode\":\"" + paymentObject["country"].ToString() + "\",\"regionCode\":\"" + paymentObject["state_province"].ToString() + "\",\"postCode\":\"" + paymentObject["postal_code"].ToString() + "\",\"addressType\":\"Billing\",\"primary\":\"1\"}],\"phones\":[{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"1\",\"phoneNumber\":\"" + paymentObject["phone"].ToString() + "\",\"phoneType\":\"Day\"},{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"0\",\"phoneNumber\":\"\",\"phoneType\":\"Home\"}]},[" + shippingitems + "],[{\"primaryId\":\"\",\"paymentType\":1,\"pmCode\":\"" + pmCode + "\",\"cardNumber\":\"" + String.Empty + "\",\"firstSixDigits\":\"" + paymentObject["cc_first_six"].ToString() + "\",\"lastFourDigits\":\"" + paymentObject["cc_last_four"].ToString() + "\",\"cardToken\":\"" + paymentObject["payment_token"].ToString() + "\",\"ccv\":\"" + new String(this._selectedAccountForAutoBuy.CCVNum.Select(r => r == ' ' ? ' ' : '*').ToArray()) + "\",\"expMonth\":\"" + paymentObject["cc_exp_month"].ToString() + "\",\"expYear\":\"" + paymentObject["cc_exp_year"].ToString() + "\",\"amount\":[" + this.TotalPrice + ",\"GBP\"],\"terminalId\":\"\",\"docNumber\":\"\",\"noAddrFlag\":\"\",\"firstName\":\"" + paymentObject["first_name"].ToString() + "\",\"lastName\":\"" + paymentObject["last_name"].ToString() + "\",\"countryCode\":\"" + paymentObject["country"].ToString() + "\",\"regionCode\":\"" + paymentObject["state_province"].ToString() + "\",\"city\":\"" + paymentObject["city"].ToString() + "\",\"phoneNumber\":\"" + paymentObject["phone"].ToString() + "\",\"address1\":\"" + paymentObject["address1"].ToString() + "\",\"address2\":\"" + paymentObject["address2"].ToString() + "\",\"postCode\":\"" + paymentObject["postal_code"].ToString() + "\",\"emailOptOut\":true,\"amexEmailOptOut\":true}],[\"customer\",\"emails\",\"addresses\",\"phones\",\"payments\",\"Order\",\"lockttl\"],null,[],\"\"],\"id\":1}";
                                    }
                                    else
                                    {
                                        if (this.isGuest)
                                        {
                                            string firstSixDigits = this._selectedAccountForAutoBuy.CardNumber.Substring(0, 6);
                                            string lastFourDigits = this._selectedAccountForAutoBuy.CardNumber.Remove(0, this._selectedAccountForAutoBuy.CardNumber.Length - 4);

                                            postData = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.amodsell\",\"params\":[\"" + this.SessionKey + "\",{\"customer\":{\"extCustId\":\"" + this.extCustId + "\",\"primaryId\":\"\",\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" + this._selectedAccountForAutoBuy.LastName + "\",\"preferredLanguage\":\"en\",\"emailOptOut\":true,\"amexEmailOptOut\":true,\"updateExtCustomer\":false,\"serviceSubscription\":[],\"bSaveExtInfo\":false},\"emails\":[{\"emailId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"emailAddress\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailAddress2\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"emailType\":\"Primary\"}],\"addresses\":[{\"addressId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"address1\":\"" + this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town + "\",\"countryCode\":\"" + country + "\",\"regionCode\":\"" + state + "\",\"postCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"addressType\":\"Billing\",\"primary\":\"1\"}],\"phones\":[{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"1\",\"phoneNumber\":\"" + this._selectedAccountForAutoBuy.Telephone + "\",\"phoneType\":\"Day\"},{\"phoneId\":\"\",\"primaryId\":\"\",\"ownerId\":\"\",\"primary\":\"0\",\"phoneNumber\":\"\",\"phoneType\":\"Home\"}]},[" + shippingitems + "],[{\"primaryId\":\"\",\"paymentType\":1,\"pmCode\":\"" + pmCode + "\",\"cardNumber\":\"" + this._selectedAccountForAutoBuy.CardNumber + "\",\"firstSixDigits\":\"" + firstSixDigits + "\",\"lastFourDigits\":\"" + lastFourDigits + "\",\"cardToken\":\"\",\"ccv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"expMonth\":\"" + this._selectedAccountForAutoBuy.ExpiryMonth + "\",\"expYear\":\"" + this._selectedAccountForAutoBuy.ExpiryYear + "\",\"amount\":[" + this.TotalPrice + ",\"SEK\"],\"terminalId\":\"\",\"docNumber\":\"\",\"noAddrFlag\":\"\",\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" + this._selectedAccountForAutoBuy.LastName + "\",\"countryCode\":\"" + country + "\",\"regionCode\":\"" + state + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town + "\",\"phoneNumber\":\"" + this._selectedAccountForAutoBuy.Telephone + "\",\"address1\":\"" + this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"postCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"emailOptOut\":true,\"amexEmailOptOut\":true}],[\"customer\",\"emails\",\"addresses\",\"phones\",\"payments\",\"Order\",\"lockttl\"],null,[],\"\"],\"id\":1}";
                                        }
                                        else
                                        {
                                            this.MoreInfo = "Please add payment info into your account.";
                                            return;
                                        }
                                    }
                                }
                            }

                            xDoc = new XmlDocument();
                            doc = new HtmlAgilityPack.HtmlDocument();

                            Random rnd = new Random();
                            // Thread.Sleep(rnd.Next(20000, 30000));
                            Thread.Sleep(2 * 1000);
                            if (!this.TmEvent.ifJson)
                            {
                                xDoc.InnerXml = postData;
                                if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                                {
                                    doc.LoadHtml(post(this, this.XmlUrl.Replace("/info2/", "/bfox/").Replace("wroom", "tickets") + "?methodName=webapi.amodsell&sessionKey=" + this.SessionKey + "&XMLRPC_callCounter=10", xDoc.InnerXml));
                                }
                                else
                                {
                                    doc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.amodsell&sessionKey=" + this.SessionKey + "&XMLRPC_callCounter=10", xDoc.InnerXml));
                                }
                            }
                            else
                            {
                                doc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/"), postData));
                            }
                            if (doc.DocumentNode.InnerText.Contains("faultCode") || doc.DocumentNode.InnerText.Contains("faultString"))
                            {

                                Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, doc.DocumentNode.InnerHtml, true));
                                changeStatus("Buying Failed");
                                this.MoreInfo = "Buying Failed";

                                this.currLog.MoreInfo = this.MoreInfo;
                                this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                //postData = "<methodCall><methodName>webapi.amodsell</methodName><params><param><value><string>" + this.SessionKey + "</string></value></param><param><struct><member><name>customer</name><value><struct><member><name>extCustId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>firstName</name><value><string>" + this._selectedAccountForAutoBuy.FirstName + "</string></value></member><member><name>lastName</name><value><string>" + this._selectedAccountForAutoBuy.LastName + "</string></value></member><member><name>preferredLanguage</name><value><string>en</string></value></member><member><name>type</name><value><string></string></value></member><member><name>emailOptOut</name><value><boolean>1</boolean></value></member><member/><member><name>updateExtCustomer</name><value><boolean>1</boolean></value></member></struct></value></member><member><name>emails</name><value><array><data><value><struct><member><name>emailId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>emailAddress</name><value><string>" + this._selectedAccountForAutoBuy.EmailAddress + "</string></value></member><member><name>emailAddress2</name><value><string>" + this._selectedAccountForAutoBuy.ConfirmEmail + "</string></value></member><member><name>emailType</name><value><string>Primary</string></value></member></struct></value></data></array></value></member><member><name>addresses</name><value><array><data><value><struct><member><name>addressId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>address1</name><value><string>" + this._selectedAccountForAutoBuy.Address1 + "</string></value></member><member><name>address2</name><value><string>" + this._selectedAccountForAutoBuy.Address2 + "</string></value></member><member><name>city</name><value><string>" + this._selectedAccountForAutoBuy.Town + "</string></value></member><member><name>countryCode</name><value><string>" + country + "</string></value></member><member><name>regionCode</name><value><string>" + state + "</string></value></member><member><name>postCode</name><value><string>" + this._selectedAccountForAutoBuy.PostCode + "</string></value></member><member><name>addressType</name><value><string>Billing</string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>1</string></value></member></struct></value></data></array></value></member><member><name>phones</name><value><array><data><value><struct><member><name>phoneId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>1</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Telephone + "</string></value></member><member><name>phoneType</name><value><string>Day</string></value></member></struct></value><value><struct><member><name>phoneId</name><value><string></string></value></member><member><name>ownerId</name><value><string></string></value></member><member><name>primaryId</name><value><string></string></value></member><member><name>primary</name><value><string>0</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Mobile + "</string></value></member><member><name>phoneType</name><value><string>Home</string></value></member></struct></value></data></array></value></member></struct></param><param><value><array><data><value><value><array><data><value><int>1</int></value><value><int>1</int></value><value><int>1</int></value></data></array></value></value><value><value><array><data><value><int>1</int></value><value><int>2</int></value><value><int>1</int></value></data></array></value></value><value><value><array><data><value><int>1</int></value><value><int>3</int></value><value><int>1</int></value></data></array></value></value><value><value><array><data><value><int>1</int></value><value><int>4</int></value><value><int>1</int></value></data></array></value></value><value><value><array><data><value><int>1</int></value><value><int>5</int></value><value><int>0</int></value></data></array></value></value></data></array></value></param><param><value><array><data><value><struct><member><name>primaryId</name><value><string></string></value></member><member><name>countryCode</name><value><string>" + country + "</string></value></member><member><name>firstSixDigits</name><value><string>" + firstSixDigits + "</string></value></member><member><name>lastFourDigits</name><value><string>" + lastFourDigits + "</string></value></member><member><name>terminalId</name><value><string></string></value></member><member><name>cardNumber</name><value><string>" + this._selectedAccountForAutoBuy.CardNumber + "</string></value></member><member><name>cardToken</name><value><string></string></value></member><member><name>emailOptOut</name><value><boolean>1</boolean></value></member><member /><member><name>noAddrFlag</name><value><string></string></value></member><member><name>docNumber</name><value><string></string></value></member><member><name>city</name><value><string>" + this._selectedAccountForAutoBuy.Town + "</string></value></member><member><name>regionCode</name><value><string>" + state + "</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Telephone + "</string></value></member><member><name>address1</name><value><string>" + this._selectedAccountForAutoBuy.Address1 + "</string></value></member><member><name>address2</name><value><string>" + this._selectedAccountForAutoBuy.Address2 + "</string></value></member><member><name>paymentType</name><value><string></string></value></member><member><name>pmCode</name><value><string>" + pmCode + "</string></value></member><member><name>firstName</name><value><string>" + this._selectedAccountForAutoBuy.FirstName + "</string></value></member><member><name>lastName</name><value><string>" + this._selectedAccountForAutoBuy.LastName + "</string></value></member><member><name>ccv</name><value><string>" + this._selectedAccountForAutoBuy.CCVNum + "</string></value></member><member><name>expMonth</name><value><string>" + this._selectedAccountForAutoBuy.ExpiryMonth + "</string></value></member><member><name>expYear</name><value><string>" + this._selectedAccountForAutoBuy.ExpiryYear + "</string></value></member><member><name>amount</name><value><array><data><value><int>" + this.TotalPrice + "</int></value><value><string>GBP</string></value></data></array></value></member><member><name>postCode</name><value><string>" + this._selectedAccountForAutoBuy.PostCode + "</string></value></member></struct></value></data></array></value></param><param><value><array><data><value><string>customer</string></value><value><string>emails</string></value><value><string>addresses</string></value><value><string>phones</string></value><value><string>payments</string></value><value><string>Order</string></value><value><string>lockttl</string></value></data></array></value></param><param><value><string>REGULAR</string></value></param><param><value><array><data><value><struct><member><name>extCustId</name><value><string></string></value></member><member><name>emailAddress</name><value><string>" + this._selectedAccountForAutoBuy.EmailAddress + "</string></value></member><member><name>address1</name><value><string>" + this._selectedAccountForAutoBuy.Address1 + "</string></value></member><member><name>address2</name><value><string>" + this._selectedAccountForAutoBuy.Address2 + "</string></value></member><member><name>city</name><value><string>" + this._selectedAccountForAutoBuy.Town + "</string></value></member><member><name>countryCode</name><value><string>" + country + "</string></value></member><member><name>regionCode</name><value><string>" + state + "</string></value></member><member><name>postCode</name><value><string>" + this._selectedAccountForAutoBuy.PostCode + "</string></value></member><member><name>phoneNumber</name><value><string>" + this._selectedAccountForAutoBuy.Telephone + "</string></value></member><member><name>currency</name><value><string>GBP</string></value></member><member><name>pmCode</name><value><string>" + pmCode + "</string></value></member><member><name>cardType</name><value><string>" + cardTypeNum + "</string></value></member><member><name>firstName</name><value><string>" + this._selectedAccountForAutoBuy.FirstName + "</string></value></member><member><name>lastName</name><value><string>" + this._selectedAccountForAutoBuy.LastName + "</string></value></member><member><name>cardToken</name><value><string></string></value></member><member><name>cardNumber</name><value><string>" + this._selectedAccountForAutoBuy.CardNumber + "</string></value></member><member><name>expMonth</name><value><string>" + this._selectedAccountForAutoBuy.ExpiryMonth + "</string></value></member><member><name>expYear</name><value><string>" + this._selectedAccountForAutoBuy.ExpiryYear + "</string></value></member><member><name>ccv</name><value><string>" + this._selectedAccountForAutoBuy.CCVNum + "</string></value></member><member><name>firstSixDigits</name><value><string>" + firstSixDigits + "</string></value></member><member><name>lastFourDigits</name><value><string>" + lastFourDigits + "</string></value></member><member><name>icsReplyCode</name><value><string></string></value></member><member><name>icsReplyFlag</name><value><string></string></value></member><member><name>icsReplyMsg</name><value><string></string></value></member><member><name>icsRequestId</name><value><string></string></value></member></struct></value></data></array></value></param><param><value><string>sc:false,Ase:" + this.code + ",t:1,s,rs:ff,fok:false,fok:false,fok:false,fok:false,fok:false,rs:s,rs:ff,fok:false,fok:true,</string></value></param></params></methodCall>";
                                //xDoc.InnerXml = postData;
                                //doc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.amodsell&sessionKey=" + this.SessionKey + "&XMLRPC_callCounter=59", xDoc.InnerXml));
                            }
                            else if (doc.DocumentNode.InnerHtml == "")
                            {

                                Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, "Response For Auto Buy is Empty", true));
                                this.Price = "";
                                if (this.retry)
                                {
                                    changeStatus("Trying again..");
                                    this.MoreInfo = "Trying again..";
                                    this.retry = false;
                                    goto retry;
                                }
                                else
                                {
                                    changeStatus("No response from site..");
                                    this.MoreInfo = "No response from site..";
                                    this.currLog.MoreInfo = this.MoreInfo;
                                    this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                }
                            }
                            else if (doc.DocumentNode.InnerText.Contains("Decision is REJECT") || doc.DocumentNode.InnerText.Contains("DCARDREFUSED") || doc.DocumentNode.InnerText.Contains("DINVALIDCARD"))
                            {
                                if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                                {
                                    this.Ticket.ifChangeCountOf2 = false;
                                }
                                Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, doc.DocumentNode.InnerHtml, true));
                                changeStatus("Card Rejected");
                                this.MoreInfo = "Card Rejected";
                                this.currLog.MoreInfo = this.MoreInfo;
                                this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                this.Price = "";
                            }
                            else if (doc.DocumentNode.InnerText.Contains("DINVALIDDATA"))
                            {
                                changeStatus("Invalid Account Data");
                                this.MoreInfo = "Invalid Account Data";
                                this.currLog.MoreInfo = this.MoreInfo;
                                this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                this.Price = "";
                            }
                            else if (this.TmEvent.ifJson)
                            {
                                try
                                {
                                    JObject _extractFoundValues = JObject.Parse(doc.DocumentNode.InnerHtml);
                                    JArray order = (JArray)_extractFoundValues["result"];

                                    foreach (var item in order)
                                    {
                                        if (item.HasValues)
                                        {
                                            JObject ovj = (JObject)item;

                                            #region 3rd party verification

                                            if (ovj.Property("orderPayments") != null)
                                            {
                                                JArray orderPayment = (JArray)item["orderPayments"];

                                                string verifyPage = "https://tickets.axs.com/shop/#/GEN-a044-43e2-b99e-812ae03cfd30/shop/verify-purchase?lang=en&locale=en_gb&preFill=1&eventid=340411&ec=O2L170909&src=AEGAXS1_WMAIN&skin=theo2&fbShareURL=www.axs.com%2Fuk%2Fevents%2F340411%2Fchrist-embassy-tickets%3F%26ref%3Devs_f";

                                                foreach (JObject objPayment in orderPayment)
                                                {
                                                    String uuid = objPayment["uuid"].ToString();
                                                    String md = objPayment["enroll_xid"].ToString();
                                                    String pares = objPayment["enroll_pareq"].ToString();

                                                    BrowserSession session = new BrowserSession();

                                                    if (this.Proxy != null)
                                                    {
                                                        session.Proxy = this.Proxy.toWebProxy(context);
                                                    }

                                                    session.FormElements = new FormElementCollection(new HtmlAgilityPack.HtmlDocument());
                                                    session.FormElements.Add("PaReq", pares);
                                                    session.FormElements.Add("TermUrl", this.XmlUrl.Replace("/info/", "/info/proxy-redirect"));
                                                    session.FormElements.Add("MD", md);
                                                    String url = objPayment["enroll_acs_url"].ToString();

                                                    if (this.isJSON)
                                                    {
                                                        session.HTMLWeb = new HtmlWeb();
                                                        session.HTMLWeb.Referrer = "https://tickets.axs.com/shop/";
                                                    }

                                                    String str = session.Post(url);

                                                    if (session.FormElements.Forms.Count > 0)
                                                    {
                                                        if (session.FormElements.Forms.ContainsKey("form1"))
                                                        {
                                                            Uri _yurl = new Uri(objPayment["enroll_acs_url"].ToString());
                                                            url = session.FormElements.Forms["form1"].Action;
                                                            if (url.StartsWith("../"))
                                                            {
                                                                url = "https://" + _yurl.Host + url.Replace("../", _yurl.Segments[0] + _yurl.Segments[1]);
                                                            }

                                                            str = session.Post(url);

                                                            if (session.FormElements.Forms.Count > 0)
                                                            {
                                                                if (session.FormElements.Forms.ContainsKey("pa_res_form"))
                                                                {
                                                                    url = session.FormElements.Forms["pa_res_form"].Action;

                                                                    if (url.StartsWith("../"))
                                                                    {
                                                                        url = "https://" + _yurl.Host + url.Replace("../", _yurl.Segments[0] + _yurl.Segments[1]);
                                                                    }
                                                                    pares = session.FormElements["PaRes"];
                                                                    str = session.Post(url);
                                                                }
                                                                else if (session.FormElements.Forms.ContainsKey("form1"))
                                                                {
                                                                    url = session.FormElements.Forms["form1"].Action;

                                                                    if (url.StartsWith("../"))
                                                                    {
                                                                        url = "https://" + _yurl.Host + url.Replace("../", _yurl.Segments[0] + _yurl.Segments[1]);
                                                                    }

                                                                    if (url.Contains("tdsecure/sms_auth_disclaimer.jsp"))
                                                                    {
                                                                        session.FormElements["user_action"] = "activate";

                                                                        str = session.Post(url);

                                                                        if (session.FormElements.Forms.ContainsKey("form1"))
                                                                        {
                                                                            if (session.FormElements.ContainsKey("otp"))
                                                                            {
                                                                                String paymentCode = String.Empty;

                                                                                String Topmost = "Enter Code for : " + this._selectedAccountForAutoBuy.AccountName;
                                                                                String cardnumber = "Card No. : " + this._selectedAccountForAutoBuy.CardFirstDigits + this._selectedAccountForAutoBuy.CardLastDigits;
                                                                                String PhoneNumber = "Phone No. : " + this._selectedAccountForAutoBuy.Telephone;

                                                                                String parameters = "Section: (" + this.Section + "), Row: (" + this.Row + "), Seat: (" + this.Seat + "), Price: (" + this.Price + ")";

                                                                                frmCode pCode = new frmCode(Topmost, cardnumber, PhoneNumber, parameters);
                                                                                paymentCode = pCode.promptCode();

                                                                                if (String.IsNullOrEmpty(paymentCode))
                                                                                {
                                                                                    this.MoreInfo = "SMS Code is required for verification.";
                                                                                    this.currLog.MoreInfo = this.MoreInfo;
                                                                                    this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                                                                    return;
                                                                                }

                                                                                session.FormElements["user_action"] = "activate";
                                                                                session.FormElements["otp"] = paymentCode;
                                                                            }

                                                                            url = session.FormElements.Forms["form1"].Action;

                                                                            if (url.StartsWith("../"))
                                                                            {
                                                                                url = "https://" + _yurl.Host + url.Replace("../", _yurl.Segments[0] + _yurl.Segments[1]);
                                                                            }

                                                                            str = session.Post(url);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        str = session.Post(url);
                                                                    }

                                                                    if (session.FormElements.Forms.ContainsKey("pa_res_form"))
                                                                    {
                                                                        pares = session.FormElements["PaRes"];
                                                                        str = session.Post(session.FormElements.Forms["pa_res_form"].Action);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else if (session.FormElements.Forms.ContainsKey("mainForm"))
                                                        {

                                                            Uri _yurl = new Uri(objPayment["enroll_acs_url"].ToString());
                                                            url = session.FormElements.Forms["mainForm"].Action;

                                                            if (String.IsNullOrEmpty(url) && this._selectedAccountForAutoBuy.CardType.Equals("AMEX"))
                                                            {
                                                                url = (_yurl.AbsoluteUri.Replace("processing", "payauth"));
                                                            }

                                                            Dictionary<String, string> _formElements = new Dictionary<string, string>();

                                                            foreach (var formelem in session.FormElements)
                                                            {
                                                                _formElements.Add(formelem.Key, formelem.Value);
                                                            }

                                                            session.FormElements.Clear();
                                                            session.FormElements.Add("paReq", _formElements["PaReq"]);

                                                            str = session.Post(url);

                                                            string x = Regex.Replace(str, @"<[^>]*>", String.Empty);
                                                            JObject _auth = JObject.Parse(x);

                                                            #region AMEX only

                                                            if (this._selectedAccountForAutoBuy.CardType.Equals("AMEX"))
                                                            {
                                                                session.FormElements.Clear();
                                                                session.FormElements.Add("inParam", _formElements["gravityId"] + "~#~true~#~N");

                                                                str = session.Post("https://acs-safekey.americanexpress.com/GravityACS/continueWithoutPoints");

                                                                if (_auth != null)
                                                                {
                                                                    if (_auth.Property("sessionData") != null)
                                                                    {
                                                                        session.FormElements.Clear();
                                                                        String data = ((JValue)_auth["sessionData"]).Value.ToString();

                                                                        foreach (var formelem in _formElements)
                                                                        {
                                                                            session.FormElements.Add(formelem.Key, formelem.Value);
                                                                        }

                                                                        if (!session.FormElements.ContainsKey("sessionData"))
                                                                        {
                                                                            session.FormElements.Add("sessionData", data);
                                                                        }
                                                                        else
                                                                        {
                                                                            session.FormElements["sessionData"] = data;
                                                                        }
                                                                    }
                                                                }

                                                                url = (_yurl.AbsoluteUri.Replace("processing", "response"));

                                                                session.FormElements["cookieEnabledIndicator"] = "true";

                                                                str = session.Post(url);

                                                                if (session.FormElements.Forms.ContainsKey("mainform"))
                                                                {
                                                                    session.FormElements["MD"] = md;

                                                                    pares = session.FormElements["PaRes"];

                                                                    session.HTMLWeb.IfAllowAutoRedirect = false;
                                                                    String cookie = session.StrCookies;
                                                                    session.StrCookies = "";
                                                                    str = session.Post(this.XmlUrl.Replace("/info/", "/info/proxy-redirect"));
                                                                    session.HTMLWeb.IfAllowAutoRedirect = true;
                                                                    str = session.Get(session.RedirectLocation);
                                                                }
                                                            }

                                                            if (session.FormElements.Forms.Count > 0)
                                                            {
                                                                if (session.FormElements.Forms.ContainsKey("pa_res_form"))
                                                                {
                                                                    url = session.FormElements.Forms["pa_res_form"].Action;
                                                                    str = session.Post(url);
                                                                }
                                                            }
                                                            #endregion
                                                        }
                                                        else if (session.FormElements.Forms.ContainsKey(""))
                                                        {
                                                            #region VISA verification with card password

                                                            HtmlNode _node = session.HtmlDocument.DocumentNode.SelectSingleNode("//span[contains(@id,'lblPasswordText')]");

                                                            if (_node != null)
                                                            {
                                                                Uri uri = new Uri(session.LastURL);
                                                                String text = _node.InnerText;
                                                                String code = String.Empty;

                                                                int start = text.IndexOf("characters");
                                                                int end = text.IndexOf("from");
                                                                String keys = text.Substring(start, end - start).Replace("characters", String.Empty).Replace("and", ",").Replace(" ", String.Empty).Trim();
                                                                String[] indexes = keys.Split(',');

                                                                if (String.IsNullOrEmpty(this._selectedAccountForAutoBuy.CardPassword))
                                                                {
                                                                    this.MoreInfo = "Need card password to verify purchase.";
                                                                    return;
                                                                }

                                                                foreach (var index in indexes)
                                                                {
                                                                    code += this._selectedAccountForAutoBuy.CardPassword[Convert.ToInt32(index) - 1];
                                                                }

                                                                String CancelKey = String.Empty;
                                                                if (!String.IsNullOrEmpty(code))
                                                                {
                                                                    for (int i = session.FormElements.Count - 1; i >= 0; i--)
                                                                    {
                                                                        var elem = session.FormElements.ElementAt(i);
                                                                        if (elem.Key.Contains("txtPassword"))
                                                                        {
                                                                            session.FormElements[elem.Key] = code;
                                                                        }
                                                                        else if (elem.Key.Contains("Cancel"))
                                                                        {
                                                                            CancelKey = elem.Key;
                                                                        }
                                                                    }

                                                                    session.FormElements.Remove(CancelKey);
                                                                    url = session.FormElements.Forms[""].Action;

                                                                    if (url.StartsWith("./"))
                                                                    {
                                                                        url = "https://" + uri.Host + url.Replace("./", "/");
                                                                    }

                                                                    str = session.Post(url);
                                                                }

                                                                if (session.FormElements.Forms.ContainsKey("PAResForm"))
                                                                {
                                                                    for (int i = session.FormElements.Count - 1; i >= 0; i--)
                                                                    {
                                                                        var elem = session.FormElements.ElementAt(i);
                                                                        if (elem.Key.Equals("PaRes") || elem.Key.Contains("MD"))
                                                                        {
                                                                            continue;
                                                                        }
                                                                        else
                                                                        {
                                                                            session.FormElements.Remove(elem.Key);
                                                                        }
                                                                    }

                                                                    pares = session.FormElements["PaRes"];
                                                                    str = session.Post(session.FormElements.Forms["PAResForm"].Action);
                                                                }
                                                            }
                                                            else if (!String.IsNullOrEmpty(session.FormElements.Forms[""].Action))
                                                            {
                                                                pares = session.FormElements["PaRes"];
                                                                str = session.Post(session.FormElements.Forms[""].Action);
                                                            }

                                                            #endregion
                                                        }
                                                    }

                                                retry1:
                                                    if (true)
                                                    {
                                                        doc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/"), "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.amodsellComplete\",\"params\":[\"" + this.SessionKey + "\",\"" + uuid + "\",{\"MD\":\"" + md + "\",\"PaRes\":\"" + pares + "\"}],\"id\":1}"));

                                                        if (doc.DocumentNode.InnerText.Contains("faultCode") || doc.DocumentNode.InnerText.Contains("faultString"))
                                                        {
                                                            Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, doc.DocumentNode.InnerHtml, true));
                                                            changeStatus("Buying Failed");
                                                            this.MoreInfo = "Buying Failed";
                                                            this.currLog.MoreInfo = this.MoreInfo;
                                                            this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                                        }
                                                        else if (doc.DocumentNode.InnerHtml == "")
                                                        {
                                                            Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, "Response For Auto Buy is Empty", true));
                                                            this.Price = "";
                                                            if (this.retry)
                                                            {
                                                                changeStatus("Trying again..");
                                                                this.MoreInfo = "Trying again..";
                                                                this.retry = false;
                                                                goto retry1;
                                                            }
                                                            else
                                                            {
                                                                changeStatus("No response from site..");
                                                                this.MoreInfo = "No response from site..";
                                                                this.currLog.MoreInfo = this.MoreInfo;
                                                                this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                                            }
                                                        }
                                                        else if (doc.DocumentNode.InnerText.Contains("Decision is REJECT") || doc.DocumentNode.InnerText.Contains("DCARDREFUSED") || doc.DocumentNode.InnerText.Contains("DINVALIDCARD"))
                                                        {
                                                            if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                                                            {
                                                                this.Ticket.ifChangeCountOf2 = false;
                                                            }
                                                            Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, doc.DocumentNode.InnerHtml, true));
                                                            changeStatus("Card Rejected");
                                                            this.MoreInfo = "Card Rejected";
                                                            this.currLog.MoreInfo = this.MoreInfo;
                                                            this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                                            this.Price = "";
                                                        }
                                                        else if (doc.DocumentNode.InnerText.Contains("DINVALIDDATA"))
                                                        {
                                                            changeStatus("Invalid Account Data");
                                                            this.MoreInfo = "Invalid Account Data";
                                                            this.currLog.MoreInfo = this.MoreInfo;
                                                            this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                                            this.Price = "";
                                                        }
                                                        else
                                                        {
                                                            _extractFoundValues = JObject.Parse(doc.DocumentNode.InnerHtml);
                                                            order = (JArray)_extractFoundValues["result"];

                                                            foreach (var _item in order)
                                                            {
                                                                if (_item.HasValues)
                                                                {
                                                                    JObject _ovj = (JObject)_item;

                                                                    if (_item["Order"] != null)
                                                                    {
                                                                        _ovj = (JObject)_item["Order"];

                                                                        if (_ovj.Property("orderNumber") != null)
                                                                        {
                                                                            String orderNumber = _ovj["orderNumber"].ToString();

                                                                            if (!String.IsNullOrEmpty(orderNumber))
                                                                            {
                                                                                String orderStatus = _ovj["orderStateCode"].ToString();

                                                                                if (!orderStatus.ToLower().Equals("sold"))
                                                                                {
                                                                                    Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, doc.DocumentNode.InnerHtml, true));
                                                                                    changeStatus("Card Rejected");
                                                                                    this.MoreInfo = "Card Rejected";
                                                                                    this.currLog.MoreInfo = this.MoreInfo;
                                                                                    this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                                                                    this.Price = "";
                                                                                }
                                                                                else
                                                                                {
                                                                                    this.MoreInfo = TicketSearchStatus.MoreInfoTicketBought + " Your order number is " + orderNumber;
                                                                                    changeStatus("Confirmation Page Loaded");
                                                                                    this.currLog.MoreInfo = "Your order number is " + orderNumber;
                                                                                    this.currLog.BuyStatus = TicketsLog.AutoBuyStatus;
                                                                                }
                                                                                break;
                                                                            }
                                                                            else
                                                                            {

                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (item["Order"] != null)
                                                {
                                                    ovj = (JObject)item["Order"];

                                                    if (ovj.Property("orderNumber") != null)
                                                    {
                                                        String orderNumber = ovj["orderNumber"].ToString();

                                                        if (!String.IsNullOrEmpty(orderNumber))
                                                        {
                                                            String orderStatus = ovj["orderStateCode"].ToString();

                                                            if (!orderStatus.ToLower().Equals("sold"))
                                                            {
                                                                Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, doc.DocumentNode.InnerHtml, true));
                                                                changeStatus("Card Rejected");
                                                                this.MoreInfo = "Card Rejected";
                                                                this.currLog.MoreInfo = this.MoreInfo;
                                                                this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                                                this.Price = "";
                                                            }
                                                            else
                                                            {
                                                                this.MoreInfo = TicketSearchStatus.MoreInfoTicketBought + " Your order number is " + orderNumber;
                                                                changeStatus("Confirmation Page Loaded");
                                                                this.currLog.MoreInfo = "Your order number is " + orderNumber;
                                                                this.currLog.BuyStatus = TicketsLog.AutoBuyStatus;
                                                            }
                                                            break;
                                                        }
                                                        else
                                                        {

                                                        }
                                                    }
                                                }
                                            }

                                            #endregion
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Debug.WriteLine(ex.Message);
                                }
                            }
                            else
                            {
                                HtmlNode orderNumber = this.doc.DocumentNode.SelectSingleNode("//name[text()='orderNumber']");
                            }
                            if (this._CurrentParameter != null)
                            {
                                if (this._CurrentParameter.Bought == null)
                                {
                                    this._CurrentParameter.Bought = 0;
                                }
                                this._CurrentParameter.Bought++;
                            }

                            lock (this.Ticket)
                            {
                                this.Ticket.BuyCount++;

                                if (this.Ticket.BuyHistory.ContainsKey(this._selectedAccountForAutoBuy.EmailAddress))
                                {
                                    this.Ticket.BuyHistory[this._selectedAccountForAutoBuy.EmailAddress] += 1;
                                    this.Ticket.SaveTicket();
                                }
                                else
                                {
                                    this.Ticket.BuyHistory.Add(this._selectedAccountForAutoBuy.EmailAddress, 1);
                                    this.Ticket.SaveTicket();
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
                        }
                    }
                    else
                    {
                        this.MoreInfo = TicketSearchStatus.MoreInfoAccountNotAvailable;
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Debug.WriteLine(ex.Message + " - " + ex.StackTrace);
                }
                catch (Exception xe)
                {
                    Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                }
            }
        }

        Boolean processTixAutoBuyPage()
        {
            Boolean result = false;
            Boolean isMatched = false;
            JObject PaymentObj = null;

            try
            {
                if (this.IfAutoBuy && this.IfWorking && this.Ticket.isRunning)
                {
                    this._selectedAccountForAutoBuy = null;

                    lock (this.Ticket)
                    {
                        if (this.Ticket.BuyHistory == null)
                        {
                            this.Ticket.BuyHistory = new Dictionary<String, int>();
                        }
                    }

                    this._selectedAccountForAutoBuy = this.selectTicketAccount();

                    if (this._selectedAccountForAutoBuy != null && this.IfWorking && this.Ticket.isRunning)
                    {
                        string firstSixDigits = string.Empty, lastFourDigits = string.Empty;
                        try
                        {
                             firstSixDigits = this._selectedAccountForAutoBuy.CardNumber.Substring(0, 6);
                             lastFourDigits = this._selectedAccountForAutoBuy.CardNumber.Remove(0, this._selectedAccountForAutoBuy.CardNumber.Length - 4);
                            this.currLog.Account = (this._selectedAccountForAutoBuy != null) ? this._selectedAccountForAutoBuy.EmailAddress : "";
                        }
                        catch (Exception ex)
                        {
                        }

                        this.autobuyLog = new AutobuyLogs(this.Ticket.TicketName, this.Ticket.URL);
                        this.autobuyLog.Email = this._selectedAccountForAutoBuy.EmailAddress;
                        this.autobuyLog.Password = this._selectedAccountForAutoBuy.Password;
                        this.autobuyLog.AccountName = this._selectedAccountForAutoBuy.AccountName;

                        try
                        {
                            string postData = String.Empty;

                            this.MoreInfo = "Buying: " + this._selectedAccountForAutoBuy.EmailAddress;

                            string currency = String.Empty;
                            string cardType = String.Empty;
                            string pmCode = String.Empty;
                            string cardTypeNum = string.Empty;
                            string country = string.Empty;
                            string state = string.Empty;
                            String authorization = String.Empty;

                            /** selects the country **/
                            getCountryStr(ref country);

                            //if (!this.isGuest)
                            {
                                Thread.Sleep(1000);

                                changeStatus(TicketSearchStatus.SigninPageStatus);

                                /*************************
                                  Get Authorization Code
                                 *************************/

                                authorization = getAuthorizationCode();

                                if (String.IsNullOrEmpty(authorization))
                                {
                                    this.MoreInfo += ", Unable to login. Please review!";
                                    this.currLog.MoreInfo = this.MoreInfo;

                                    return false;
                                }

                                if (!String.IsNullOrEmpty(this.AccessToken))
                                {
                                    this.MoreInfo = "Logged In successfully with : " + this._selectedAccountForAutoBuy.EmailAddress;
                                    changeStatus(TicketSearchStatus.PaymentPageStatus);
                                    Thread.Sleep(1000);

                                    //this.AuthorizarionHeader = "Basic " + Convert.ToBase64String(Encoding.UTF8.GetBytes(this._selectedAccountForAutoBuy.EmailAddress + ":" + "undefined"));
                                    //string response = AXSEvent.get(this, "https://api.axs.com/proxy/v2/users/1/ots/" + this._selectedAccountForAutoBuy.EmailAddress.Replace("@", "%40") + "/ots/customer?access_token=" + this.AccessToken + "&authorization=" + System.Web.HttpUtility.UrlEncode(authorization) + "&context_id=" + this.contextID + "&sessionID=" + this.SessionKey + "&region=2");
                                    //this.AuthorizarionHeader = String.Empty;
                                    string userID = String.Empty;
                                    string strhtml = "";
                                    string response = "";
                                    this.Session.Payload = "{\"token\":\"" + mpsToken + "\"}";//99dce376-70a4-4d09-953d-4fd7c7db8a19"}"
                                    if (!this.Ticket.IsUkEvent)
                                    {
                                        response = Session.Post("https://unifiedapicommerce.us-prod0.axs.com/v2/user/payments?onsaleID=" + this.OnSaleUrl);
                                    }
                                    else {
                                        response = Session.Post("https://unifiedapicommerce.axs.co.uk/v2/user/payments?onsaleID=" + this.OnSaleUrl);
                                    }
                                    
                                    //File.AppendAllLines("d.d", new String[] { "login2: " + response });

                                    if (!String.IsNullOrEmpty(response))
                                    {
                                        JObject obj = JObject.Parse(response);

                                        if (obj.Property("id") != null)
                                        {
                                            this.extCustId = Convert.ToString(obj["id"]);
                                        }

                                        if (!this.isGuest)
                                        {
                                            #region not a guest

                                            if (obj.Property("payments") != null)
                                            {
                                                JArray payment = (JArray)obj["payments"];


                                                lastFourDigits = String.Empty;

                                                if (this._selectedAccountForAutoBuy.GroupName.Equals("login"))
                                                {
                                                    lastFourDigits = this._selectedAccountForAutoBuy.CardLastDigits;
                                                }
                                                else
                                                {
                                                    lastFourDigits = this._selectedAccountForAutoBuy.CardNumber.Remove(0, this._selectedAccountForAutoBuy.CardNumber.Length - 4);
                                                }

                                                foreach (JObject item in payment)
                                                {
                                                    String last_4 = Convert.ToString(item["cc_last_four"]);

                                                    if (last_4.Equals(lastFourDigits))
                                                    {
                                                        PaymentObj = item;

                                                        isMatched = true;

                                                        break;
                                                    }
                                                }

                                                if (!isMatched)
                                                {
                                                    this.MoreInfo = "No card details matched.";
                                                    this.currLog.MoreInfo = this.MoreInfo;
                                                    //this.currLog.BuyStatus = TicketsLog.NotBuyStatus;

                                                    //return false;
                                                    this.Session.Payload = "{\"nextPage\":\"shop__payment-information-page\"}";
                                                     strhtml = Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/update-timer?onsaleID=" + this.OnSaleUrl);

                                                    Thread.Sleep(1000);

                                                    this.Session.Payload = "{\"nextPage\":\"shop__verify-purchase-page\"}";
                                                    strhtml = Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/update-timer?onsaleID=" + this.OnSaleUrl);

                                                    String wpToken = getWPToken();
                                                    String secureHash2 = getSHA256Hash(this._selectedAccountForAutoBuy.CardNumber.Trim());
                                                    String secureHash = getMD5Hash(this._selectedAccountForAutoBuy.CardNumber.Trim());//secureHash=7df243ee9f523896 "7d92f21a436eee159fd7526c38749653"
                                                    String deviceString = "0400nyhffR+vPCUNf94lis1ztvXl909x61ea/XduyheVIjs4Y9ViIp7I6+kAVX1NYpliW38UhBRx3/QBJbDaL6lc+jm+cQtY9om1dPJZnkiOkusddW7bO74MFhUgxD3Q8IacVHDGE0FN4gN+sv3YW8WI6C8D4aiS2xqGdPJZnkiOkusVIMQ90PCGnB8VWZeDlfpW5NXl7ju4BglH4FGbixNsQiYg2wn1WUxgZNfbcjbO4PMRieADP31pIw0rsXhhSXrLuxQh8GMlIPWYY4NdZuSstIs//BPd61qfjVX++Ov6v3d8Ae0mh/OSZsgH1DGeSyhahZfNQgu+lmSl2pKAmu1wlnpdAGjF3g11Xv94Fqcj/J67RSVCoVYO4GZMo6HzK48+RX/e2hhtDWn1CYi+TBqr3mIbDehLbeQy2FdtAkDF/2UF1zjET9FdaNQbE76a5vfXujgyN5Sf5JsVY3FIVWWhXExZlgkzkmZRPOYe85lXFCRN2krK3MiK1cpqanhehdrqQkjj/Bf3sgBpWZmpMPu3J3Rbz61iBMU+tUplBKI7zAfytuUEpUk+3SlCz8QbOZkvxtv8edPx1HzLAkWat2bGsGftLfiwonPG/pr71oD561pNBqLw/NJvb5LuPzWRjKlMIM+Q05if3PyEKJ5sETrogpipU8Y+CT5OVQLI/nuq72UHhDgZzKbZ7v7uzpZjbtz53kdITC3Lm7bIB9QxnksoWoWXzUILvpZkpdqSgJrtcJZJNPSTmMV8PkfLH/JZWu2VrI3MaSYrgzvK825aVpZM/CT/riUqiozfAOitx40UDza/slJ9rBwgiJI7ISgtaMhIsj69LfM7VRYrI1FeHSbDspvXHhwykQoiE53T97CusKlE42ys2aVDQcSm+xRvn4mvyorim+6kWks+biE23kJUvQm68rvRvAGkcYv1IEAR88cFJGkaA+tmVYvHASJZ4fUWVNPT2tjOcVBjektS2TUz00vPxf10elpGL1/Fzr1mQAgWPDOUEYPXgpJ26YXUMfYcSHpaidL43xL0dbqahWrif36mAJ3ZTHu23WaFMcpDuPL1gw2Oo7OBFbqmwJt5ZpxcwUCAK0X2okZPd8poSYeB1nn/v4B6A25mBDL+bbK9Z4MfW7X909LqhVO3JhDrtCIIR06Yv7IYT1qFsJOX6zJUBV18Roun3LkR21Qa7ofbYcX4YdyN6pw6ldYM7BdUFap28yPZ3cG4utIPDSN/xbk/43Sqb+GNnr6gH7l6tUSf+tT2ljmC4gSS+Oe+vHAjTLjvLYCXsUu0Oxk=";

                                                    postData = "{\"customer\":{\"savePaymentInfo\":true,\"shipping\":{\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" +
                                                       this._selectedAccountForAutoBuy.LastName + "\",\"email\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"address\":{\"address1\":\"" +
                                                       this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town +
                                                       "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"GB\",\"primaryPhone\":\"" +
                                                       this._selectedAccountForAutoBuy.Telephone + "\"}},\"cards\":[{\"paymentType\":\"CREDIT_CARD\",\"paymentID\":\"" + this._selectedAccountForAutoBuy.CardType.Replace(" ", String.Empty).ToUpper() +
                                                       "\",\"nameOnCard\":\"" + this._selectedAccountForAutoBuy.FirstName.Trim() + " " + this._selectedAccountForAutoBuy.LastName.Trim() + "\",\"firstSixDigits\":\"" + firstSixDigits +
                                                       "\",\"lastFourDigits\":\"" + lastFourDigits + "\",\"cvv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"expireMonth\":\"" + this._selectedAccountForAutoBuy.ExpiryMonth +
                                                       "\",\"expireYear\":\"" + "20" + this._selectedAccountForAutoBuy.ExpiryYear + "\",\"secureHash\":\"" + secureHash + "\",\"secureHash2\":\"" + secureHash2 + "\",\"wpToken\":\"" + wpToken + "\",\"address\":{\"address1\":\"" +
                                                       this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town +
                                                       "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"GB\",\"primaryPhone\":\"" +
                                                       this._selectedAccountForAutoBuy.Telephone + "\"}}],\"userID\":" + (String.IsNullOrEmpty(this.extCustId) ? "null" : this.extCustId) +
                                                       ",\"locale\":\"en-GB\",\"communicationPreferences\":[{\"type\":null,\"optOut\":true},{\"type\":null,\"optOut\":true}]},\"paymentPlanID\":null,\"accountRestrictionID\":null,\"appliedPaymentPoints\":null,\"offerRestrictionID\":null,\"insurance\":{\"wasOffered\":false,\"isSelected\":null,\"quotePackID\":null,\"quoteID\":null,\"treatmentID\":null,\"productID\":null,\"nbOfTicket\":" + this._CurrentParameter.Quantity + ",\"maxNbOfTicket\":" + this.TmEvent.MaxNoOfTicket + ",\"totalInsurancePrice\":null},\"amexPoints\":null,\"braintreeDeviceString\":null,\"createOrderOnly\":false,\"locale\":\"en-GB\",\"is3dsecureEnabled\":" + this.TmEvent.is3dsecureEnabled.ToString().ToLower() + ",\"isFullPointsPayment\":false,\"paymentRefNumber\":null,\"postAuthorizationResponse\":null,\"simulate3DSecure\":false,\"storePaymentMethod\":null,\"digitalWallet\":null,\"isTangibleMOD\":false,\"thirdPartyConsents\":[{\"id\":1,\"checked\":false}],\"communicationOptIns\":[{\"id\":82,\"checked\":true}],\"storePaymentMethod\":null, \"visaCheckoutPayment\": false,\"displayNeighborhoods\": false,\"requestDate\":\"" + DateTime.UtcNow.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'") + "\"}";
                                                }
                                                else
                                                {
                                                    #region Credit Card found
                                                    if (!this.Ticket.IsUkEvent)//if (!this.Ticket.URL.Contains("shop.axs.co.uk/") && !this.Ticket.URL.Contains("q.axs.co.uk/"))
                                                    {
                                                        #region US Event
                                                        String _url = "https://unifiedapicommerce.us-prod0.axs.com/veritix/insurance/price?sessionID=" + this.SessionKey;
                                                        string postD = "{\"onsaleID\":\"" + System.Web.HttpUtility.UrlDecode(this.OnSaleUrl) + "\",\"totalCost\":" + this.TotalPrice.Trim() + ",\"totalCoverageAmount\":" + this.TotalPrice.Trim() + ",\"numberOfTickets\":1,\"ticketQtyLimit\":10,\"sessionID\":\"" + this.SessionKey + "\",\"deviceCategory\":\"Desktop\",\"requestingPlatform\":\"EventShopper-Falcon\",\"RequestingPlatformVersion\":\"0.7.40\",\"customer\":{\"country\":\"" + PaymentObj["country"].ToString() + "\",\"city\":\"" + PaymentObj["city"].ToString() + "\",\"postalCode\":\"" + PaymentObj["postal_code"].ToString() + "\",\"region\":\"" + PaymentObj["state_province"].ToString() + "\"}}";

                                                        this.Session.Payload = postD;

                                                        String _strHTML = this.Session.Post(_url);

                                                        _strHTML = Regex.Replace(_strHTML, @"<[^>]*>", String.Empty);

                                                        try
                                                        {
                                                            JObject insurance = JObject.Parse(_strHTML);

                                                            if (insurance.Property("success") != null)
                                                            {
                                                                if (Convert.ToBoolean(((JValue)insurance["success"]).Value.ToString()))
                                                                {
                                                                    String quotaPackID = String.Empty;
                                                                    String treatmentID = String.Empty;
                                                                    String quoteID = String.Empty;
                                                                    String insurancePrice = String.Empty;
                                                                    String productID = String.Empty;

                                                                    if (insurance.Property("quoteID") != null)
                                                                    {
                                                                        quoteID = insurance["quoteID"].ToString();
                                                                    }

                                                                    if (insurance.Property("quotePackID") != null)
                                                                    {
                                                                        quotaPackID = insurance["quotePackID"].ToString();
                                                                    }

                                                                    if (insurance.Property("totalInsurancePrice") != null)
                                                                    {
                                                                        insurancePrice = insurance["totalInsurancePrice"].ToString();
                                                                    }

                                                                    if (insurance.Property("productCode") != null)
                                                                    {
                                                                        productID = insurance["productCode"].ToString();
                                                                    }

                                                                    if (insurance.Property("treatmentID") != null)
                                                                    {
                                                                        treatmentID = insurance["treatmentID"].ToString();
                                                                    }
                                                                    postData = "{\"customer\":{\"savePaymentInfo\":false,\"shipping\":{\"firstName\":\"" + obj["name"]["first"].ToString()+ "\",\"lastName\":\"" + obj["name"]["last"].ToString() +"\",\"email\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"address\":{\"address1\":\"" + PaymentObj["address1"].ToString() + "\",\"address2\":\"" + PaymentObj["address2"].ToString() + "\",\"city\":\"" + PaymentObj["city"].ToString() + "\",\"postalCode\":\"" + PaymentObj["postal_code"].ToString() + "\",\"regionCode\":\"" + PaymentObj["state_province"].ToString() + "\",\"countryCode\":\"" + PaymentObj["country"].ToString() + "\",\"primaryPhone\":\"" + PaymentObj["phone"].ToString() + "\"}},\"cards\":[{\"paymentType\":\"CREDIT_CARD\",\"paymentToken\":\"" + PaymentObj["payment_token"].ToString() + "\",\"paymentID\":\"" + PaymentObj["cc_type"].ToString() + "\",\"nameOnCard\":\"" + PaymentObj["card_name"].ToString() + "\",\"firstSixDigits\":\"" + "" + "\",\"lastFourDigits\":\"" + "" + "\",\"cardNumber\":\"" + "" + "\",\"expireMonth\":" + PaymentObj["cc_exp_month"].ToString() + ",\"expireYear\":" + PaymentObj["cc_exp_year"].ToString() + ",\"cvv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"address\":{\"address1\":\"" + PaymentObj["address1"].ToString() + "\",\"address2\":\"" + PaymentObj["address2"].ToString() + "\",\"city\":\"" + PaymentObj["city"].ToString() + "\",\"postalCode\":\"" + PaymentObj["postal_code"].ToString() + "\",\"regionCode\":\"" + PaymentObj["state_province"].ToString() + "\",\"countryCode\":\"" + PaymentObj["country"].ToString() + "\",\"primaryPhone\":\"" + PaymentObj["phone"].ToString() + "\"}}],\"userID\":" + (String.IsNullOrEmpty(this.extCustId) ? "null" : this.extCustId) + ",\"locale\":\"en\",\"communicationPreferences\":[{\"type\":null,\"optOut\":true},{\"type\":null,\"optOut\":true}]},\"paymentPlanID\":null,\"accountRestrictionID\":null,\"offerRestrictionID\":null,\"insurance\":{\"wasOffered\":true,\"isSelected\":null,\"quotePackID\":\"" + quotaPackID + "\",\"quoteID\":\"" + quoteID + "\",\"treatmentID\":\"" + treatmentID + "\",\"productID\":\"" + productID + "\",\"nbOfTicket\":" + this.TmEvent.NoOfTicket + ",\"maxNbOfTicket\":" + this.TmEvent.MaxNoOfTicket + ",\"totalInsurancePrice\":" + insurancePrice + "},\"amexPoints\":null}";

                                                                    //postData = "{\"customer\":{\"savePaymentInfo\":false,\"shipping\":{\"firstName\":\"" + PaymentObj["first_name"].ToString() + "\",\"lastName\":\"" + PaymentObj["last_name"].ToString() + "\",\"email\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"address\":{\"address1\":\"" + PaymentObj["address1"].ToString() + "\",\"address2\":\"" + PaymentObj["address2"].ToString() + "\",\"city\":\"" + PaymentObj["city"].ToString() + "\",\"postalCode\":\"" + PaymentObj["postal_code"].ToString() + "\",\"regionCode\":\"" + PaymentObj["state_province"].ToString() + "\",\"countryCode\":\"" + PaymentObj["country"].ToString() + "\",\"primaryPhone\":\"" + PaymentObj["phone"].ToString() + "\"}},\"cards\":[{\"paymentType\":\"CREDIT_CARD\",\"paymentToken\":\"" + PaymentObj["payment_token"].ToString() + "\",\"paymentID\":\"" + PaymentObj["cc_type"].ToString() + "\",\"nameOnCard\":\"" + PaymentObj["card_name"].ToString() + "\",\"firstSixDigits\":\"" + "" + "\",\"lastFourDigits\":\"" + "" + "\",\"cardNumber\":\"" + "" + "\",\"expireMonth\":" + PaymentObj["cc_exp_month"].ToString() + ",\"expireYear\":" + PaymentObj["cc_exp_year"].ToString() + ",\"cvv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"address\":{\"address1\":\"" + PaymentObj["address1"].ToString() + "\",\"address2\":\"" + PaymentObj["address2"].ToString() + "\",\"city\":\"" + PaymentObj["city"].ToString() + "\",\"postalCode\":\"" + PaymentObj["postal_code"].ToString() + "\",\"regionCode\":\"" + PaymentObj["state_province"].ToString() + "\",\"countryCode\":\"" + PaymentObj["country"].ToString() + "\",\"primaryPhone\":\"" + PaymentObj["phone"].ToString() + "\"}}],\"userID\":" + (String.IsNullOrEmpty(this.extCustId) ? "null" : this.extCustId) + ",\"locale\":\"en\",\"communicationPreferences\":[{\"type\":null,\"optOut\":true},{\"type\":null,\"optOut\":true}]},\"paymentPlanID\":null,\"accountRestrictionID\":null,\"offerRestrictionID\":null,\"insurance\":{\"wasOffered\":true,\"isSelected\":null,\"quotePackID\":\"" + quotaPackID + "\",\"quoteID\":\"" + quoteID + "\",\"treatmentID\":\"" + treatmentID + "\",\"productID\":\"" + productID + "\",\"nbOfTicket\":" + this.TmEvent.NoOfTicket + ",\"maxNbOfTicket\":" + this.TmEvent.MaxNoOfTicket + ",\"totalInsurancePrice\":" + insurancePrice + "},\"amexPoints\":null}";
                                                                }
                                                            }
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            Debug.WriteLine(ex.Message);
                                                        }
                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        this.Session.Payload = "{\"nextPage\":\"shop__payment-information-page\"}";
                                                        strhtml = Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/update-timer?onsaleID=" + this.OnSaleUrl);

                                                        Thread.Sleep(1000);

                                                        this.Session.Payload = "{\"nextPage\":\"shop__verify-purchase-page\"}";
                                                        strhtml = Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/update-timer?onsaleID=" + this.OnSaleUrl);

                                                        postData = "{\"customer\":{\"savePaymentInfo\":false,\"shipping\":{\"firstName\":\"" + obj["name"]["first"].ToString() + "\",\"lastName\":\"" + obj["name"]["last"].ToString() +
                                                            "\",\"email\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"address\":{\"address1\":\"" + PaymentObj["address1"].ToString() + "\",\"address2\":\"" + PaymentObj["address2"].ToString() +
                                                            "\",\"city\":\"" + PaymentObj["city"].ToString() + "\",\"postalCode\":\"" + PaymentObj["postal_code"].ToString() + "\",\"regionCode\":\"" + PaymentObj["state_province"].ToString() +
                                                            "\",\"countryCode\":\"" + PaymentObj["country"].ToString() + "\",\"primaryPhone\":\"" + PaymentObj["phone"].ToString() + "\"}},\"cards\":[{\"paymentType\":\"CREDIT_CARD\",\"paymentToken\":\"" +
                                                            PaymentObj["payment_token"].ToString() + "\",\"paymentID\":\"" + PaymentObj["cc_type"].ToString() + "\",\"nameOnCard\":\"" + PaymentObj["card_name"].ToString() + "\",\"firstSixDigits\":\"" +
                                                            "" + "\",\"lastFourDigits\":\"" + "" + "\",\"cardNumber\":\"" + "" + "\",\"expireMonth\":" + PaymentObj["cc_exp_month"].ToString() + ",\"expireYear\":" + PaymentObj["cc_exp_year"].ToString() +
                                                            ",\"cvv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"address\":{\"address1\":\"" + PaymentObj["address1"].ToString() + "\",\"address2\":\"" + PaymentObj["address2"].ToString() +
                                                            "\",\"city\":\"" + PaymentObj["city"].ToString() + "\",\"postalCode\":\"" + PaymentObj["postal_code"].ToString() + "\",\"regionCode\":\"" + PaymentObj["state_province"].ToString() +
                                                            "\",\"countryCode\":\"" + PaymentObj["country"].ToString() + "\",\"primaryPhone\":\"" + PaymentObj["phone"].ToString() + "\"}}],\"userID\":" + (String.IsNullOrEmpty(this.extCustId) ? "null" : this.extCustId) +
                                                            ",\"locale\":\"en-GB\",\"communicationPreferences\":[{\"type\":null,\"optOut\":true},{\"type\":null,\"optOut\":true}]},\"paymentPlanID\":null,\"accountRestrictionID\":null,\"offerRestrictionID\":null,\"insurance\":{\"wasOffered\":false,\"isSelected\":null,\"quotePackID\":null,\"quoteID\":null,\"treatmentID\":null,\"productID\":null,\"nbOfTicket\":" +
                                                            this._CurrentParameter.Quantity + ",\"maxNbOfTicket\":" + this.TmEvent.MaxNoOfTicket + ",\"totalInsurancePrice\":null},\"amexPoints\":null,\"braintreeDeviceString\":null,\"createOrderOnly\":false,\"locale\":\"en-GB\",\"thirdPartyConsents\":[{\"id\":1,\"checked\":false}],\"communicationOptIns\":[{\"id\":82,\"checked\":true}],\"storePaymentMethod\":null,\"digitalWallet\":null,\"is3dsecureEnabled\":" + this.TmEvent.is3dsecureEnabled.ToString().ToLower() +
                                                            ",\"postAuthorizationResponse\":null,\"paymentRefNumber\":null,\"isTangibleMOD\":false,\"visaCheckoutPayment\":false,\"displayNeighborhoods\":false,\"simulate3DSecure\":false,\"requestDate\":\"" + DateTime.UtcNow.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'") + "\",\"appliedPaymentPoints\":null,\"isFullPointsPayment\":false}";
                                                    }
                                                    #endregion
                                                }
                                            }
                                            else
                                            {
                                                this.MoreInfo = "Please select add payment info into your account.";
                                                this.currLog.MoreInfo = this.MoreInfo;
                                                this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                                return false;
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            #region Guest Checkout
                                            /** selects the country **/
                                            // getCountryStr(ref country);

                                            /** selects the state **/
                                            getStateStr(ref state);

                                            /** gets buying details **/
                                            getBuyingDetails(ref cardType, ref pmCode, ref currency);

                                            if (!this.Ticket.IsUkEvent) //if (!this.Ticket.URL.Contains("shop.axs.co.uk/") && !this.Ticket.URL.Contains("q.axs.co.uk/"))
                                            {
                                                #region US Event

                                                postData = "{\"customer\":{\"savePaymentInfo\":false,\"shipping\":{\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" + this._selectedAccountForAutoBuy.LastName + "\",\"email\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"address\":{\"address1\":\"" + this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town + "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"" + country + "\",\"primaryPhone\":\"" + this._selectedAccountForAutoBuy.Telephone + "\"}},\"cards\":[{\"paymentType\":\"CREDIT_CARD\",\"paymentToken\":\"\",\"paymentID\":\"" + this._selectedAccountForAutoBuy.CardType.Replace(" ", String.Empty).ToUpper() + "\",\"nameOnCard\":\"" + this._selectedAccountForAutoBuy.FirstName.Trim() + " " + this._selectedAccountForAutoBuy.LastName.Trim() + "\",\"firstSixDigits\":\"" + firstSixDigits + "\",\"lastFourDigits\":\"" + lastFourDigits + "\",\"cardNumber\":\"" + this._selectedAccountForAutoBuy.CardNumber + "\",\"expireMonth\":\"" + this._selectedAccountForAutoBuy.ExpiryMonth + "\",\"expireYear\":\"" + "20" + this._selectedAccountForAutoBuy.ExpiryYear + "\",\"cvv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"address\":{\"address1\":\"" + this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town + "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"" + country + "\",\"primaryPhone\":\"" + this._selectedAccountForAutoBuy.Telephone + "\"}}],\"userID\":" + (String.IsNullOrEmpty(this.extCustId) ? "null" : this.extCustId) + ",\"locale\":\"en\",\"communicationPreferences\":[{\"type\":null,\"optOut\":true},{\"type\":null,\"optOut\":true}]},\"paymentPlanID\":null,\"accountRestrictionID\":null,\"offerRestrictionID\":null,\"amexPoints\":null}";

                                                String _url = "https://unifiedapicommerce.us-prod0.axs.com/veritix/insurance/price?sessionID=" + this.SessionKey;


                                                this.Session.Payload = "{\"onsaleID\":\"" + System.Web.HttpUtility.UrlDecode(this.OnSaleUrl) + "\",\"totalCost\":" + this.TotalPrice.Trim() + ",\"totalCoverageAmount\":" + this.TotalPrice.Trim() + ",\"numberOfTickets\":1,\"ticketQtyLimit\":10,\"sessionID\":\"" + this.SessionKey + "\",\"deviceCategory\":\"Desktop\",\"requestingPlatform\":\"EventShopper-Falcon\",\"RequestingPlatformVersion\":\"1.5.0\",\"customer\":{\"country\":\"" + country + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town + "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"region\":\"" + state + "\"}}";

                                                String _strHTML = this.Session.Post(_url);

                                                if (this.autobuyLog != null)
                                                    this.autobuyLog.Responses.Add("POST LOGIN", _strHTML);
                                                //WriteToFile(DateTime.Now + " => Post Login => " + _strHTML + " => " + this._selectedAccountForAutoBuy.EmailAddress + " " + this._selectedAccountForAutoBuy.Password);

                                                _strHTML = Regex.Replace(_strHTML, @"<[^>]*>", String.Empty);

                                                try
                                                {
                                                    JObject insurance = JObject.Parse(_strHTML);

                                                    if (insurance.Property("success") != null)
                                                    {
                                                        String quotaPackID = String.Empty;
                                                        String treatmentID = String.Empty;
                                                        String quoteID = String.Empty;
                                                        String insurancePrice = String.Empty;
                                                        String productID = String.Empty;

                                                        if (Convert.ToBoolean(((JValue)insurance["success"]).Value.ToString()))
                                                        {
                                                            #region make valid post data

                                                            if (insurance.Property("quoteID") != null)
                                                            {
                                                                quoteID = insurance["quoteID"].ToString();
                                                            }

                                                            if (insurance.Property("quotePackID") != null)
                                                            {
                                                                quotaPackID = insurance["quotePackID"].ToString();
                                                            }

                                                            if (insurance.Property("totalInsurancePrice") != null)
                                                            {
                                                                insurancePrice = insurance["totalInsurancePrice"].ToString();
                                                            }

                                                            if (insurance.Property("productCode") != null)
                                                            {
                                                                productID = insurance["productCode"].ToString();
                                                            }

                                                            if (insurance.Property("treatmentID") != null)
                                                            {
                                                                treatmentID = insurance["treatmentID"].ToString();
                                                            }
                                                            #endregion
                                                        }

                                                        userID = String.Empty;

                                                        this.Session.Payload = "{\"token\":\"" + mpsToken + "\"}";//99dce376-70a4-4d09-953d-4fd7c7db8a19"}"
                                                         strhtml = Session.Post("https://unifiedapicommerce.us-prod0.axs.com/v2/user/payments?onsaleID=" + this.OnSaleUrl);
                                                        if (!String.IsNullOrEmpty(strhtml))
                                                        {
                                                            JObject objuserid = JObject.Parse(strhtml);
                                                            if (objuserid != null)
                                                            {
                                                                userID = objuserid["id"].ToString();
                                                            }
                                                        }


                                                        this.Session.Payload = "{\"nextPage\":\"shop__payment-information-page\"}";
                                                        strhtml = Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/update-timer?onsaleID=" + this.OnSaleUrl);

                                                        Thread.Sleep(1000);

                                                        this.Session.Payload = "{\"nextPage\":\"shop__verify-purchase-page\"}";
                                                        strhtml = Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/update-timer?onsaleID=" + this.OnSaleUrl);

                                                        postData = "{\"customer\":{\"savePaymentInfo\":false,\"shipping\":{\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" +
                                                            this._selectedAccountForAutoBuy.LastName + "\",\"email\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"address\":{\"address1\":\"" +
                                                            this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town +
                                                            "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"" + country + "\",\"primaryPhone\":\"" +
                                                            this._selectedAccountForAutoBuy.Telephone + "\"}},\"cards\":[{\"paymentType\":\"CREDIT_CARD\",\"paymentID\":\"" + this._selectedAccountForAutoBuy.CardType.Replace(" ", String.Empty).ToUpper() +
                                                            "\",\"nameOnCard\":\"" + this._selectedAccountForAutoBuy.FirstName.Trim() + " " + this._selectedAccountForAutoBuy.LastName.Trim() + "\",\"firstSixDigits\":\"" + firstSixDigits +
                                                            "\",\"lastFourDigits\":\"" + lastFourDigits + "\",\"cardNumber\":\"" + this._selectedAccountForAutoBuy.CardNumber + "\",\"cvv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"expireMonth\":\"" + this._selectedAccountForAutoBuy.ExpiryMonth +
                                                            "\",\"expireYear\":\"" + "20" + this._selectedAccountForAutoBuy.ExpiryYear + "\",\"address\":{\"address1\":\"" +
                                                            this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town +
                                                            "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"" + country + "\",\"primaryPhone\":\"" +
                                                            this._selectedAccountForAutoBuy.Telephone + "\"}}],\"userID\":" + (String.IsNullOrEmpty(userID) ? "null" : userID) +
                                                            ",\"locale\":\"en-US\",\"communicationPreferences\":[{\"type\":null,\"optOut\":true},{\"type\":null,\"optOut\":true}]},\"paymentPlanID\":null,\"accountRestrictionID\":null,\"offerRestrictionID\":" + (String.IsNullOrEmpty(this.offerRestrictionID) ? "null" : this.offerRestrictionID) + ",\"insurance\":{\"wasOffered\":true,\"isSelected\":false,\"quotePackID\":\"" + quotaPackID + "\",\"quoteID\":\"" + quoteID + "\",\"treatmentID\":\"" + treatmentID + "\",\"productID\":\"" + productID + "\",\"nbOfTicket\":" + this._CurrentParameter.Quantity + ",\"maxNbOfTicket\":" + this.TmEvent.MaxNoOfTicket + ",\"totalInsurancePrice\":" + (String.IsNullOrEmpty(insurancePrice) ? "null" : insurancePrice) +
                                                            "},\"amexPoints\":null,\"braintreeDeviceString\":null,\"createOrderOnly\":false,\"locale\":\"en-US\",\"is3dsecureEnabled\":false,\"paymentRefNumber\":null,\"postAuthorizationResponse\":null,\"simulate3DSecure\":false,\"storePaymentMethod\":null,\"digitalWallet\":null,\"displayNeighborhoods\":false,\"isTangibleMOD\":false,\"thirdPartyConsents\":[],\"communicationOptIns\":[],\"storePaymentMethod\":null,\"visaCheckoutPayment\":false,\"requestDate\":\"" + DateTime.UtcNow.ToString("yyyy-MM-dd'T'hh:mm:ss'Z'") + "\"}";
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    Debug.WriteLine(ex.Message);
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                Thread.Sleep(1500);

                                                this.Session.Payload = "{\"nextPage\":\"shop__payment-information-page\"}";
                                                strhtml = Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/update-timer?onsaleID=" + this.OnSaleUrl);

                                                Thread.Sleep(1500);

                                                this.Session.Payload = "{\"nextPage\":\"shop__verify-purchase-page\"}";
                                                strhtml = Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/update-timer?onsaleID=" + this.OnSaleUrl);


                                                String wpToken = getWPToken();
                                                String secureHash2 = getSHA256Hash(this._selectedAccountForAutoBuy.CardNumber.Trim());
                                                String secureHash = getMD5Hash(this._selectedAccountForAutoBuy.CardNumber.Trim());//secureHash=7df243ee9f523896 "7d92f21a436eee159fd7526c38749653"
                                                String deviceString = "0400nyhffR+vPCUNf94lis1ztvXl909x61ea/XduyheVIjs4Y9ViIp7I6+kAVX1NYpliW38UhBRx3/QBJbDaL6lc+jm+cQtY9om1dPJZnkiOkusddW7bO74MFhUgxD3Q8IacVHDGE0FN4gN+sv3YW8WI6C8D4aiS2xqGdPJZnkiOkusVIMQ90PCGnB8VWZeDlfpW5NXl7ju4BglH4FGbixNsQiYg2wn1WUxgZNfbcjbO4PMRieADP31pIw0rsXhhSXrLuxQh8GMlIPWYY4NdZuSstIs//BPd61qfjVX++Ov6v3d8Ae0mh/OSZsgH1DGeSyhahZfNQgu+lmSl2pKAmu1wlnpdAGjF3g11Xv94Fqcj/J67RSVCoVYO4GZMo6HzK48+RX/e2hhtDWn1CYi+TBqr3mIbDehLbeQy2FdtAkDF/2UF1zjET9FdaNQbE76a5vfXujgyN5Sf5JsVY3FIVWWhXExZlgkzkmZRPOYe85lXFCRN2krK3MiK1cpqanhehdrqQkjj/Bf3sgBpWZmpMPu3J3Rbz61iBMU+tUplBKI7zAfytuUEpUk+3SlCz8QbOZkvxtv8edPx1HzLAkWat2bGsGftLfiwonPG/pr71oD561pNBqLw/NJvb5LuPzWRjKlMIM+Q05if3PyEKJ5sETrogpipU8Y+CT5OVQLI/nuq72UHhDgZzKbZ7v7uzpZjbtz53kdITC3Lm7bIB9QxnksoWoWXzUILvpZkpdqSgJrtcJZJNPSTmMV8PkfLH/JZWu2VrI3MaSYrgzvK825aVpZM/CT/riUqiozfAOitx40UDza/slJ9rBwgiJI7ISgtaMhIsj69LfM7VRYrI1FeHSbDspvXHhwykQoiE53T97CusKlE42ys2aVDQcSm+xRvn4mvyorim+6kWks+biE23kJUvQm68rvRvAGkcYv1IEAR88cFJGkaA+tmVYvHASJZ4fUWVNPT2tjOcVBjektS2TUz00vPxf10elpGL1/Fzr1mQAgWPDOUEYPXgpJ26YXUMfYcSHpaidL43xL0dbqahWrif36mAJ3ZTHu23WaFMcpDuPL1gw2Oo7OBFbqmwJt5ZpxcwUCAK0X2okZPd8poSYeB1nn/v4B6A25mBDL+bbK9Z4MfW7X909LqhVO3JhDrtCIIR06Yv7IYT1qFsJOX6zJUBV18Roun3LkR21Qa7ofbYcX4YdyN6pw6ldYM7BdUFap28yPZ3cG4utIPDSN/xbk/43Sqb+GNnr6gH7l6tUSf+tT2ljmC4gSS+Oe+vHAjTLjvLYCXsUu0Oxk=";

                                                if (this._CurrentParameter.GetResaleTix)
                                                {
                                                    postData = "{\"customer\":{\"savePaymentInfo\":false,\"shipping\":{\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" +
                                                   this._selectedAccountForAutoBuy.LastName + "\",\"email\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"address\":{\"address1\":\"" +
                                                   this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town +
                                                   "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"" + country + "\",\"primaryPhone\":\"" +
                                                   this._selectedAccountForAutoBuy.Telephone + "\"}},\"cards\":[{\"paymentType\":\"CREDIT_CARD\",\"paymentID\":\"" + this._selectedAccountForAutoBuy.CardType.Replace(" ", String.Empty).ToUpper() +
                                                   "\",\"nameOnCard\":\"" + this._selectedAccountForAutoBuy.FirstName.Trim() + " " + this._selectedAccountForAutoBuy.LastName.Trim() + "\",\"firstSixDigits\":\"" + firstSixDigits +
                                                   "\",\"lastFourDigits\":\"" + lastFourDigits + "\",\"cardNumber\":\"" + this._selectedAccountForAutoBuy.CardNumber + "\",\"cvv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"expireMonth\":\"" + this._selectedAccountForAutoBuy.ExpiryMonth +
                                                   "\",\"expireYear\":\"" + "20" + this._selectedAccountForAutoBuy.ExpiryYear + "\",\"secureHash\":\"" + secureHash + "\",\"secureHash2\":\"" + secureHash2 + "\",\"wpToken\":\"" + wpToken + "\",\"address\":{\"address1\":\"" +
                                                   this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town +
                                                   "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"" + country + "\",\"primaryPhone\":\"" +
                                                   this._selectedAccountForAutoBuy.Telephone + "\"}}],\"userID\":" + (String.IsNullOrEmpty(this.extCustId) ? "null" : this.extCustId) +
                                                   ",\"locale\":\"en-GB\",\"communicationPreferences\":[{\"type\":null,\"optOut\":true},{\"type\":null,\"optOut\":true}]},\"paymentPlanID\":null,\"accountRestrictionID\":null,\"offerRestrictionID\":null,\"insurance\":{\"wasOffered\":false,\"isSelected\":null,\"quotePackID\":null,\"quoteID\":null,\"treatmentID\":null,\"productID\":null,\"nbOfTicket\":" + this._CurrentParameter.Quantity + ",\"maxNbOfTicket\":" + this.TmEvent.MaxNoOfTicket +
                                                   ",\"totalInsurancePrice\":null},\"amexPoints\":null,\"braintreeDeviceString\":null,\"createOrderOnly\":false,\"locale\":\"en-GB\",\"is3dsecureEnabled\":" + this.TmEvent.is3dsecureEnabled.ToString().ToLower() + ",\"paymentRefNumber\":null,\"postAuthorizationResponse\":null,\"simulate3DSecure\":false,\"shouldCancelOrder\": false,\"storePaymentMethod\":null,\"digitalWallet\":null,\"isTangibleMOD\":false,\"thirdPartyConsents\":[{\"id\":1,\"checked\":false}],\"originalBidId\":null,\"originalSettlementId\":null,\"communicationOptIns\":[],\"visaCheckoutPayment\": false,\"displayNeighborhoods\": false,\"requestDate\":\"" + DateTime.UtcNow.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'") + "\",\"appliedPaymentPoints\": null,\"isFullPointsPayment\": false,\"surveyAnswers\":[],\"bookedThirdPartyParkingOffers\":[]}";
                                                }
                                                else
                                                {

                                                    postData = "{\"customer\":{\"savePaymentInfo\":false,\"shipping\":{\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" +
                                                       this._selectedAccountForAutoBuy.LastName + "\",\"email\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"address\":{\"address1\":\"" +
                                                       this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town +
                                                       "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"" + country + "\",\"primaryPhone\":\"" +
                                                       this._selectedAccountForAutoBuy.Telephone + "\"}},\"cards\":[{\"paymentType\":\"CREDIT_CARD\",\"paymentID\":\"" + this._selectedAccountForAutoBuy.CardType.Replace(" ", String.Empty).ToUpper() +
                                                       "\",\"nameOnCard\":\"" + this._selectedAccountForAutoBuy.FirstName.Trim() + " " + this._selectedAccountForAutoBuy.LastName.Trim() + "\",\"firstSixDigits\":\"" + firstSixDigits +
                                                       "\",\"lastFourDigits\":\"" + lastFourDigits + "\",\"cvv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"expireMonth\":\"" + this._selectedAccountForAutoBuy.ExpiryMonth +
                                                       "\",\"expireYear\":\"" + "20" + this._selectedAccountForAutoBuy.ExpiryYear + "\",\"secureHash\":\"" + secureHash + "\",\"secureHash2\":\"" + secureHash2 + "\",\"wpToken\":\"" + wpToken + "\",\"address\":{\"address1\":\"" +
                                                       this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town +
                                                       "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"" + country + "\",\"primaryPhone\":\"" +
                                                       this._selectedAccountForAutoBuy.Telephone + "\"}}],\"userID\":" + (String.IsNullOrEmpty(this.extCustId) ? "null" : this.extCustId) +
                                                       ",\"locale\":\"en-GB\",\"communicationPreferences\":[{\"type\":null,\"optOut\":true},{\"type\":null,\"optOut\":true}]},\"paymentPlanID\":null,\"accountRestrictionID\":null,\"offerRestrictionID\":null,\"insurance\":{\"wasOffered\":false,\"isSelected\":null,\"quotePackID\":null,\"quoteID\":null,\"treatmentID\":null,\"productID\":null,\"nbOfTicket\":" + this._CurrentParameter.Quantity + ",\"maxNbOfTicket\":" + this.TmEvent.MaxNoOfTicket +
                                                       ",\"totalInsurancePrice\":null},\"amexPoints\":null,\"braintreeDeviceString\":null,\"createOrderOnly\":false,\"locale\":\"en-GB\",\"is3dsecureEnabled\":" + this.TmEvent.is3dsecureEnabled.ToString().ToLower() + ",\"paymentRefNumber\":null,\"postAuthorizationResponse\":null,\"simulate3DSecure\":false,\"shouldCancelOrder\": false,\"storePaymentMethod\":null,\"digitalWallet\":null,\"isTangibleMOD\":false,\"thirdPartyConsents\":[{\"id\":1,\"checked\":false}],\"originalBidId\":null,\"originalSettlementId\":null,\"communicationOptIns\":[],\"visaCheckoutPayment\": false,\"displayNeighborhoods\": false,\"requestDate\":\"" + DateTime.UtcNow.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'") + "\",\"appliedPaymentPoints\": null,\"isFullPointsPayment\": false,\"surveyAnswers\":[],\"bookedThirdPartyParkingOffers\":[]}";
                                                }
                                            }
                                            #endregion
                                        }
                                    }
                                }
                                else
                                {
                                    this.MoreInfo = "Error.";
                                    this.currLog.MoreInfo = this.MoreInfo;
                                    this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                    return false;
                                }
                            }

                        retry:
                            changeStatus(TicketSearchStatus.PaymentPageStatus);

                            string shippingitems = String.Empty;

                            this.Session.Payload = postData;

                            //Thread.Sleep(3 * 1000);

                            String strHTML = string.Empty;

                            if (this.Ticket.IsUkEvent)//if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                            {
                                this.Session.HTMLWeb.Referrer = "https://shop.axs.co.uk/" + this.OnSaleUrl + "/shop/verify-purchase";
                                strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/order/v2?version=v2&sessionID=" + this.SessionKey + "&onsaleID=" + this.OnSaleUrl + "&token=" + (String.IsNullOrEmpty(mpsToken) ? "null" : System.Web.HttpUtility.UrlEncode(mpsToken)));//System.Web.HttpUtility.UrlEncode(authorization)));
                            }
                            else
                            {
                                strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/order/v2?version=v2&sessionID=" + this.SessionKey + "&onsaleID=" + this.OnSaleUrl + "&token=" + (String.IsNullOrEmpty(mpsToken) ? "null" : System.Web.HttpUtility.UrlEncode(mpsToken)));//System.Web.HttpUtility.UrlEncode(authorization)));
                            }

                            if (this.autobuyLog != null)
                                this.autobuyLog.Responses.Add("ORDER", strHTML);
                            //WriteToFile(DateTime.Now + " => ORDER => " + strHTML + " => " + this._selectedAccountForAutoBuy.EmailAddress + " " + this._selectedAccountForAutoBuy.Password);

                            if (Session.HtmlDocument.DocumentNode.InnerText.Contains("PAYMENT_FAILED") || Session.HtmlDocument.DocumentNode.InnerText.Contains("faultCode") || Session.HtmlDocument.DocumentNode.InnerText.Contains("faultString") || Session.HtmlDocument.DocumentNode.InnerText.Contains("ERROR") || Session.HtmlDocument.DocumentNode.InnerText.Contains("BAD_CREDIT_CARD") || Session.HtmlDocument.DocumentNode.InnerText.Contains("ERROR_PLACE_ORDER"))
                            {
                                String status = String.Empty;

                                try
                                {
                                    JObject JStatus = JObject.Parse(Session.HtmlDocument.DocumentNode.InnerText);
                                    if (JStatus != null)
                                    {
                                        status = JStatus["message"].ToString();
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Debug.WriteLine(ex.Message);
                                }

                                Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, Session.HtmlDocument.DocumentNode.InnerHtml, true));

                                if (!String.IsNullOrEmpty(status))
                                {
                                    changeStatus(status);
                                    this.MoreInfo = status;
                                }
                                else
                                {
                                    changeStatus("Buying Failed");
                                    this.MoreInfo = "Buying Failed";
                                }

                                this.currLog.MoreInfo = this.MoreInfo;
                                this.currLog.BuyStatus = TicketsLog.NotBuyStatus;



                                if (this.retry)
                                {
                                    Thread.Sleep(3 * 1000);

                                    changeStatus("Trying again..");
                                    this.MoreInfo = "Trying again..";
                                    this.retry = false;
                                    goto retry;
                                }
                            }
                            else if (Session.HtmlDocument.DocumentNode.InnerHtml == "")
                            {

                                Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, "Response For Auto Buy is Empty", true));
                                this.Price = "";
                                if (this.retry)
                                {
                                    changeStatus("Trying again..");
                                    this.MoreInfo = "Trying again..";
                                    this.retry = false;
                                    goto retry;
                                }
                                else
                                {
                                    changeStatus("No response from site..");
                                    this.MoreInfo = "No response from site..";
                                    this.currLog.MoreInfo = this.MoreInfo;
                                    this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                }
                            }
                            else if (Session.HtmlDocument.DocumentNode.InnerText.Contains("Decision is REJECT") || Session.HtmlDocument.DocumentNode.InnerText.Contains("DCARDREFUSED") || Session.HtmlDocument.DocumentNode.InnerText.Contains("DINVALIDCARD"))
                            {
                                if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                                {
                                    this.Ticket.ifChangeCountOf2 = false;
                                }
                                Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, doc.DocumentNode.InnerHtml, true));
                                changeStatus("Card Rejected");
                                this.MoreInfo = "Card Rejected";
                                this.currLog.MoreInfo = this.MoreInfo;
                                this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                this.Price = "";
                            }
                            else if (Session.HtmlDocument.DocumentNode.InnerText.Contains("DINVALIDDATA"))
                            {
                                changeStatus("Invalid Account Data");
                                this.MoreInfo = "Invalid Account Data";
                                this.currLog.MoreInfo = this.MoreInfo;
                                this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                this.Price = "";
                            }
                            else if (this.TmEvent.ifJson)
                            {
                                try
                                {
                                    JObject _extractFoundValues = JObject.Parse(Session.HtmlDocument.DocumentNode.InnerHtml);
                                    JArray order = (JArray)_extractFoundValues["result"];

                                    foreach (var item in order)
                                    {
                                        if (item.HasValues)
                                        {
                                            JObject ovj = (JObject)item;
                                            if (item["Order"] != null)
                                            {
                                                ovj = (JObject)item["Order"];

                                                if (ovj.Property("orderNumber") != null)
                                                {
                                                    this.MoreInfo = TicketSearchStatus.MoreInfoTicketBought + " Your order number is " + ovj["orderNumber"];
                                                    changeStatus("Confirmation Page Loaded");
                                                    this.currLog.MoreInfo = "Your order number is " + ovj["orderNumber"];
                                                    this.currLog.BuyStatus = TicketsLog.AutoBuyStatus;
                                                    result = true;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Debug.WriteLine(ex.Message);
                                }
                            }
                            else
                            {
                                try
                                {
                                    JObject _extractFoundValues = JObject.Parse(Session.HtmlDocument.DocumentNode.InnerHtml);
                                    JArray order = (JArray)_extractFoundValues["result"];

                                    if (order != null)
                                    {
                                        foreach (var item in order)
                                        {
                                            if (item.HasValues)
                                            {
                                                JObject ovj = (JObject)item;
                                                if (item["Order"] != null)
                                                {
                                                    ovj = (JObject)item["Order"];

                                                    if (ovj.Property("orderNumber") != null)
                                                    {
                                                        this.MoreInfo = TicketSearchStatus.MoreInfoTicketBought + " Your order number is " + ovj["orderNumber"];
                                                        changeStatus("Confirmation Page Loaded");
                                                        this.currLog.MoreInfo = "Your order number is " + ovj["orderNumber"];
                                                        this.currLog.BuyStatus = TicketsLog.AutoBuyStatus;
                                                        result = true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (_extractFoundValues["orderID"] != null)
                                    {
                                        if (this.Ticket.IsUkEvent)//if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                                        {
                                            if (this.TmEvent.is3dsecureEnabled)
                                            {
                                                changeStatus("Verification Page Loaded");

                                                string paymentRefNumber = _extractFoundValues["threeDSecureResponse"]["paymentRefNumber"].ToString();
                                                string machineCookie = _extractFoundValues["threeDSecureResponse"]["machineCookie"].ToString();
                                                string postAuthorizationResponse = verificationPage(_extractFoundValues);


                                                if (!string.IsNullOrEmpty(postAuthorizationResponse))
                                                {
                                                    string wpToken = getWPToken();
                                                    string secureHash2 = getSHA256Hash(this._selectedAccountForAutoBuy.CardNumber.Trim());
                                                    string secureHash = getMD5Hash(this._selectedAccountForAutoBuy.CardNumber.Trim());

                                                    if (!this.isGuest)
                                                    {
                                                        if (!isMatched)
                                                        {
                                                            /*** The car that you are trying is not saved already 
                                                             *** So, program is trying to save it now
                                                             ***/
                                                            postData = "{\"customer\":{\"savePaymentInfo\":true,\"shipping\":{\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" +
                                                            this._selectedAccountForAutoBuy.LastName + "\",\"email\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"address\":{\"address1\":\"" +
                                                            this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town +
                                                            "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"GB\",\"primaryPhone\":\"" +
                                                            this._selectedAccountForAutoBuy.Telephone + "\"}},\"cards\":[{\"paymentType\":\"CREDIT_CARD\",\"paymentID\":\"" + this._selectedAccountForAutoBuy.CardType.Replace(" ", String.Empty).ToUpper() +
                                                            "\",\"nameOnCard\":\"" + this._selectedAccountForAutoBuy.FirstName.Trim() + " " + this._selectedAccountForAutoBuy.LastName.Trim() + "\",\"firstSixDigits\":\"" + firstSixDigits +
                                                            "\",\"lastFourDigits\":\"" + lastFourDigits + "\",\"cvv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"expireMonth\":\"" + this._selectedAccountForAutoBuy.ExpiryMonth +
                                                            "\",\"expireYear\":\"" + "20" + this._selectedAccountForAutoBuy.ExpiryYear + "\",\"secureHash\":\"" + secureHash + "\",\"secureHash2\":\"" + secureHash2 + "\",\"wpToken\":\"" + wpToken + "\",\"address\":{\"address1\":\"" +
                                                             this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town +
                                                            "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"GB\",\"primaryPhone\":\"" +
                                                            this._selectedAccountForAutoBuy.Telephone + "\"}}],\"userID\":" + (String.IsNullOrEmpty(this.extCustId) ? "null" : this.extCustId) +
                                                             ",\"locale\":\"en-GB\",\"communicationPreferences\":[{\"type\":null,\"optOut\":true},{\"type\":null,\"optOut\":true}]},\"paymentPlanID\":null,\"accountRestrictionID\":null,\"appliedPaymentPoints\":null,\"offerRestrictionID\":null,\"insurance\":{\"wasOffered\":false,\"isSelected\":null,\"quotePackID\":null,\"quoteID\":null,\"treatmentID\":null,\"productID\":null,\"nbOfTicket\":" + this._CurrentParameter.Quantity + ",\"maxNbOfTicket\":" + this.TmEvent.MaxNoOfTicket + ",\"totalInsurancePrice\":null},\"amexPoints\":null,\"braintreeDeviceString\":null,\"createOrderOnly\":false,\"locale\":\"en-GB\",\"is3dsecureEnabled\":" + this.TmEvent.is3dsecureEnabled.ToString().ToLower() + ",\"isFullPointsPayment\":false,\"paymentRefNumber\":null,\"postAuthorizationResponse\":\"" + postAuthorizationResponse + "\",\"simulate3DSecure\":false,\"storePaymentMethod\":null,\"digitalWallet\":null,\"isTangibleMOD\":false,\"thirdPartyConsents\":[{\"id\":1,\"checked\":false}],\"communicationOptIns\":[{\"id\":82,\"checked\":true}],\"storePaymentMethod\":null, \"visaCheckoutPayment\": false,\"displayNeighborhoods\": false,\"requestDate\":\"" + DateTime.UtcNow.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'") + "\"}";
                                                        }
                                                        else
                                                        {
                                                            postData = "{\"customer\":{\"savePaymentInfo\":false,\"shipping\":{\"firstName\":\"" + PaymentObj["first_name"].ToString() + "\",\"lastName\":\"" + PaymentObj["last_name"].ToString() +
                                                            "\",\"email\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"address\":{\"address1\":\"" + PaymentObj["address1"].ToString() + "\",\"address2\":\"" + PaymentObj["address2"].ToString() +
                                                            "\",\"city\":\"" + PaymentObj["city"].ToString() + "\",\"postalCode\":\"" + PaymentObj["postal_code"].ToString() + "\",\"regionCode\":\"" + PaymentObj["state_province"].ToString() +
                                                            "\",\"countryCode\":\"" + PaymentObj["country"].ToString() + "\",\"primaryPhone\":\"" + PaymentObj["phone"].ToString() + "\"}},\"cards\":[{\"paymentType\":\"CREDIT_CARD\",\"paymentToken\":\"" +
                                                            PaymentObj["payment_token"].ToString() + "\",\"paymentID\":\"" + PaymentObj["cc_type"].ToString() + "\",\"nameOnCard\":\"" + PaymentObj["card_name"].ToString() + "\",\"firstSixDigits\":\"" +
                                                            "" + "\",\"lastFourDigits\":\"" + "" + "\",\"cardNumber\":\"" + "" + "\",\"expireMonth\":" + PaymentObj["cc_exp_month"].ToString() + ",\"expireYear\":" + PaymentObj["cc_exp_year"].ToString() +
                                                            ",\"cvv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"address\":{\"address1\":\"" + PaymentObj["address1"].ToString() + "\",\"address2\":\"" + PaymentObj["address2"].ToString() +
                                                            "\",\"city\":\"" + PaymentObj["city"].ToString() + "\",\"postalCode\":\"" + PaymentObj["postal_code"].ToString() + "\",\"regionCode\":\"" + PaymentObj["state_province"].ToString() +
                                                            "\",\"countryCode\":\"" + PaymentObj["country"].ToString() + "\",\"primaryPhone\":\"" + PaymentObj["phone"].ToString() + "\"}}],\"userID\":" + (String.IsNullOrEmpty(this.extCustId) ? "null" : this.extCustId) +
                                                            ",\"locale\":\"en-GB\",\"communicationPreferences\":[{\"type\":null,\"optOut\":true},{\"type\":null,\"optOut\":true}]},\"paymentPlanID\":null,\"accountRestrictionID\":null,\"offerRestrictionID\":null,\"insurance\":{\"wasOffered\":false,\"isSelected\":null,\"quotePackID\":null,\"quoteID\":null,\"treatmentID\":null,\"productID\":null,\"nbOfTicket\":" +
                                                            this._CurrentParameter.Quantity + ",\"maxNbOfTicket\":" + this.TmEvent.MaxNoOfTicket + ",\"totalInsurancePrice\":null},\"amexPoints\":null,\"braintreeDeviceString\":null,\"createOrderOnly\":false,\"locale\":\"en-GB\",\"thirdPartyConsents\":[{\"id\":1,\"checked\":false}],\"communicationOptIns\":[{\"id\":82,\"checked\":true}],\"storePaymentMethod\":null,\"digitalWallet\":null,\"is3dsecureEnabled\":" + this.TmEvent.is3dsecureEnabled.ToString().ToLower() +
                                                            ",\"postAuthorizationResponse\":\"" + postAuthorizationResponse + "\",\"paymentRefNumber\":null,\"isTangibleMOD\":false,\"visaCheckoutPayment\":false,\"displayNeighborhoods\":false,\"simulate3DSecure\":false,\"requestDate\":\"" + DateTime.UtcNow.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'") + "\",\"appliedPaymentPoints\":null,\"isFullPointsPayment\":false}";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        postData = "{\"customer\":{\"savePaymentInfo\":false,\"shipping\":{\"firstName\":\"" + this._selectedAccountForAutoBuy.FirstName + "\",\"lastName\":\"" +
                                                           this._selectedAccountForAutoBuy.LastName + "\",\"email\":\"" + this._selectedAccountForAutoBuy.EmailAddress + "\",\"address\":{\"address1\":\"" +
                                                           this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town +
                                                           "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"" + country + "\",\"primaryPhone\":\"" +
                                                           this._selectedAccountForAutoBuy.Telephone + "\"}},\"cards\":[{\"paymentType\":\"CREDIT_CARD\",\"paymentID\":\"" + this._selectedAccountForAutoBuy.CardType.Replace(" ", String.Empty).ToUpper() +
                                                           "\",\"nameOnCard\":\"" + this._selectedAccountForAutoBuy.FirstName.Trim() + " " + this._selectedAccountForAutoBuy.LastName.Trim() + "\",\"firstSixDigits\":\"" + firstSixDigits +
                                                           "\",\"lastFourDigits\":\"" + lastFourDigits + "\",\"cvv\":\"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"expireMonth\":\"" + this._selectedAccountForAutoBuy.ExpiryMonth +
                                                           "\",\"expireYear\":\"" + "20" + this._selectedAccountForAutoBuy.ExpiryYear + "\",\"secureHash\":\"" + secureHash + "\",\"secureHash2\":\"" + secureHash2 + "\",\"wpToken\":\"" + wpToken + "\",\"address\":{\"address1\":\"" +
                                                           this._selectedAccountForAutoBuy.Address1 + "\",\"address2\":\"" + this._selectedAccountForAutoBuy.Address2 + "\",\"city\":\"" + this._selectedAccountForAutoBuy.Town +
                                                           "\",\"postalCode\":\"" + this._selectedAccountForAutoBuy.PostCode + "\",\"regionCode\":\"" + state + "\",\"countryCode\":\"" + country + "\",\"primaryPhone\":\"" +
                                                           this._selectedAccountForAutoBuy.Telephone + "\"}}],\"userID\":" + (String.IsNullOrEmpty(this.extCustId) ? "null" : this.extCustId) +
                                                           ",\"locale\":\"en-GB\",\"communicationPreferences\":[{\"type\":null,\"optOut\":true},{\"type\":null,\"optOut\":true}]},\"paymentPlanID\":null,\"accountRestrictionID\":null,\"offerRestrictionID\":null,\"insurance\":{\"wasOffered\":false,\"isSelected\":null,\"quotePackID\":null,\"quoteID\":null,\"treatmentID\":null,\"productID\":null,\"nbOfTicket\":" + this._CurrentParameter.Quantity + ",\"maxNbOfTicket\":" + this.TmEvent.MaxNoOfTicket + ",\"totalInsurancePrice\":null},\"amexPoints\":null,\"braintreeDeviceString\":null,\"createOrderOnly\":false,\"locale\":\"en-GB\",\"is3dsecureEnabled\":" + this.TmEvent.is3dsecureEnabled.ToString().ToLower() + ",\"paymentRefNumber\":\"" + paymentRefNumber + "\",\"machineCookie\":\"" + machineCookie + "\",\"postAuthorizationResponse\":\"" + postAuthorizationResponse + "\",\"simulate3DSecure\":false,\"storePaymentMethod\":null,\"digitalWallet\":null,\"isTangibleMOD\":false,\"thirdPartyConsents\":[{\"id\":1,\"checked\":false}],\"communicationOptIns\":[{\"id\":142,\"checked\":true}],\"storePaymentMethod\":null, \"visaCheckoutPayment\": false,\"displayNeighborhoods\": false,\"requestDate\":\"" + DateTime.UtcNow.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'") + "\"}";
                                                    }

                                                    this.Session.Payload = postData;
                                                    this.Session.HTMLWeb.Referrer = "https://shop.axs.co.uk/" + this.OnSaleUrl + "/shop/verify-purchase";
                                                    strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/order/v2?version=v2&sessionID=" + this.SessionKey + "&onsaleID=" + this.OnSaleUrl + "&token=" + (String.IsNullOrEmpty(mpsToken) ? "null" : System.Web.HttpUtility.UrlEncode(mpsToken)));

                                                    if (this.autobuyLog != null)
                                                        this.autobuyLog.Responses.Add("ORDER[V]", strHTML);
                                                    //WriteToFile(DateTime.Now + " => ORDER[V] => " + strHTML + " => " + this._selectedAccountForAutoBuy.EmailAddress + " " + this._selectedAccountForAutoBuy.Password);

                                                    if (Session.HtmlDocument.DocumentNode.InnerText.Contains("PAYMENT_FAILED") || Session.HtmlDocument.DocumentNode.InnerText.Contains("faultCode") || Session.HtmlDocument.DocumentNode.InnerText.Contains("faultString") || Session.HtmlDocument.DocumentNode.InnerText.Contains("ERROR") || Session.HtmlDocument.DocumentNode.InnerText.Contains("BAD_CREDIT_CARD") || Session.HtmlDocument.DocumentNode.InnerText.Contains("ERROR_PLACE_ORDER"))
                                                    {
                                                        #region related to status display on UI
                                                        String status = String.Empty;

                                                        try
                                                        {
                                                            JObject JStatus = JObject.Parse(Session.HtmlDocument.DocumentNode.InnerText);
                                                            if (JStatus != null)
                                                            {
                                                                status = JStatus["message"].ToString();
                                                            }
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            Debug.WriteLine(ex.Message);
                                                        }

                                                        Logger.LoggerInstance.Add(new Log(ErrorType.LOGICAL, this.Ticket.TicketID, this.Ticket.URL, Session.HtmlDocument.DocumentNode.InnerHtml, true));

                                                        if (!String.IsNullOrEmpty(status))
                                                        {
                                                            changeStatus(status);
                                                            this.MoreInfo = status;
                                                        }
                                                        else
                                                        {
                                                            changeStatus("Buying Failed");
                                                            this.MoreInfo = "Buying Failed";
                                                        }

                                                        this.currLog.MoreInfo = this.MoreInfo;
                                                        this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        _extractFoundValues = JObject.Parse(Session.HtmlDocument.DocumentNode.InnerHtml);

                                                        this.MoreInfo = TicketSearchStatus.MoreInfoTicketBought + " Your order number is " + _extractFoundValues["orderID"].ToString();
                                                        changeStatus("Confirmation Page Loaded");

                                                        try
                                                        {
                                                            if (_extractFoundValues.Property("orderNumber") != null)
                                                            {
                                                                this.currLog.MoreInfo = "Your order number is " + _extractFoundValues["orderNumber"];
                                                            }
                                                            else
                                                            {
                                                                this.currLog.MoreInfo = "Your order number is " + _extractFoundValues["orderID"];
                                                            }
                                                        }
                                                        catch { }

                                                        this.currLog.BuyStatus = TicketsLog.AutoBuyStatus;
                                                        result = true;
                                                    }
                                                }
                                                else
                                                {
                                                    changeStatus("Buying Failed");
                                                    this.MoreInfo = "Buying Failed";
                                                    this.currLog.MoreInfo = this.MoreInfo;
                                                    this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                                                }
                                            }
                                            else if (_extractFoundValues.Property("orderID") != null)
                                            {
                                                this.MoreInfo = TicketSearchStatus.MoreInfoTicketBought + " Your order number is " + _extractFoundValues["orderID"].ToString();
                                                changeStatus("Confirmation Page Loaded");
                                                this.currLog.MoreInfo = "Your order number is " + _extractFoundValues["orderID"].ToString();
                                                this.currLog.BuyStatus = TicketsLog.AutoBuyStatus;
                                                result = true;
                                            }
                                        }
                                        else if (_extractFoundValues.Property("orderID") != null)
                                        {
                                            this.MoreInfo = TicketSearchStatus.MoreInfoTicketBought + " Your order number is " + _extractFoundValues["orderID"].ToString();
                                            changeStatus("Confirmation Page Loaded");
                                            this.currLog.MoreInfo = "Your order number is " + _extractFoundValues["orderID"].ToString();
                                            this.currLog.BuyStatus = TicketsLog.AutoBuyStatus;
                                            result = true;
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Debug.WriteLine(ex.Message);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
                        }
                    }
                    else
                    {
                        this.MoreInfo = TicketSearchStatus.MoreInfoAccountNotAvailable;
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Debug.WriteLine(ex.Message + " - " + ex.StackTrace);
                }
                catch (Exception xe)
                {
                    Debug.WriteLine(xe.Message + Environment.NewLine + xe.StackTrace);
                }
            }

            return result;
        }

        public String getWPToken()
        {
            string wpToken = String.Empty;

            try
            {
                String publicKey = "2#10001#a94964d56cdae46f6d38c3d98f38b215b35d2e1342b4adf26508efc25b41d9f4c8c362a60f6e0e73339e9d8cb3e8428cf8912f505d674199507bbc1f03cb7d08f1c79c03c6c68df70576c949552078c4c33d0d16881a4ee3d4230e4d8e8746c975e6bdd0607f3b5a332070812eabb4aef95f02fbff4ec0d108003d1813a5bb0ea2760f0c322c91526de54739193de670e8f11eef8090b88127e006b91fdcd351cc3372e3149889b533a068734fec8607baea9477c9b65fc1a6a843c45800f9f3c4598f76e66863ce9c9f37b00bd048960a5a3dcccbcdaa33b23f01c7e2ea83364813c9012d389b544738d62c9dfe812d96b33b2d6ac673be7f766370c03de447";
                String header = "{\"alg\":\"RSA1_5\",\"enc\":\"A256GCM\",\"kid\":\"2\",\"com.worldpay.apiVersion\":\"1.0\",\"com.worldpay.libVersion\":\"1.0.1\",\"com.worldpay.channel\":\"javascript\"}";

                String script = global::Automatick.Properties.Resources.WorldPay;

                #region get month in proper format
                String month = String.Empty;
                if (this._session.HTMLWeb.ResponseUri.Host.Contains(".com"))
                {
                    if (this._selectedAccountForAutoBuy.ExpiryMonth.StartsWith("0"))
                    {
                        month = this._selectedAccountForAutoBuy.ExpiryMonth.Substring(1);
                    }
                    else
                    {
                        month = this._selectedAccountForAutoBuy.ExpiryMonth;
                    }
                }
                else
                {
                    month = this._selectedAccountForAutoBuy.ExpiryMonth;
                }
                #endregion

                var cse = "{\"cvc\": \"" + this._selectedAccountForAutoBuy.CCVNum + "\",\"cardHolderName\":\"" + this._selectedAccountForAutoBuy.FirstName.Trim() + " " + this._selectedAccountForAutoBuy.LastName.Trim() + "\",\"cardNumber\": \"" + this._selectedAccountForAutoBuy.CardNumber + "\",\"expiryMonth\": \"" + month + "\",\"expiryYear\":\"20" + this._selectedAccountForAutoBuy.ExpiryYear + "\"}";

                try
                {
                    using (ScriptEngine engine = new ScriptEngine("jscript"))
                    {
                        ParsedScript parsed = engine.Parse(script);

                        wpToken = parsed.CallMethod("encrypt", new object[] { cse, header, publicKey }).ToString();
                    }
                }
                catch (Exception ex)
                {

                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return wpToken;
        }

        public String getCardNPhone()
        {
            string result = String.Empty;

            try
            {
                HtmlNodeCollection textNodes = this.Session.HtmlDocument.DocumentNode.SelectNodes("//span[@id='BodyText']");
                if (textNodes != null)
                {
                    String parameter = String.Empty;
                    foreach (HtmlNode item in textNodes)
                    {
                        try
                        {
                            string text = item.InnerText.Trim();

                            if (text.EndsWith(":"))
                            {
                                parameter += text;
                            }
                            else
                            {
                                parameter += " " + text + ",";
                            }
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine(ex.Message);
                        }
                    }

                    string[] splitted = parameter.Split(',');

                    foreach (String item in splitted)
                    {
                        if (item.ToLower().Contains("number"))
                        {
                            result += item + ",";
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return result;
        }

        public String verificationPage(JObject _extractFoundValues)
        {
            string postAuthorizationResponse = String.Empty;

            try
            {
                this.Session._IfJSOn = false;
                this.Session.Payload = String.Empty;

                this.Session.HTMLWeb.Referrer = "https://shop.axs.co.uk/" + this.OnSaleUrl + "/shop/verify-purchase";

                string redirectURL = _extractFoundValues["threeDSecureResponse"]["redirectUrl"].ToString();
                string PaReq = _extractFoundValues["threeDSecureResponse"]["paRequest"].ToString();
                string machineCookie = _extractFoundValues["threeDSecureResponse"]["machineCookie"].ToString();

                this.AddUpdateField(this.Session, "PaReq", PaReq);
                this.AddUpdateField(this.Session, "TermUrl", "https://unifiedapicommerce.axs.co.uk/veritix/notifications/worldpay/threed/payment");
                this.AddUpdateField(this.Session, "MD", machineCookie + this.SessionKey);

                /* this request could be one of the below two :
                 * https://cap.attempts.securecode.com/acspage/cap?RID=8&VAA=A FOR DEBIT CARDS
                 * https://acs-safekey.americanexpress.com/GravityACS/processing FOR CREDIT CARDS
                 */
                string strHTML = this.Session.Post(redirectURL);

                if (!String.IsNullOrEmpty(strHTML) && this.Session.FormElements != null)
                {
                    if (this.Session.FormElements.Forms.ContainsKey("downloadForm"))
                    {
                        /*****************/
                        /** DEBIT CARD **/
                        /*****************/
                        #region DEBIT CARD
                        redirectURL = this.Session.FormElements.Forms["downloadForm"].Action;

                        strHTML = this.Session.Post(redirectURL);
                        if (!String.IsNullOrEmpty(strHTML))
                        {
                            this.Session.Payload = "{\"MD\":\"" + machineCookie + this.SessionKey + "\",\"PaRes\":null}";
                            strHTML = this.Session.Post(redirectURL + "?onsaleID=" + this.OnSaleUrl);
                            if (!String.IsNullOrEmpty(strHTML))
                            {
                                JObject VerifyObject = JObject.Parse(strHTML);
                                string success = VerifyObject["success"].ToString();

                                postAuthorizationResponse = VerifyObject["data"]["postAuthorizationResponse"].ToString();

                                //if (success.ToLower().Equals("true"))
                                //{
                                //    postAuthorizationResponse = VerifyObject["data"]["postAuthorizationResponse"].ToString();
                                //}
                                //else
                                //{
                                //    changeStatus("Buying Failed");
                                //    this.MoreInfo = "Buying Failed";
                                //}
                            }
                            else
                            {
                                changeStatus("Buying Failed");
                                this.MoreInfo = "Buying Failed";
                            }
                        }
                        else
                        {
                            changeStatus("Buying Failed");
                            this.MoreInfo = "Buying Failed";
                        }
                        #endregion
                    }
                    else if (this.Session.FormElements.Forms.ContainsKey("form1"))
                    {
                        String action = this.Session.FormElements.Forms["form1"].Action;
                        action = action.Replace("..", String.Empty);
                        if (action.Equals("/tdsecure/intro.jsp"))
                        {
                            #region VISA CREDIT CARD

                            Match m = Regex.Match(strHTML, @"html5_data = (.*?);");
                            if (m.Success)
                            {
                                String html5_data = m.Value.Split('=')[1].Replace("\"", String.Empty).Replace(";", String.Empty).Trim();

                                AddUpdateField(this.Session, "page_timeout_flag", "false");
                                AddUpdateField(this.Session, "a_data", "pm_fpua%3Dmozilla%2F5.0%20(windows%20nt%2010.0%3B%20win64%3B%20x64%3B%20rv%3A68.0)%20gecko%2F20100101%20firefox%2F68.0%7C5.0%20(Windows)%7CWin32%5E~%5Epm_fpsc%3D24%7C1920%7C1080%7C1040%5E~%5Epm_fpsw%3D%5E~%5Epm_fptz%3D-8%5E~%5Elang%3Den-US%5E~%5Esyslang%3D%5E~%5Euserlang%3D%5E~%5Epm_fpjv%3Dfalse%5E~%5Epm_fpco%3Dtrue%5E~%5Epm_fpasw%3D%5E~%5Epm_fpan%3DNetscape%5E~%5Epm_fpacn%3DMozilla%5E~%5Epm_fpol%3Dtrue%5E~%5Epm_fposp%3D%5E~%5Epm_fpup%3D%5E~%5Epm_fpsaw%3D1920%5E~%5Epm_fpspd%3D24%5E~%5Epm_fpsbd%3D%5E~%5Epm_fpsdx%3D%5E~%5Epm_fpsdy%3D%5E~%5Epm_fpslx%3D%5E~%5Epm_fpsly%3D%5E~%5Epm_fpsfse%3D%5E~%5Epm_fpsui%3D");
                                AddUpdateField(this.Session, "NF", "noflash");
                                AddUpdateField(this.Session, "FV", "noflash");
                                AddUpdateField(this.Session, "ERROR2", "noflash");

                                AddUpdateField(this.Session, "html5_data", html5_data);

                                this.Session.HTMLWeb.Referrer = redirectURL;
                                strHTML = this.Session.Post("https://www.securesuite.co.uk/lloyds" + action);

                                if (this.Session.FormElements.Forms != null && this.Session.FormElements.Forms.ContainsKey("form1"))
                                {
                                    action = this.Session.FormElements.Forms["form1"].Action;
                                    action = action.Replace("..", String.Empty);

                                    this.Session.FormElements.Remove("phone_number");
                                    AddUpdateField(this.Session, "phone_alias", "0");
                                    AddUpdateField(this.Session, "user_action", "activate");

                                    String args = getCardNPhone();
                                    if (!String.IsNullOrEmpty(args))
                                    {
                                        String[] splitted = args.Split(',');

                                        String Topmost = "Enter Code for : " + this._selectedAccountForAutoBuy.EmailAddress + ", Qty : " + this.Quantity;
                                        String parameters = "Section: (" + this.Section + "), Row: (" + this.Row + "), Seat: (" + this.Seat + "), Price: (" + this.Price + ")";

                                        strHTML = this.Session.Post("https://www.securesuite.co.uk/lloyds" + action);

                                        frmCode pCode = new frmCode(Topmost, splitted[0], splitted[1], parameters);
                                        String paymentCode = pCode.promptCode();

                                        if (String.IsNullOrEmpty(paymentCode))
                                        {
                                            this.MoreInfo = "SMS Code is required for verification.";
                                            this.currLog.MoreInfo = this.MoreInfo;
                                            this.currLog.BuyStatus = TicketsLog.NotBuyStatus;

                                            return String.Empty;
                                        }


                                        AddUpdateField(this.Session, "user_action", "activate");
                                        AddUpdateField(this.Session, "otp", paymentCode);

                                        action = this.Session.FormElements.Forms["form1"].Action;
                                        action = action.Replace("..", String.Empty);

                                        strHTML = this.Session.Post("https://www.securesuite.co.uk/lloyds" + action);
                                    }
                                }
                            }

                            #endregion
                        }
                    }
                    else if (this.Session.FormElements.Forms.ContainsKey("passwdForm") || this.Session.FormElements.Forms.ContainsKey("devicesig"))
                    {
                        String Topmost = "Enter Code for : " + this._selectedAccountForAutoBuy.EmailAddress + ", Qty : " + this.Quantity;
                        String parameters = "Section: (" + this.Section + "), Row: (" + this.Row + "), Seat: (" + this.Seat + "), Price: (" + this.Price + ")";

                        Match m = Regex.Match(strHTML, "= getPartialSlotDefinition(.*?);");
                        if (m.Success)
                        {
                            String ReadValue = m.Value.Replace("= getPartialSlotDefinition(", String.Empty).Replace(")", String.Empty).Replace("\"", String.Empty).Replace(";", String.Empty);
                            String[] splitted = ReadValue.Split(',');
                            String QuerryString = "Please enter " + splitted[0] + "th, " + splitted[1] + "th, " + splitted[2] + "th, characters of your SecureCode";

                            String cardNumber = String.Empty;
                            Match submatch = Regex.Match(strHTML, "XXXX XXXX XXXX (.*?)</span>");
                            if (submatch.Success)
                            {
                                cardNumber = submatch.Value.Replace("</span>", String.Empty);
                            }

                            frmCode pCode = new frmCode(Topmost, "Card Number : " + cardNumber, QuerryString, parameters);
                            String paymentCode = pCode.promptCode();

                            //string ss = paymentCode[0].ToString();


                        }
                        else
                        {
                            String signature = "{\"VERSION\":\"2.0\",\"MFP\":{\"Browser\":{\"UserAgent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\",\"Vendor\":\"\",\"VendorSubID\":\"\",\"BuildID\":\"20181001000000\",\"CookieEnabled\":true},\"IEPlugins\":{},\"NetscapePlugins\":{},\"Screen\":{\"FullHeight\":1080,\"AvlHeight\":1040,\"FullWidth\":1920,\"AvlWidth\":1920,\"ColorDepth\":24,\"PixelDepth\":24},\"System\":{\"Platform\":\"Win32\",\"OSCPU\":\"Windows NT 10.0; Win64; x64\",\"systemLanguage\":\"en-US\",\"Timezone\":420}},\"ExternalIP\":\"\"}";

                            this.AddUpdateField(Session, "executionTime", "3");
                            this.AddUpdateField(Session, "deviceSignature", signature);
                            this.AddUpdateField(Session, "ABSlog", "DSP;FlashLoadTime:1;INITDNA;PREDNATIME;0;POSTDNATIME;1;DEVICEID;");

                            this.Session.HTMLWeb.Referrer = redirectURL;
                            strHTML = this.Session.Post(redirectURL);

                            Dictionary<String, String> elements = new Dictionary<String, String>();

                            MatchCollection mn = Regex.Matches(strHTML, "var(.*?);");
                            if (mn != null)
                            {
                                this.AddUpdateField(Session, "ABSlog", "GPP");
                                this.AddUpdateField(Session, "ARCOTC", "");
                                this.AddUpdateField(Session, "ARCOTR", "");
                                this.AddUpdateField(Session, "arcotFlashCookie", "");
                                this.AddUpdateField(Session, "authDefaultSelect", "Visa Password");
                                this.AddUpdateField(Session, "AuthFallBack", "");
                                this.AddUpdateField(Session, "authType", "Visa Password");
                                this.AddUpdateField(Session, "ChipPluginPresent", "TRUE");
                                this.AddUpdateField(Session, "ChipSecret", "");
                                this.AddUpdateField(Session, "CustData", "en_GB");
                                this.AddUpdateField(Session, "desc", "");
                                this.AddUpdateField(Session, "deviceDNA", "");
                                this.AddUpdateField(Session, "dnaError", "");
                                this.AddUpdateField(Session, "eAccessPresent", "FALSE");
                                this.AddUpdateField(Session, "eAccessRequired", "FALSE");
                                this.AddUpdateField(Session, "executionTime", "");
                                this.AddUpdateField(Session, "forgotPassword", "0");
                                this.AddUpdateField(Session, "Locale", "en_GB_RBS_Generic/");
                                this.AddUpdateField(Session, "isDNADone", "false");
                                this.AddUpdateField(Session, "mesc", "");
                                this.AddUpdateField(Session, "mescIterationCount", "0");
                                this.AddUpdateField(Session, "Phase", "passwd");
                                this.AddUpdateField(Session, "RFIncreaseAuthAction", "0");
                                this.AddUpdateField(Session, "RFIsSecAuthPresentForIncreaseAuth", "0");
                                this.AddUpdateField(Session, "submitted", "1");
                                this.AddUpdateField(Session, "TermUrl", "https://unifiedapicommerce.axs.co.uk/veritix/notifications/worldpay/threed/payment");
                                this.AddUpdateField(Session, "tryIndex", "1");
                                this.AddUpdateField(Session, "Userid", "");
                                this.AddUpdateField(Session, "VSDCData", "");


                                foreach (Match item in mn)
                                {
                                    try
                                    {
                                        string ele = item.Value;
                                        String[] splitted = ele.Split('=');

                                        String key = splitted[0].Replace("var ", String.Empty);
                                        String value = splitted[1].Replace("\"", String.Empty).Replace("\"", String.Empty).Replace(";", String.Empty).Trim();

                                        elements.Add(key, value);
                                    }
                                    catch { }
                                }

                                string readValue = elements["vsdcInput "];
                                this.AddUpdateField(Session, "VSDCInput", readValue);


                                readValue = elements["userPan "];
                                this.AddUpdateField(Session, "pan", readValue);

                                readValue = elements["calloutMsg "];
                                string[] splittedd = readValue.Split(',');
                                splittedd = splittedd[0].Split(':');

                                this.AddUpdateField(Session, "pin", "MOBNUM=" + splittedd[splittedd.Length - 1]);

                                strHTML = this.Session.Post(redirectURL);


                                if (this.Session.FormElements.Forms.ContainsKey("downloadForm"))
                                {
                                    strHTML = this.Session.Post(this.Session.FormElements.Forms["downloadForm"].Action);
                                }
                            }
                            //if (m.Success)
                            //{
                            //    String arguement = m.Value;
                            //}
                        }
                    }
                    else
                    {
                        String sessionData = String.Empty;

                        #region AMEX CREDIT CARD
                        using (BrowserSession cloned = (BrowserSession)this.Session.Clone())
                        {
                            //string paReq = cloned.FormElements["PaReq"];
                            string MD = cloned.FormElements["MD"];
                            string MpiTermURl = cloned.FormElements["MpiTermURl"];
                            string gravityID = cloned.FormElements["gravityId"];

                            PaReq += "~#~" + MpiTermURl + "~#~" + MD + "~#~" + "true~#~" + gravityID;

                            cloned.FormElements.Clear();
                            AddUpdateField(cloned, "paReq", PaReq);

                            cloned.HTMLWeb.Referrer = redirectURL;

                            redirectURL = redirectURL.Replace("processing", "payauth");

                            strHTML = cloned.Post(redirectURL);

                            /** extract session data from here **/
                            /*** TODO ***/

                            string str = strHTML.Substring(strHTML.IndexOf("sessionData"), strHTML.Length - strHTML.IndexOf("sessionData")); str = "{\"" + str;
                            JObject jobj = JObject.Parse(str);
                            if (jobj != null)
                            {
                                sessionData = jobj["sessionData"].ToString();

                                cloned.FormElements = this.Session.FormElements;

                                AddUpdateField(cloned, "timeOut", "TMOT");
                                AddUpdateField(cloned, "feedback", "99");
                                AddUpdateField(cloned, "emailSendCheck", "N");
                                AddUpdateField(cloned, "cookieEnabledIndicator", "true");
                                AddUpdateField(cloned, "respFlowInd", "doSubmit|flow:doTask-SafekeyExpress");
                                AddUpdateField(cloned, "sessionData", sessionData);

                                redirectURL = redirectURL.Replace("payauth", "response");

                                strHTML = cloned.Post(redirectURL);

                                if (cloned.FormElements.Forms.ContainsKey("mainform"))
                                {
                                    redirectURL = "https://unifiedapicommerce.axs.co.uk/veritix/notifications/worldpay/threed/payment";//this.Session.FormElements.Forms["mainform"].Action;

                                    strHTML = cloned.Post(redirectURL);

                                    /** Please wait while we process your order **/
                                    // check this string in resposnse just for safe side that everything is going accordingly.
                                    if (!String.IsNullOrEmpty(strHTML))
                                    {
                                        this.Session.Payload = "{\"MD\":\"" + machineCookie + this.SessionKey + "\",\"PaRes\":null}";
                                        strHTML = this.Session.Post(redirectURL + "?onsaleID=" + this.OnSaleUrl);
                                        if (!String.IsNullOrEmpty(strHTML))
                                        {
                                            JObject VerifyObject = JObject.Parse(strHTML);
                                            string success = VerifyObject["success"].ToString();

                                            postAuthorizationResponse = VerifyObject["data"]["postAuthorizationResponse"].ToString();
                                        }
                                        else
                                        {
                                            changeStatus("Buying Failed");
                                            this.MoreInfo = "Buying Failed";
                                        }
                                    }
                                    else
                                    {
                                        changeStatus("Buying Failed");
                                        this.MoreInfo = "Buying Failed";
                                    }
                                }
                                else
                                {
                                    changeStatus("Buying Failed");
                                    this.MoreInfo = "Buying Failed";
                                }
                            }
                            else
                            {
                                changeStatus("Buying Failed");
                                this.MoreInfo = "Buying Failed";
                            }
                        }
                        #endregion
                    }
                }
                else
                {
                    changeStatus("Buying Failed");
                    this.MoreInfo = "Buying Failed";
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);

                changeStatus("Buying Failed");
                this.MoreInfo = "Buying Failed";
            }

            return postAuthorizationResponse;
        }

        public void AddUpdateField(BrowserSession b, string key, string value)
        {
            if (!b.FormElements.ContainsKey(key))
            {
                b.FormElements.Add(key, value);
            }
            else
            {
                b.FormElements[key] = value;
            }
        }

        public string EncryptedCredentials = String.Empty;
        public String mpsToken = String.Empty;
        string getAuthorizationCode()
        {
            string code = string.Empty;

            try
            {
                String response = String.Empty;
                int retry = 1;

                while (string.IsNullOrEmpty(response) && retry <= 3)
                {
                    this.AuthorizarionHeader = "Basic " + Convert.ToBase64String(Encoding.UTF8.GetBytes(this._selectedAccountForAutoBuy.EmailAddress + ":" + this._selectedAccountForAutoBuy.Password));

                    String url = String.Empty;

                    if (this.Ticket.IsUkEvent)// if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                    {
                        url = "https://api.axs.com/proxy/v2/users/1/ots/" + this._selectedAccountForAutoBuy.EmailAddress.Replace("@", "%40") + "/authenticate?access_token=" + this.AccessToken + "&client_id=" + this.Client_ID + "&client_secret=" + this.Client_Secret + "&sessionID=" + this.SessionKey + "&region=2&is_native_axs_login_enabled=true" + "&context_id=" + this.contextID;
                    }
                    else
                    {
                        url = "https://api.axs.com/proxy/v2/users/1/ots/" + this._selectedAccountForAutoBuy.EmailAddress.Replace("@", "%40") + "/authenticate?access_token=" + this.AccessToken + "&client_id=" + this.Client_ID + "&client_secret=" + this.Client_Secret + "&sessionID=" + this.SessionKey + "&region=1&is_native_axs_login_enabled=true" + "&context_id=" + this.contextID;
                    }

                    //WriteToFile("============================================================================================================================================================================================================================================");
                    //WriteToFile(DateTime.Now + " => Credentials => " + this._selectedAccountForAutoBuy.EmailAddress + "   " + this._selectedAccountForAutoBuy.Password);

                    response = AXSEvent.get(this, url);


                    if (string.IsNullOrEmpty(response) || response.ToLower().Contains("an unknown error has occurred") || response.ToLower().Contains("Customer does not exist"))
                    {
                        this.MoreInfo = "Login failed, retrying.. " + retry++;
                        Task.Delay(1500).Wait();
                    }
                }

                //  this.MoreInfo = "";

                if (this.autobuyLog != null)
                    this.autobuyLog.Responses.Add("LOGIN", response);

                //WriteToFile(DateTime.Now + " => Login => " + response + " => " + this._selectedAccountForAutoBuy.EmailAddress + " " + this._selectedAccountForAutoBuy.Password);

                this.AuthorizarionHeader = String.Empty;

                if (!String.IsNullOrEmpty(response))
                {
                    JObject obj = JObject.Parse(response);

                    if (obj != null)
                    {
                        Session.EncryptedCredentials = EncryptedCredentials = Convert.ToBase64String(Encoding.UTF8.GetBytes(obj.ToString()));
                    }

                    if (obj.Property("oauth") != null)
                    {
                        JObject oauth = (JObject)obj["oauth"];

                        if (oauth.Property("access_token") != null)
                        {
                            code = Convert.ToString(oauth["access_token"]);
                        }
                    }
                    else if (obj.Property("message") != null)
                    {
                        // this.MoreInfo = "Unable to login. Please review!";
                        // return;
                    }

                    if (obj.Property("mpsToken") != null)
                    {
                        mpsToken = Convert.ToString(obj["mpsToken"]);
                    }
                }

                if (String.IsNullOrEmpty(code) && String.IsNullOrEmpty(mpsToken))
                {
                    JObject OResponse = JObject.Parse(response);
                    if (OResponse != null)
                    {
                        if (OResponse.Property("message") != null)
                        {
                            String status = OResponse["message"].ToString();

                            OResponse = JObject.Parse(status);
                            if (OResponse != null)
                            {
                                status = OResponse["ResponseStatus"]["Message"].ToString();
                                this.MoreInfo = status;
                                Thread.Sleep(1000);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("getAuthorizationCode()=> " + ex.Message);
            }

            return code;
        }

        void getCountryStr(ref String country)
        {
            try
            {
                foreach (KeyValuePair<String, String> item in this.appStartup.Countries)
                {
                    if (this._selectedAccountForAutoBuy.Country.ToLower().Trim() == item.Value.ToLower().Trim())
                    {
                        country = item.Key;
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("getCountryStr()=> " + ex.Message);
            }
        }

        void getStateStr(ref String state)
        {
            try
            {
                if (this._selectedAccountForAutoBuy.Country.ToLower().Trim() == "canada")
                {
                    foreach (KeyValuePair<String, String> item in this.appStartup._Canada_States)
                    {
                        if (this._selectedAccountForAutoBuy.State.ToLower().Trim() == item.Value.ToLower().Trim())
                        {
                            state = item.Key;
                            break;
                        }
                    }
                }
                else if (this._selectedAccountForAutoBuy.Country.ToLower().Trim() == "united states")
                {
                    foreach (KeyValuePair<String, String> item in this.appStartup._US_States)
                    {
                        if (this._selectedAccountForAutoBuy.State.ToLower().Trim() == item.Value.ToLower().Trim())
                        {
                            state = item.Key;
                            break;
                        }
                    }
                }
                else if (this._selectedAccountForAutoBuy.Country.ToLower().Trim() == "australia")
                {
                    foreach (KeyValuePair<String, String> item in this.appStartup._Australia_States)
                    {
                        if (this._selectedAccountForAutoBuy.State.ToLower().Trim() == item.Value.ToLower().Trim())
                        {
                            state = item.Key;
                            break;
                        }
                    }
                }
                else
                {
                    state = "";
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("getCountryStr()=> " + ex.Message);
            }
        }

        void getBuyingDetails(ref String cardType, ref String pmCode, ref String currency)
        {
            try
            {
                JObject _obj = JObject.Parse(this.Session.HtmlDocument.DocumentNode.InnerHtml);

                JArray methods = (JArray)_obj["cart"]["paymentMethods"];


                if (this._selectedAccountForAutoBuy.CardType == "AMEX")
                {
                    cardType = "AX";
                }
                else if (this._selectedAccountForAutoBuy.CardType == "Master Card")
                {
                    cardType = "MC";
                }
                else if (this._selectedAccountForAutoBuy.CardType == "Visa")
                {
                    cardType = "VI";
                }
                else if (this._selectedAccountForAutoBuy.CardType == "DISCOVER")
                {
                    cardType = "DI";
                }

                foreach (JObject item in methods)
                {
                    if (item["code"].ToString().Equals(cardType))
                    {
                        pmCode = item["id"].ToString();
                        break;
                    }
                }

                if (this.TotalPrice.Contains("GBP"))
                {
                    currency = "GB";
                    this.TotalPrice = this.TotalPrice.Replace("GBP", "").Trim();
                }
                else if (this.TotalPrice.Contains("USD"))
                {
                    currency = "US";
                    this.TotalPrice = this.TotalPrice.Replace("USD", "").Trim();
                }
                else if (this.TotalPrice.Contains("SEK"))
                {
                    currency = "SE";
                    this.TotalPrice = this.TotalPrice.Replace("SEK", "").Trim();
                }
                else if (this.TotalPrice.Contains("CAD"))
                {
                    currency = "CA";
                    this.TotalPrice = this.TotalPrice.Replace("CAD", "").Trim();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("getBuyingDetails()=> " + ex.Message);
            }
        }

        void WriteToFile(string text)
        {
            String directoryName = @"UnResolved\";
            String fileName = "UnResolved.txt";

            /********************************************
              1- decides directory name.
              2- decides filename.
              3- create directory if it doesn't exists.
              4- Write the log.
             ********************************************/

            //try
            //{
            //    directoryName = this.Ticket.TicketName + @"\";
            //}
            //catch { }

            try
            {
                fileName = this.Ticket.TicketName + "_" + this._selectedAccountForAutoBuy.AccountName + ".txt";
            }
            catch { }

            //if (!Directory.Exists(PathAutobuyLogs + directoryName))
            //{
            //    Directory.CreateDirectory(PathAutobuyLogs + directoryName);
            //}

            try
            {
                lock (this.Ticket)
                {
                    File.AppendAllText(PathAutobuyLogs + fileName, Environment.NewLine + text);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }

        protected Boolean processMobileAutoBuyPage()
        {
            Boolean result = false;
            try
            {
                this.MoreInfo = TicketSearchStatus.MoreInfoBuyingInProgress;
                BrowserSession session = _session;
                if (this.Proxy != null)
                {
                    session.Proxy = this.Proxy.toWebProxy();
                }

                this._selectedAccountForAutoBuy = null;

                lock (this.Ticket)
                {
                    if (this.Ticket.BuyHistory == null)
                    {
                        this.Ticket.BuyHistory = new Dictionary<String, int>();
                    }
                }

                {
                    #region old
                    this._selectedAccountForAutoBuy = this.selectTicketAccount();
                    if (this._selectedAccountForAutoBuy != null && this.IfWorking && this.Ticket.isRunning)
                    {
                        this.currLog.Account = (this._selectedAccountForAutoBuy != null) ? this._selectedAccountForAutoBuy.EmailAddress : "";

                        this._session.FormElements["address1"] = _selectedAccountForAutoBuy.Address1;
                        this._session.FormElements["address2"] = _selectedAccountForAutoBuy.Address2 != null ? _selectedAccountForAutoBuy.Address2 : _selectedAccountForAutoBuy.Address2 = string.Empty;

                        this._session.FormElements["ccExpiryMonth"] = _selectedAccountForAutoBuy.ExpiryMonth;
                        this._session.FormElements["ccExpiryYear"] = _selectedAccountForAutoBuy.ExpiryYear;
                        this._session.FormElements["ccFirstName"] = _selectedAccountForAutoBuy.FirstName;
                        this._session.FormElements["ccLastName"] = _selectedAccountForAutoBuy.LastName;
                        this._session.FormElements["ccNumber"] = _selectedAccountForAutoBuy.CardNumber;
                        this._session.FormElements["ccv"] = _selectedAccountForAutoBuy.CCVNum;
                        this._session.FormElements["city"] = _selectedAccountForAutoBuy.Town;
                        this._session.FormElements["phone"] = _selectedAccountForAutoBuy.Mobile;
                        this._session.FormElements["postCode"] = _selectedAccountForAutoBuy.PostCode;
                        this._session.FormElements["emailAddress"] = _selectedAccountForAutoBuy.EmailAddress;
                        this._session.FormElements["emailAddress2"] = _selectedAccountForAutoBuy.ConfirmEmail;
                        this._session.FormElements["firstName"] = _selectedAccountForAutoBuy.FirstName;
                        this._session.FormElements["lastName"] = _selectedAccountForAutoBuy.LastName;

                        if ((this.IfWorking && this.Ticket.isRunning) ? this.processMobileDeliveryPage() : false)
                        {
                            this.MoreInfo += ", Buying: " + this._selectedAccountForAutoBuy.EmailAddress;

                            string firstSixDigits = this._selectedAccountForAutoBuy.CardNumber.Substring(0, 6);
                            string lastFourDigits = this._selectedAccountForAutoBuy.CardNumber.Remove(0, this._selectedAccountForAutoBuy.CardNumber.Length - 4);

                            //if (this._session.FormElements.ContainsKey("firstSixDigits"))
                            this._session.FormElements["firstSixDigits"] = firstSixDigits;

                            // if (this._session.FormElements.ContainsKey("lastFourDigits"))
                            this._session.FormElements["lastFourDigits"] = lastFourDigits;

                            foreach (KeyValuePair<String, String> item in appStartup.Countries)
                            {
                                if (this._selectedAccountForAutoBuy.Country.ToLower().Trim() == item.Value.ToLower().Trim())
                                {
                                    this._session.FormElements["country"] = item.Key;
                                    break;
                                }
                            }
                            if (this._selectedAccountForAutoBuy.Country.ToLower().Trim() == "canada")
                            {
                                foreach (KeyValuePair<String, String> item in this.appStartup._Canada_States)
                                {
                                    if (this._selectedAccountForAutoBuy.State.ToLower().Trim() == item.Value.ToLower().Trim())
                                    {
                                        this._session.FormElements["region"] = item.Key;
                                        break;
                                    }
                                }
                            }
                            else if (this._selectedAccountForAutoBuy.Country.ToLower().Trim() == "united states")
                            {
                                foreach (KeyValuePair<String, String> item in this.appStartup._US_States)
                                {
                                    if (this._selectedAccountForAutoBuy.State.ToLower().Trim() == item.Value.ToLower().Trim())
                                    {
                                        this._session.FormElements["region"] = item.Key;
                                        break;
                                    }
                                }
                            }
                            else if (this._selectedAccountForAutoBuy.Country.ToLower().Trim() == "australia")
                            {
                                foreach (KeyValuePair<String, String> item in this.appStartup._Australia_States)
                                {
                                    if (this._selectedAccountForAutoBuy.State.ToLower().Trim() == item.Value.ToLower().Trim())
                                    {
                                        this._session.FormElements["region"] = item.Key;
                                        break;
                                    }
                                }
                            }
                            else
                                this._session.FormElements["region"] = "";

                            //for Credit card Type
                            if (this._selectedAccountForAutoBuy.CardType == "AMEX")
                            {
                                this._session.FormElements["ccType"] = "AMEX";
                                this._session.FormElements["selectedCCType"] = "AMEX";

                            }
                            else if (this._selectedAccountForAutoBuy.CardType == "Master Card")
                            {
                                session.FormElements["ccType"] = "MC";
                                this._session.FormElements["selectedCCType"] = "MC";
                            }
                            else if (this._selectedAccountForAutoBuy.CardType == "Visa")
                            {
                                this._session.FormElements["ccType"] = "VI";
                                this._session.FormElements["selectedCCType"] = "VI";
                            }
                            else if (this._selectedAccountForAutoBuy.CardType == "DISCOVER")
                            {
                                this._session.FormElements["ccType"] = "DISCOVER";
                                this._session.FormElements["selectedCCType"] = "DISCOVER";
                            }

                            //this._session.FormElements["firstSixDigits"] = "";

                            this._session.FormElements["updateExtCustomer"] = "1";
                            this._session.FormElements["update_external_customer"] = "on";
                            this._session.FormElements["amexEmailOptOut"] = "false";
                            this._session.FormElements["emailOptOut"] = "false";

                            this._session.FormElements.Remove("payment_radio");
                            this._session.FormElements.Remove("expiryYear");
                            this._session.FormElements.Remove("expiryMonth");
                            this._session.FormElements.Remove("eventCode");
                            this._session.FormElements.Remove("lockttl");
                            this._session.FormElements.Remove("select_existing_payment");
                            this._session.FormElements.Remove("lockttl");

                            string strHTML = this._session.Post("https://axsmobile.eventshopper.com/mobileshopper/ajax/sell.json");

                            if (strHTML != null && strHTML.Contains("creditBehaviorCode"))
                            {
                                changeStatus("Card Rejected");
                                this.MoreInfo = TicketSearchStatus.MoreInfoNoCreditCardInfoMatch;
                                this.currLog.MoreInfo = this.MoreInfo;
                                this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                            }
                            else if (strHTML == null)
                            {
                                changeStatus("Trying again..");
                                this.MoreInfo = TicketSearchStatus.MoreInfoBuyingFailed;
                                this.currLog.MoreInfo = this.MoreInfo;
                                this.currLog.BuyStatus = TicketsLog.NotBuyStatus;
                            }
                            else
                            {
                                this.currLog.BuyStatus = TicketsLog.AutoBuyStatus;
                            }

                            lock (this.Ticket)
                            {
                                this.Ticket.BuyCount++;

                                if (this.Ticket.BuyHistory.ContainsKey(this._selectedAccountForAutoBuy.EmailAddress))
                                {
                                    this.Ticket.BuyHistory[this._selectedAccountForAutoBuy.EmailAddress] += 1;
                                    this.Ticket.SaveTicket();
                                }
                                else
                                {
                                    this.Ticket.BuyHistory.Add(this._selectedAccountForAutoBuy.EmailAddress, 1);
                                    this.Ticket.SaveTicket();
                                }
                            }
                        }
                        else
                            return false;
                    }
                    else
                    {
                        this.MoreInfo = TicketSearchStatus.MoreInfoAccountNotAvailable;
                    }
                    #endregion
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }

            return result;
        }

        private void ReleaseAccount(String accountEmail)
        {
            try
            {
                if (!String.IsNullOrEmpty(accountEmail))
                {
                    if (this.Ticket.TicketAccountsInTransition != null)
                    {
                        if (this.Ticket.TicketAccountsInTransition.Contains(accountEmail))
                        {
                            lock (this.Ticket.TicketAccountsInTransition)
                            {
                                this.Ticket.TicketAccountsInTransition.Remove(accountEmail);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
                try
                {
                    Debug.WriteLine(ex.Message + " - " + ex.StackTrace);
                }
                catch (Exception xe)
                {
                    Debug.WriteLine(xe.Message + Environment.NewLine + xe.StackTrace);
                }
            }

        }

        private Boolean CheckingAccountAvailability(String accountEmail, int buyinglimit)
        {
            bool result = false;
            int totalBought = 0;
            try
            {
                if (this.Ticket.BuyHistory.ContainsKey(accountEmail))
                {
                    totalBought = this.Ticket.BuyHistory[accountEmail];
                }
                lock (this.Ticket.TicketAccountsInTransition)
                {
                    int count = this.Ticket.TicketAccountsInTransition.Count(p => p == accountEmail);
                    if ((count + totalBought) < buyinglimit)
                    {
                        this.Ticket.TicketAccountsInTransition.Add(accountEmail);
                        result = true;
                    }
                    else
                    {
                        result = false;
                    }
                }
            }
            catch (Exception ex)
            {
                //  Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
                result = false;
            }
            return result;
        }
        private AXSTicketAccount selectTicketAccount()
        {
            AXSTicketAccount selectedAccount = null;
            try
            {
                if (this.Ticket.ifSelectAccountAutoBuying)
                {
                    if (this.IfAutoBuy)
                    {
                        _frmSelectAccount = new frmSelectAccount(this.Ticket, this);
                        selectedAccount = (AXSTicketAccount)_frmSelectAccount.promptAccount();
                        _frmSelectAccount.Dispose();
                        _frmSelectAccount = null;

                    }

                    else
                    {
                        //If not of auto buying then select account from all accounts list.
                        AXSTicket ticket = (AXSTicket)this.Ticket;
                        if (ticket.AllTMAccounts != null)
                        {
                            if (ticket.AllTMAccounts.Count > 0)
                            {
                                try
                                {
                                    AXSTicketAccount account = this.Ticket.getNextAccount(this.isGuest);
                                    if (CheckingAccountAvailability(account.EmailAddress, account.BuyingLimit))
                                    {
                                        selectedAccount = account;
                                    }
                                    else
                                    {
                                        selectedAccount = null;
                                    }
                                }
                                catch
                                {
                                    selectedAccount = null;
                                }
                            }
                            else
                            {
                                selectedAccount = null;
                            }
                        }
                        else
                        {
                            selectedAccount = null;
                        }
                    }
                }
                else
                {
                    if (this.Ticket.SelectedAccounts != null)
                    {
                        if (this.Ticket.SelectedAccounts.Count > 0)
                        {
                            try
                            {
                                AXSTicketAccount account = this.Ticket.getNextAccount(this.isGuest);
                                if (CheckingAccountAvailability(account.EmailAddress, account.BuyingLimit))
                                {
                                    selectedAccount = account;
                                }
                                else
                                {
                                    selectedAccount = null;
                                }
                            }
                            catch
                            {
                                selectedAccount = null;
                            }
                        }
                        else
                        {
                            selectedAccount = null;
                        }
                    }
                    else
                    {
                        selectedAccount = null;
                    }
                }
                // if no account found for sign in then retry one more time here.


            }
            catch (Exception ex)
            {
                //   Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
                selectedAccount = null;
            }

            return selectedAccount;
        }

        private void selectDeliveryOption(List<String> deliveryOptions, ITicket Ticket)
        {
            try
            {
                if (this.Ticket.ifSelectDeliveryOptionAutoBuying)
                {

                    //  if (this.IfAutoBuy && (String.IsNullOrEmpty(this.Ticket.DeliveryOption) || String.IsNullOrEmpty(this.Ticket.DeliveryCountry)))
                    if (String.IsNullOrEmpty(this.Ticket.DeliveryOption)) //|| String.IsNullOrEmpty(this.Ticket.DeliveryCountry)))
                    {
                        ITicketDeliveryOption delivery = null;

                        AXSTicket tick = (AXSTicket)this.Ticket;
                        if (!tick.IfSelectDeliveryWindowOpen)
                        {
                            tick.IfSelectDeliveryWindowOpen = true;
                            _frmSelectDO = new frmSelectDeliveryOption(deliveryOptions, this.Ticket, this, DeliveryOptions);
                            delivery = _frmSelectDO.promptDeliveryOption();
                            if (delivery != null)
                            {
                                this._SelectedDeliveryOption = delivery.DeliveryOption;
                            }
                            tick.IfSelectDeliveryWindowOpen = false;
                            _frmSelectDO.Dispose();
                            _frmSelectDO = null;

                        }
                        else
                        {
                            while (String.IsNullOrEmpty(this.Ticket.DeliveryOption) && tick.IfSelectDeliveryWindowOpen && this.IfAutoBuy)
                            {
                                if ((!this.IfWorking || !this.Ticket.isRunning))
                                {
                                    break;
                                }
                                Thread.Sleep(500);
                            }
                        }
                    }
                    else
                    {
                        this._SelectedDeliveryOption = this.Ticket.DeliveryOption;
                    }
                }
                else
                {
                    if (this.Ticket.SelectedDeliveryOptions != null)
                    {
                        foreach (AXSDeliveryOption dopt in this.Ticket.SelectedDeliveryOptions)
                        {
                            if (deliveryOptions.Contains(dopt.DeliveryOption))
                            {
                                this.Ticket.DeliveryCountry = dopt.DeliveryOption;
                                this.Ticket.DeliveryOption = dopt.DeliveryOption;
                                this._SelectedDeliveryOption = dopt.DeliveryOption;
                                this.Ticket.SaveTicket();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
            }
        }

        private List<String> extractDeliveryOptions()
        {
            List<string> countryWiseDeliveryOptions = new List<string>();

            try
            {
                if (this.TmEvent.ifJson)
                {
                    countryWiseDeliveryOptions = extractJSONDeliveryOptions();
                }
                else
                {
                    countryWiseDeliveryOptions = extractXMLDeliveryOptions();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return countryWiseDeliveryOptions;
        }

        private List<String> extractTixDeliveryOptions()
        {
            List<string> countryWiseDeliveryOptions = new List<string>();

            try
            {
                String strHTML = String.Empty;

                if (this.Ticket.IsUkEvent)//if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                {
                    strHTML = Session.Get("https://unifiedapicommerce.axs.co.uk/veritix/delivery-methods/v2/" + this.OnSaleUrl);

                   
                }
                else
                {
                    strHTML = Session.Get("https://unifiedapicommerce.us-prod0.axs.com/veritix/delivery-methods/v2/" + this.OnSaleUrl);
                }

                int count = 0;

                _deliveryCost = new Dictionary<string, string>();

                String deliveryHTML = Session.HtmlDocument.DocumentNode.InnerHtml;

                deliveryHTML = Regex.Replace(deliveryHTML, @"<[^>]*>", String.Empty);

                JObject _deliv = JObject.Parse(deliveryHTML);
                JArray order = (JArray)_deliv["deliveryMethods"];

                foreach (var _item in order)
                {
                    String purcahseUnit = String.Empty;

                    if (_item["id"] != null)
                    {
                        //foreach (var item in _item["items"])
                        {
                            if (_item["label"] != null)
                            {
                                if (!countryWiseDeliveryOptions.Contains(_item["label"].ToString()))
                                {
                                    try
                                    {
                                        //JArray _unitPrice = (JArray)item["label"];
                                        countryWiseDeliveryOptions.Add(_item["label"].ToString());
                                    }
                                    catch
                                    { }

                                    String itemNum = String.Empty;

                                    if (_item["id"] != null)
                                    {
                                        try
                                        {
                                            //JArray _unitPrice = (JArray)item["label"];
                                            itemNum = (_item["id"].ToString());

                                            _deliveryCost.Add(itemNum, (_item["price"]["perOrder"].ToString()));
                                            if (!DeliveryOptions.ContainsKey(_item["label"].ToString()))
                                            {
                                                DeliveryOptions.Add(_item["label"].ToString(), itemNum);
                                            }
                                            else
                                            {
                                                DeliveryOptions[_item["label"].ToString()] = itemNum;
                                            }
                                        }
                                        catch
                                        { }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                countryWiseDeliveryOptions = null;
            }

            return countryWiseDeliveryOptions;
        }

        private List<String> extractXMLDeliveryOptions()
        {
            List<string> countryWiseDeliveryOptions = new List<string>();

            try
            {
                int count = 0;
                HtmlAgilityPack.HtmlDocument deliveryoptions = new HtmlAgilityPack.HtmlDocument();
                this._deliveryCost = new Dictionary<string, string>();

                deliveryoptions.LoadHtml(this.doc.DocumentNode.SelectSingleNode("//name[text() = 'label']").ParentNode.OuterHtml);

                HtmlNodeCollection hnodes = this.doc.DocumentNode.SelectNodes("//name[text()='label']");
                HtmlNodeCollection itemNumNodes = this.doc.DocumentNode.SelectNodes("//name[text()='itemNum']");
                HtmlNodeCollection virtualNodes = this.doc.DocumentNode.SelectNodes("//name[text()='virtual']");
                HtmlNodeCollection hn = this.doc.DocumentNode.SelectNodes("//name[text()='unitPrice']");
                HtmlNode PriceNode = this.doc.DocumentNode.SelectSingleNode("//name[text()='totalPrice']");
                int index = 2;//hn.Count - hnodes.Count;
                if (hnodes != null)
                {
                    foreach (HtmlNode item in hnodes)
                    {
                        try
                        {
                            //string amnt = hn[index + 1].ParentNode.OuterHtml.Replace("<member>\n<name>unitPrice</name>\n<value><array><data>\n<value><int>", "").Replace("</int></value>\n<value><string>USD</string></value>\n</data></array></value>\n</member>", "");
                            //amnt = amnt.Replace("</int></value>\n<value><string>GBP</string></value>\n</data></array></value>\n</member>", "");
                            //amnt = amnt.Replace("</int></value>\n<value><string>CAD</string></value>\n</data></array></value>\n</member>", "");
                            //string amnt = "";
                            //if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                            //{
                            //    this.TotalPrice = PriceNode.ParentNode.InnerText.Replace("\ntotalPrice\n\n", "").Replace("\nCAD\n\n", "").Trim();

                            //}
                            //if (amnt.Length > 2)
                            //{
                            //    amnt = amnt.Insert(amnt.Length - 2, ".");
                            //}
                            string node = item.ParentNode.OuterHtml.Replace("<member><name>label</name><value><string>", "");
                            string itemNum = "";
                            string vir = "0";
                            do
                            {
                                if (count < virtualNodes.Count)
                                {
                                    vir = virtualNodes[count].ParentNode.OuterHtml.Replace("<member>\n<name>virtual</name>\n<value><boolean>", "").Replace("</boolean></value>\n</member>", "");
                                    if (count - 1 > 0)
                                    {
                                        itemNum = itemNumNodes[count - 1].ParentNode.OuterHtml.Replace("<member>\n<name>itemNum</name>\n<value><int>", "").Replace("</int></value>\n</member>", "");
                                    }
                                }
                                else
                                {
                                    break;
                                }
                                count++;
                                Thread.Sleep(100);
                            } while (vir.Equals("0"));

                            node = node.Replace("<member>\n<name>label</name>\n<value><string>", "").Replace("</string></value>\n</member>", "");
                            if (!countryWiseDeliveryOptions.Contains(node))
                            {
                                countryWiseDeliveryOptions.Add(node);
                            }

                            if (DeliveryOptions.Count < hnodes.Count - 1)
                            {
                                if (!DeliveryOptions.ContainsKey(node))
                                {
                                    DeliveryOptions.Add(node, itemNum);
                                }
                                else
                                {
                                    DeliveryOptions[node] = itemNum;
                                }
                                HtmlNode _cost = item.ParentNode.ParentNode.SelectSingleNode(".//name[text()='unitPrice']");

                                if (_cost != null)
                                {
                                    HtmlNode n = _cost.ParentNode.SelectSingleNode(".//int");

                                    if (n != null)
                                    {
                                        this._deliveryCost.Add(itemNum, n.OuterHtml.Replace("<int>", "").Replace("</int>", ""));
                                    }
                                    else
                                    {
                                        String cost = _cost.NextSibling.NextSibling.InnerText.Replace("GBP", "").Replace("USD", "").Replace("SEK", "").Replace("\n", "");
                                        this._deliveryCost.Add(itemNum, cost);
                                    }
                                }
                            }

                            index++;
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine(ex.Message);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                countryWiseDeliveryOptions = null;
            }

            return countryWiseDeliveryOptions;
        }

        private List<String> extractJSONDeliveryOptions()
        {
            List<string> countryWiseDeliveryOptions = new List<string>();

            try
            {
                int count = 0;
                HtmlAgilityPack.HtmlDocument deliveryoptions = new HtmlAgilityPack.HtmlDocument();
                _deliveryCost = new Dictionary<string, string>();

                JObject _deliv = JObject.Parse(doc.DocumentNode.InnerHtml);
                JArray order = (JArray)_deliv["result"]["Order"]["pUnits"];

                foreach (var _item in order)
                {
                    String purcahseUnit = String.Empty;

                    if (_item["purchaseUnit"] != null)
                    {
                        foreach (var item in _item["items"])
                        {
                            if (item["label"] != null)
                            {
                                try
                                {
                                    //JArray _unitPrice = (JArray)item["label"];
                                    countryWiseDeliveryOptions.Add(item["label"].ToString());
                                }
                                catch
                                { }

                                String itemNum = String.Empty;

                                if (item["itemNum"] != null)
                                {
                                    try
                                    {
                                        //JArray _unitPrice = (JArray)item["label"];
                                        itemNum = (item["itemNum"].ToString());

                                        _deliveryCost.Add(itemNum, (item["unitPriceNet"].ToString()));
                                        if (!DeliveryOptions.ContainsKey(item["label"].ToString()))
                                        {
                                            DeliveryOptions.Add(item["label"].ToString(), itemNum);
                                        }
                                        else
                                        {
                                            DeliveryOptions[item["label"].ToString()] = itemNum;
                                        }
                                    }
                                    catch
                                    { }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                countryWiseDeliveryOptions = null;
            }

            return countryWiseDeliveryOptions;
        }

        public ITicketParameter getNextParameter()
        {
            ITicketParameter parameter = null;
            AXSTicket ticket = (AXSTicket)this.Ticket;
            try
            {
                if (this.Ticket.ifUseFoundOnFirstAttempt)
                {
                    IEnumerable<AXSParameter> tmpParamters = this.Ticket.Parameters.Where(p => p.IfFound == true);
                    if (tmpParamters != null)
                    {
                        if (ticket.CurrentFoundParameterIndex >= tmpParamters.Count())
                        {
                            ticket.CurrentFoundParameterIndex = 0;
                        }
                        parameter = tmpParamters.ElementAtOrDefault(ticket.CurrentFoundParameterIndex);
                        if (parameter != null)
                        {
                            ticket.CurrentFoundParameterIndex++;
                        }
                    }
                }
                else if (this.Ticket.ifUseAvailableParameters)
                {
                    IEnumerable<AXSParameter> tmpParamters = this.Ticket.Parameters.Where(p => p.IfAvailable == true);
                    if (tmpParamters != null)
                    {
                        if (ticket.CurrentAvailableParameterIndex >= tmpParamters.Count())
                        {
                            ticket.CurrentAvailableParameterIndex = 0;
                        }
                        parameter = tmpParamters.ElementAtOrDefault(ticket.CurrentAvailableParameterIndex);
                        if (parameter != null)
                        {
                            ticket.CurrentAvailableParameterIndex++;
                        }
                    }
                }

                if (parameter == null)
                {
                    if (ticket.CurrentParameterIndex >= this.Ticket.Parameters.Count)
                    {
                        ticket.CurrentParameterIndex = 0;
                    }

                    parameter = this.Ticket.Parameters[ticket.CurrentParameterIndex];

                    ticket.CurrentParameterIndex++;
                }
            }
            catch (Exception ex)
            {
                // Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
            }
            return parameter;
        }
        protected AXSPriceLevel getPriceLevel(ITicketParameter parameter, List<AXSPriceLevel> PriceLevels)
        {
            AXSPriceLevel selectedPriceLevel = null;
            try
            {
                //If user provides the price range then find the right price level and return the price level.
                if (parameter.PriceMin != null && parameter.PriceMax != null && PriceLevels != null)
                {
                    SortedList<string, decimal> sortedPriceLevels = new SortedList<string, decimal>();

                    foreach (AXSPriceLevel priceLevel in PriceLevels)
                    {
                        sortedPriceLevels.Add(priceLevel.PriceSecName, priceLevel.TotalPrice);
                    }

                    // If user wants to find the right price level from max total price to min total price.
                    if (parameter.MaxToMin)
                    {
                        IOrderedEnumerable<KeyValuePair<string, decimal>> sortedPriceLevelsDesc = sortedPriceLevels.OrderByDescending(p => p.Value);
                        foreach (KeyValuePair<string, decimal> priceLevel in sortedPriceLevelsDesc)
                        {
                            if (priceLevel.Value >= parameter.PriceMin && priceLevel.Value <= parameter.PriceMax)
                            {
                                foreach (AXSPriceLevel item in PriceLevels)
                                {
                                    if (item.PriceSecName == priceLevel.Key)
                                    {
                                        selectedPriceLevel = item;
                                    }
                                }
                                break;
                            }
                        }
                    }
                    else // If user wants to find the right price level from min total price to max total price.
                    {
                        IOrderedEnumerable<KeyValuePair<string, decimal>> sortedPriceLevelsAsc = sortedPriceLevels.OrderBy(p => p.Value);
                        foreach (KeyValuePair<string, decimal> priceLevel in sortedPriceLevelsAsc)
                        {
                            Debug.WriteLine(priceLevel.Value + ":" + parameter.PriceMin);

                            if (priceLevel.Value >= parameter.PriceMin && priceLevel.Value <= parameter.PriceMax)
                            {
                                foreach (AXSPriceLevel item in PriceLevels)
                                {
                                    if ((item.PriceSecName == priceLevel.Key) && !item.ifChecked)
                                    {
                                        selectedPriceLevel = item;
                                        break;
                                    }
                                }
                                //  break;
                            }
                        }
                    }
                }
                else // if user does not provide the price level then male the empty price level and retturn it.
                {
                    selectedPriceLevel = new AXSPriceLevel(String.Empty, String.Empty, 0);
                }
            }
            catch (Exception ex)
            {
                // Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
            }
            return selectedPriceLevel;
        }

        protected AXSTixPrices getTixPriceLevel(ITicketParameter parameter)
        {
            AXSTixPrices selectedPriceLevel = null;
            try
            {
                //If user provides the price range then find the right price level and return the price level.
                if (parameter.PriceMin != null && parameter.PriceMax != null && selectedPriceLevelTix != null)
                {
                    SortedList<string, decimal> sortedPriceLevels = new SortedList<string, decimal>();

                    foreach (AXSTixPrices priceLevel in selectedPriceLevelTix.Prices)
                    {
                        try
                        {
                            if (!sortedPriceLevels.ContainsKey(priceLevel.PriceID))
                            {
                                //StringBuilder str = new StringBuilder(priceLevel.Price.ToString().Insert(priceLevel.Price.ToString().Length - 2, "."));
                                sortedPriceLevels.Add(priceLevel.PriceID, Convert.ToDecimal(priceLevel.Price));
                            }
                        }
                        catch
                        { }
                    }

                    // If user wants to find the right price level from max total price to min total price.
                    if (parameter.MaxToMin)
                    {
                        IOrderedEnumerable<KeyValuePair<string, decimal>> sortedPriceLevelsDesc = sortedPriceLevels.OrderByDescending(p => p.Value);
                        foreach (KeyValuePair<string, decimal> priceLevel in sortedPriceLevelsDesc)
                        {
                            if (priceLevel.Value >= parameter.PriceMin && priceLevel.Value <= parameter.PriceMax)
                            {
                                foreach (AXSTixPrices item in selectedPriceLevelTix.Prices)
                                {
                                    if (item.PriceID == priceLevel.Key)
                                    {
                                        selectedPriceLevel = item;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                    else // If user wants to find the right price level from min total price to max total price.
                    {
                        IOrderedEnumerable<KeyValuePair<string, decimal>> sortedPriceLevelsAsc = sortedPriceLevels.OrderBy(p => p.Value);
                        foreach (KeyValuePair<string, decimal> priceLevel in sortedPriceLevelsAsc)
                        {
                            Debug.WriteLine(priceLevel.Value + ":" + parameter.PriceMin);

                            if (priceLevel.Value >= parameter.PriceMin && priceLevel.Value <= parameter.PriceMax)
                            {
                                foreach (AXSTixPrices item in selectedPriceLevelTix.Prices)
                                {
                                    if (item.PriceID == priceLevel.Key)
                                    {
                                        selectedPriceLevel = item;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                }
                else // if user does not provide the price level then male the empty price level and retturn it.
                {
                    selectedPriceLevel = selectedPriceLevelTix.Prices[0];
                }
            }
            catch (Exception ex)
            {
                // Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
            }
            return selectedPriceLevel;
        }

        List<string> QuantityForAutoBuyPost;
        List<string> ParentItemNum;
        List<string> ItemNum;
        List<string> PurchaseUnit;
        List<string> MaxQuantity;
        List<string> UnitPrice;
        bool venueIsO2 = false;
        AXSPriceLevel selectedPriceLevel = null;
        AXSTixPriceLevels selectedPriceLevelTix = null;
        AXSTixPrices selectedPrices = null;
        AXSTixSection selectedSection = null;
        List<AXSPriceLevel> PriceLevelObjectList = null;
        String offerID = null;

        public Boolean mapParameterIfAvaiable(ITicketParameter parameter)
        {
            string jsonStr = string.Empty;

            Boolean ifTicketTypeStringMatch = false;
            Boolean result = false;

            #region XML Parsing

            try
            {
                if (this._tmEvent != null && parameter != null)
                {
                    if (String.IsNullOrEmpty(this.SessionKey))
                    {
                        if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                        {
                            try
                            {
                                this.doc.LoadHtml(post(this, this.XmlUrl + "?methodName=showshop.seriesInfoW&wroom=" + this.wRoom + "&lang=fr&ver=3.0.54.15.1", String.Format("<methodCall><methodName>showshop.seriesInfoW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>fr</string></value></param></params></methodCall>", this.wRoom)));
                            }
                            catch
                            {
                                result = false;
                                return result;
                            }
                        }
                        else
                        {
                            try
                            {
                                this.doc.LoadHtml(post(this, this.XmlUrl + "?methodName=showshop.seriesInfoW&wroom=" + this.wRoom + "&lang=en&ver=3.0.54.15.1", String.Format("<methodCall><methodName>showshop.seriesInfoW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param></params></methodCall>", this.wRoom)));
                                if (this.doc.DocumentNode.InnerText.Contains("The O2"))
                                {
                                    venueIsO2 = true;
                                }
                            }
                            catch
                            {
                                result = false;
                                return result;
                            }
                        }
                        string parentIssCode = string.Empty;
                        if (this.doc.DocumentNode.SelectSingleNode("//name[text() = 'parentIssCode']") != null)
                        {
                            parentIssCode = this.doc.DocumentNode.SelectSingleNode("//name[text() = 'parentIssCode']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                        }

                        doc.LoadHtml(post(this, this.XmlUrl + "?methodName=showshop.availWSS&wroom=" + this.wRoom, String.Format("<methodCall><methodName>showshop.availWSS</methodName><params><param><value><string>{0}</string></value></param></params></methodCall>", this.wRoom)));

                        try
                        {
                            //Working for Split Popup
                            if (_CurrentParameter.Quantity > 1)
                            {
                                HtmlNode nodeSplitChecking = doc.DocumentNode.SelectSingleNode("//name[text() = 'eventavail']");
                                if (nodeSplitChecking != null)
                                {
                                    List<string> lstSplitCheck = new List<string>();
                                    HtmlNodeCollection nodePriceLevel = null;
                                    if (!string.IsNullOrEmpty(this.TmEvent.SectionCode))
                                    {
                                        string dateQuery = "//struct/member/name[text() = '" + this.TmEvent.SectionCode + "']";
                                        HtmlNode nodeCurrentDate = nodeSplitChecking.SelectSingleNode(dateQuery);
                                        if (nodeCurrentDate != null)
                                            nodePriceLevel = nodeCurrentDate.NextSibling.NextSibling.SelectNodes(".//value/int");
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(this._CurrentParameter.DateTimeString))
                                            nodePriceLevel = nodeSplitChecking.NextSibling.NextSibling.SelectNodes(".//value/int");
                                    }

                                    if (nodePriceLevel != null)
                                    {
                                        foreach (HtmlNode tmp in nodePriceLevel)
                                        {
                                            lstSplitCheck.Add(tmp.InnerHtml);
                                        }

                                        for (int i = 1; i < lstSplitCheck.Count; i += 2)
                                        {
                                            if (lstSplitCheck[i].Equals("1") || lstSplitCheck[i].Equals("0"))
                                            {
                                                isSplitPopUp = true;
                                            }
                                            else
                                            {
                                                isSplitPopUp = false;
                                                break;
                                            }
                                        }
                                    }
                                    //else
                                    //    isSplitPopUp = true;
                                }
                            }
                        }
                        catch
                        {
                        }

                        if (isSplitPopUp)
                        {
                            this.MoreInfo = TicketSearchStatus.MoreInfoQuantityNotMatch + "Searching quantity:" + this._CurrentParameter.Quantity;
                            return false;
                        }

                        try
                        {
                            doc.LoadHtml(doc.DocumentNode.SelectSingleNode("//name[text() = 'eventavail_ss']").NextSibling.NextSibling.InnerHtml);
                        }
                        catch
                        {
                            //doc.LoadHtml(doc.DocumentNode.SelectSingleNode("//name[text() = 'cumulavail']").NextSibling.NextSibling.InnerHtml);
                        }

                        string sectionQuery = "//struct/member/name[text() = '" + this.code + "']";
                        try
                        {
                            doc.LoadHtml(doc.DocumentNode.SelectSingleNode(sectionQuery).NextSibling.NextSibling.InnerHtml);
                        }
                        catch
                        {
                            //sectionQuery = "//struct/member/name[text() = 'bcs2dayprespkg']";
                            // doc.LoadHtml(doc.DocumentNode.SelectSingleNode(sectionQuery).NextSibling.NextSibling.InnerHtml);
                        }
                        HtmlNodeCollection sections = doc.DocumentNode.SelectNodes("//value/string");
                        HtmlNodeCollection priceLevels = doc.DocumentNode.SelectNodes("//value/int");
                        List<string> priceLevelsList = new List<string>();
                        List<string> filteredpriceLevelsList = new List<string>();
                        if (priceLevels != null)
                        {
                            foreach (HtmlNode tmp in priceLevels)
                            {
                                priceLevelsList.Add(tmp.InnerHtml);
                            }
                        }
                        List<string> filteredSections = new List<string>();
                        int count = priceLevelsList.Count();
                        for (int k = 0; k < count; k += 2)
                        {
                            filteredpriceLevelsList.Add(priceLevelsList[k]);
                        }
                        if (sections != null)
                        {
                            foreach (HtmlNode tmp in sections)
                            {
                                filteredSections.Add(tmp.InnerHtml);
                            }
                        }
                        doc = new HtmlAgilityPack.HtmlDocument();
                        changeStatus(TicketSearchStatus.HoldingTicket);
                        if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                        {
                            doc.LoadHtml(post(this, this.XmlUrl + "?methodName=showshop.seriesInfoW&wroom=" + this.wRoom + "&lang=" + this.Ticket.lang + "&ver=3.0.54.15.1", String.Format("<methodCall><methodName>showshop.seriesInfoW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>{1}</string></value></param></params></methodCall>", this.wRoom, this.Ticket.lang)));
                        }
                        else
                        {
                            doc.LoadHtml(post(this, this.XmlUrl + "?methodName=showshop.seriesInfoW&wroom=" + this.wRoom + "&lang=en&ver=3.0.54.15.1", String.Format("<methodCall><methodName>showshop.seriesInfoW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param></params></methodCall>", this.wRoom)));
                        }
                        doc.LoadHtml(doc.DocumentNode.SelectSingleNode("//member/name[text() = 'subsections']").ParentNode.OuterHtml);
                        HtmlNodeCollection crossSections = doc.DocumentNode.SelectNodes("/member/value/struct/member/name");

                        List<string> crossSectionsList = new List<string>();

                        foreach (HtmlNode tmp in crossSections)
                        {
                            crossSectionsList.Add(tmp.InnerHtml);
                        }

                        HtmlNodeCollection plevels = doc.DocumentNode.SelectNodes("/member/value/struct/member/value/struct/member/name[text() ='plevel']");
                        List<string> plevelList = new List<string>();
                        if (plevels != null)
                        {
                            foreach (HtmlNode tmp in plevels)
                            {
                                plevelList.Add(tmp.NextSibling.NextSibling.ChildNodes[0].InnerHtml);
                            }
                        }
                        PriceLevelObjectList = new List<AXSPriceLevel>();

                        //if (crossSectionsList.Count == plevelList.Count)
                        //{
                        //    for (int i = 0; i < crossSectionsList.Count; i++)
                        //    {
                        //        PriceLevelObjectList.Add(new AXSPriceLevel(crossSectionsList[i], plevelList[i], 0));
                        //    }
                        //}

                        /********************* New Addition *******************************/

                        for (int i = 0; i < filteredpriceLevelsList.Count(); i++)
                        {
                            PriceLevelObjectList.Add(new AXSPriceLevel(filteredSections[i], filteredpriceLevelsList[i], 0));
                        }
                        filteredSections = filteredSections.Intersect(crossSectionsList).ToList();

                        // to remove price levels in which seats are not available 

                        for (int l = this.TmEvent.PriceLevels.Count - 1; l >= 0; l--)
                        {
                            List<AXSPriceLevel> temp = new List<AXSPriceLevel>();
                            if (PriceLevelObjectList.Count > 0)
                            {
                                temp = PriceLevelObjectList.Where(p => p.PriceSectionNumber == this.TmEvent.PriceLevels[l].PriceSectionNumber).ToList();
                                if ((temp == null) || temp.Count == 0)
                                {
                                    this.TmEvent.PriceLevels.Remove(this.TmEvent.PriceLevels[l]);
                                }
                            }
                        }


                        // If the Ticket Types exists in the first page then proceed further otherwise show message and keep searching.
                        if (this._tmEvent.HasSections)
                        {
                            // If user provides the Search String or Ticket Type String. Then Select price type according to parameter.

                            foreach (AXSSection item in this._tmEvent.Sections)
                            {
                                if (!String.IsNullOrEmpty(parameter.DateTimeString))
                                {
                                    CultureInfo provider = new CultureInfo("en-US");

                                    DateTime dt = Convert.ToDateTime(item.EventDates.ToString(), provider);

                                    if (parameter.DateTimeString != "mm/dd/yyyy")
                                    {
                                        DateTime dt1 = DateTime.ParseExact(parameter.DateTimeString.ToString(), "MM/dd/yyyy", provider);
                                        parameter.DateTimeString = dt1.ToString("MM/dd/yyyy");
                                    }
                                    else
                                    {
                                        parameter.DateTimeString = "";
                                    }
                                    String EventDates = dt.ToString("MM/dd/yyyy");

                                    // Check if user mark checed on Exact Match or not and find for the provided Search String or Ticket Type String.
                                    if (parameter.ExactMatch ? EventDates.ToLower() == parameter.DateTimeString.ToLower() : EventDates.ToLower().Contains(parameter.DateTimeString.ToLower()))
                                    {
                                        if (!String.IsNullOrEmpty(this._CurrentParameter.EventTime) && this._CurrentParameter.EventTime != "hh:mm")
                                        {
                                            DateTime time = Convert.ToDateTime(item.EventDates.Trim());
                                            if (parameter.ExactMatch ? time.ToShortTimeString().ToLower() == parameter.EventTime.ToLower() : time.ToShortTimeString().ToLower().Contains(parameter.EventTime.ToLower()))
                                            {
                                                this.code = item.EventCode;
                                                this.MoreInfo += " " + EventDates;
                                                if (!String.IsNullOrEmpty(parameter.PriceLevelString))
                                                {
                                                    // Select priceLevel from the matching DateTime Search String or Ticket Type String.
                                                    foreach (AXSPriceLevel priceLevel in item.PriceLevels)
                                                    {
                                                        if (parameter.ExactMatch ? priceLevel.PriceSecName.ToLower() == parameter.PriceLevelString.ToLower() : priceLevel.PriceSecName.ToLower().Contains(parameter.PriceLevelString.ToLower()))
                                                        {
                                                            // Find and get price level and map it to the post request.
                                                            if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                            {
                                                                selectedPriceLevel = getPriceLevel(parameter, item.PriceLevels);

                                                                if (selectedPriceLevel == null || (!selectedPriceLevel.PriceSecName.Equals(priceLevel.PriceSecName)))
                                                                {
                                                                    selectedPriceLevel = null;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                selectedPriceLevel = priceLevel;
                                                            }
                                                            break;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    selectedPriceLevel = getPriceLevel(parameter, item.PriceLevels);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            this.code = item.EventCode;
                                            this.MoreInfo += " " + EventDates;
                                            if (!String.IsNullOrEmpty(parameter.PriceLevelString))
                                            {
                                                // Select priceLevel from the matching DateTime Search String or Ticket Type String.
                                                foreach (AXSPriceLevel priceLevel in item.PriceLevels)
                                                {
                                                    if (parameter.ExactMatch ? priceLevel.PriceSecName.ToLower() == parameter.PriceLevelString.ToLower() : priceLevel.PriceSecName.ToLower().Contains(parameter.PriceLevelString.ToLower()))
                                                    {
                                                        // Find and get price level and map it to the post request.
                                                        if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                        {
                                                            selectedPriceLevel = getPriceLevel(parameter, item.PriceLevels);

                                                            if (selectedPriceLevel == null || (!selectedPriceLevel.PriceSecName.Equals(priceLevel.PriceSecName)))
                                                            {
                                                                selectedPriceLevel = null;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            selectedPriceLevel = priceLevel;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                selectedPriceLevel = getPriceLevel(parameter, item.PriceLevels);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    this.code = item.EventCode;
                                    if (!String.IsNullOrEmpty(parameter.PriceLevelString))
                                    {
                                        // Select priceLevel from the matching DateTime Search String or Ticket Type String.
                                        foreach (AXSPriceLevel priceLevel in item.PriceLevels)
                                        {
                                            if (parameter.ExactMatch ? priceLevel.PriceSecName.ToLower() == parameter.PriceLevelString.ToLower() : priceLevel.PriceSecName.ToLower().Contains(parameter.PriceLevelString.ToLower()))
                                            {
                                                // Find and get price level and map it to the post request.
                                                if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                {
                                                    selectedPriceLevel = getPriceLevel(parameter, item.PriceLevels);

                                                    if (selectedPriceLevel == null || (!selectedPriceLevel.PriceSecName.Equals(priceLevel.PriceSecName)))
                                                    {
                                                        selectedPriceLevel = null;
                                                    }
                                                }
                                                else
                                                {
                                                    selectedPriceLevel = priceLevel;
                                                }
                                                break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        selectedPriceLevel = getPriceLevel(parameter, item.PriceLevels);
                                    }
                                    break;
                                }
                            }

                            // to get session key 

                            if (String.IsNullOrEmpty(this.SessionKey))
                            {
                                if (parentIssCode != string.Empty)
                                {
                                    this.SessionKey = createSessionKey(parentIssCode, this);
                                }
                                else
                                {
                                    this.SessionKey = createSessionKey(this.wRoom, this).Trim();
                                }
                            }
                            ifTicketTypeStringMatch = true;


                            // Removed from here
                            if (this.TmEvent != null)
                            {
                                if (selectedPriceLevel == null && this.TmEvent.PriceLevels.Count > 0)
                                {
                                    this.MoreInfo = "Price level did not match";
                                    return false;
                                }
                            }

                            /******************************************************/
                            //change the price level number accordingly.
                            //1 = Floor standing , 2 = GA etc.
                            /******************************************************/
                            // int numselect = Convert.ToInt32(selectedPriceLevel.PriceSectionNumber) - 1;
                            if ((String.IsNullOrEmpty(this._CurrentParameter.PriceLevelString) || this._CurrentParameter.PriceLevelString.ToLower().Contains("best")) && selectedPriceLevel == null)
                            {
                                PriceLevelObjectList = PriceLevelObjectList.Where(p => p.PriceSectionNumber == "0").ToList();
                            }
                            else
                            {
                                List<AXSPriceLevel> temp = PriceLevelObjectList;
                                PriceLevelObjectList = PriceLevelObjectList.Where(p => p.PriceSectionNumber == selectedPriceLevel.PriceSectionNumber).ToList();
                                if (PriceLevelObjectList.Count == 0 && this.wRoom == "b8ce6c20-9be3-4ebc-8932-35728fe10756")
                                {
                                    AXSPriceLevel price = this.TmEvent.PriceLevels.Where(p => p.PriceSectionNumber.Equals(selectedPriceLevel.PriceSectionNumber)).FirstOrDefault();
                                    price.ifChecked = true;
                                    selectedPriceLevel = this.getPriceLevel(this._CurrentParameter, this.TmEvent.PriceLevels);
                                    PriceLevelObjectList = temp.Where(p => p.PriceSectionNumber == selectedPriceLevel.PriceSectionNumber).ToList();
                                }
                                //  PriceLevelObjectList = PriceLevelObjectList.Where(p => p.PriceSectionNumber == numselect.ToString()).ToList(); // new change
                            }

                            // if pricelevelobjectlist is empty

                            try
                            {
                                if (PriceLevelObjectList != null)
                                {
                                    if (PriceLevelObjectList.Count == 0)
                                    {
                                        int icount = 0;
                                        foreach (String item in plevelList)
                                        {
                                            if (selectedPriceLevel != null)
                                            {
                                                if (item.Equals(selectedPriceLevel.PriceSectionNumber))
                                                {
                                                    PriceLevelObjectList.Add(new AXSPriceLevel(crossSectionsList[icount], item, 0));
                                                }
                                            }
                                            icount++;
                                        }
                                    }
                                }
                            }
                            catch
                            {
                            }
                        }
                    }

                    //PriceLevelObjectList.RemoveAll(p => !filteredSections.Contains(p.PriceSecName));
                    XmlDocument xDoc = null;
                    XmlElement el = null, par = null, value = null, Params = null, data = null;

                    //if (!this.TmEvent.ifJson)
                    {

                        xDoc = new XmlDocument();
                        el = (XmlElement)xDoc.AppendChild(xDoc.CreateElement("methodCall"));

                        el.AppendChild(xDoc.CreateElement("methodName")).InnerText = "webapi.searchSeats2";
                        Params = (XmlElement)el.AppendChild(xDoc.CreateElement("params"));

                        par = (XmlElement)Params.AppendChild(xDoc.CreateElement("param"));
                        value = (XmlElement)par.AppendChild(xDoc.CreateElement("value"));

                        value.AppendChild(xDoc.CreateElement("string")).InnerText = this.SessionKey;

                        par = (XmlElement)Params.AppendChild(xDoc.CreateElement("param"));
                        value = (XmlElement)par.AppendChild(xDoc.CreateElement("value"));

                        value.AppendChild(xDoc.CreateElement("string")).InnerText = this.code;

                        par = (XmlElement)Params.AppendChild(xDoc.CreateElement("param"));
                        value = (XmlElement)par.AppendChild(xDoc.CreateElement("value"));

                        value.AppendChild(xDoc.CreateElement("int")).InnerText = this._CurrentParameter.Quantity.ToString(); //quantity of seats

                        par = (XmlElement)Params.AppendChild(xDoc.CreateElement("param"));
                        value = (XmlElement)par.AppendChild(xDoc.CreateElement("value"));

                        if (!String.IsNullOrEmpty(selectedPriceLevel.PriceSectionNumber))
                        {
                            value.AppendChild(xDoc.CreateElement("array")).InnerXml = "<data><value><int>" + selectedPriceLevel.PriceSectionNumber + "</int></value></data>";
                        }
                        else
                        {
                            value.AppendChild(xDoc.CreateElement("array")).InnerText = "<data />";
                        }

                        // value = (XmlElement)par.AppendChild(xDoc.CreateElement("value"));///added
                        // value.AppendChild(xDoc.CreateElement("int")).InnerText = selectedPriceLevel.PriceSectionNumber.ToString();    //added                                                            

                        par = (XmlElement)Params.AppendChild(xDoc.CreateElement("param"));
                        value = (XmlElement)par.AppendChild(xDoc.CreateElement("value"));

                        value.AppendChild(xDoc.CreateElement("array")).InnerText = "<data />";

                        //        value.AppendChild(xDoc.CreateElement("int")).InnerText = selectedPriceLevel.PriceSectionNumber.ToString();
                        par = (XmlElement)Params.AppendChild(xDoc.CreateElement("param"));
                        value = (XmlElement)par.AppendChild(xDoc.CreateElement("value"));

                        value.AppendChild(xDoc.CreateElement("array")).InnerXml = "<data />";

                        /******************************************************/
                        //Now we add the subsection to the xml, in which we want
                        //our seats to be searched.
                        /******************************************************/
                        par = (XmlElement)Params.AppendChild(xDoc.CreateElement("param"));
                        value = (XmlElement)par.AppendChild(xDoc.CreateElement("value"));

                        String _priceLevelObjectList = String.Empty;

                        {

                            //foreach (AXSPriceLevel tmp in PriceLevelObjectList)
                            for (int i = PriceLevelObjectList.Count - 1; i >= 0; i--)
                            {
                                _priceLevelObjectList += "<value><string>" + PriceLevelObjectList[i].PriceSecName + "</string></value>";
                                //_priceLevelObjectList += "\"" + tmp.PriceSecName + "\"" + ",";
                            }
                            _priceLevelObjectList.TrimEnd(',');

                            if (!ifTicketTypeStringMatch)
                            {
                                this.MoreInfo = "\"" + parameter.PriceLevelString + "\" " + TicketSearchStatus.MoreInfoTicketTypeStringNotMatch;
                                return false;
                            }
                        }

                        //if (String.IsNullOrEmpty(_priceLevelObjectList))
                        {
                            XmlElement arr = (XmlElement)value.AppendChild(xDoc.CreateElement("array"));
                            data = (XmlElement)arr.AppendChild(xDoc.CreateElement("data"));
                        }
                        //else
                        //{
                        //    value.AppendChild(xDoc.CreateElement("array")).InnerXml = "<data>" + _priceLevelObjectList + "</data>";
                        //    //data = value.AppendChild(xDoc.CreateElement("array")).InnerText = "<data><value><int>" + selectedPriceLevel.PriceSectionNumber + "</int></value></data>";
                        //}
                    }

                    //String _priceLevelObjectList = "";

                    //{

                    //    foreach (AXSPriceLevel tmp in PriceLevelObjectList)
                    //    {
                    //        _priceLevelObjectList += "\"" + tmp.PriceSecName + "\"" + ",";
                    //    }
                    //    _priceLevelObjectList.TrimEnd(',');

                    //    if (!ifTicketTypeStringMatch)
                    //    {
                    //        this.MoreInfo = "\"" + parameter.PriceLevelString + "\" " + TicketSearchStatus.MoreInfoTicketTypeStringNotMatch;
                    //        return false;
                    //    }
                    //}

                    string postdata = string.Empty;
                    if (((String.IsNullOrEmpty(this._CurrentParameter.PriceLevelString) || this._CurrentParameter.PriceLevelString.ToLower().Contains("best")) && PriceLevelObjectList.Count == 0) || PriceLevelObjectList.Count != 0)
                    {
                        //if (!this.TmEvent.ifJson)
                        {
                            par = (XmlElement)Params.AppendChild(xDoc.CreateElement("param"));
                            value = (XmlElement)par.AppendChild(xDoc.CreateElement("value"));

                            value.AppendChild(xDoc.CreateElement("boolean")).InnerText = "0";

                            /******************************************************/
                            //Now include the session key
                            /******************************************************/
                            par = (XmlElement)Params.AppendChild(xDoc.CreateElement("param"));
                            value = (XmlElement)par.AppendChild(xDoc.CreateElement("value"));

                            value.AppendChild(xDoc.CreateElement("string")).InnerText = this.SessionKey;

                            /******************************************************/
                            //Now fake the btnConfirm counter
                            /******************************************************/

                            /***********************************************************/
                            //////////////////// New Addition ////////////////////////////
                            par = (XmlElement)Params.AppendChild(xDoc.CreateElement("param"));
                            value = (XmlElement)par.AppendChild(xDoc.CreateElement("value"));

                            value.AppendChild(xDoc.CreateElement("boolean")).InnerText = "0";

                            /***********************************************************/

                            par = (XmlElement)Params.AppendChild(xDoc.CreateElement("param"));
                            value = (XmlElement)par.AppendChild(xDoc.CreateElement("value"));
                            changeStatus("Processing Found Page");
                            value.AppendChild(xDoc.CreateElement("string")).InnerText = ".btnConfirm:10:16:1";
                        }

                        changeStatus("Processing Found Page");
                        Random rnd = new Random();
                        Thread.Sleep(rnd.Next(2000, 10000));
                        // xDoc.InnerXml= "<methodCall><methodName>webapi.searchSeats2</methodName><params><param><value><string>"+this.SessionKey+"</string></value></param><param><value><string>"+this.code+"</string></value></param><param><value><int>"+this._CurrentParameter.Quantity+"</int></value></param><param><value><array><data><value><int>"+selectedPriceLevel.PriceSectionNumber+"</int></value></data></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data><value><string>110_A_Z_2</string></value></data></array></value></param><param><value><boolean>0</boolean></value></param><param><value><string>41115a19-a5a2-40b6-a956-60d19031eea4</string></value></param><param><value><boolean>0</boolean></value></param><param><value><string>.btnConfirm:79:6:1</string></value></param></params></methodCall>";
                        try
                        {
                            if (!String.IsNullOrEmpty(this._CurrentParameter.PriceLevelString) || (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null))
                            {
                                if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                                {
                                    if (this.Ticket.URL.Contains("https"))
                                    {
                                        doc.LoadHtml(post(this, this.XmlUrl.Replace("/info2/", "/bfox/").Replace("wroom", "tickets") + "?methodName=webapi.searchSeats2&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&sessionKey=" + this.SessionKey + "&XMLRPC_callCounter=5&cc=.btnConfirm:84:13:1", xDoc.InnerXml));
                                    }
                                    else
                                    {
                                        doc.LoadHtml(post(this, this.XmlUrl.Replace("/info2/", "/bfox/").Replace("wroom", "tickets") + "?methodName=webapi.searchSeats2&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "&sessionKey=" + this.SessionKey + "&XMLRPC_callCounter=5&cc=.btnConfirm:84:13:1", xDoc.InnerXml));
                                    }
                                }
                                else
                                {
                                    doc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "?methodName=webapi.searchSeats2&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "&sessionKey=" + this.SessionKey + "&XMLRPC_callCounter=6&cc=.btnConfirm:10:16:1", xDoc.InnerXml));
                                }
                            }
                            else //if (String.IsNullOrEmpty(doc.DocumentNode.InnerText.Trim()))
                            {
                                if (this.Ticket.URL.Contains("eventShopperV3.html") || this.Ticket.URL.Contains("eventShopperV3UK") || this.Ticket.URL.Contains("eventShopperV2") || this.Ticket.URL.Contains("eventShopperV3") || this.Ticket.URL.Contains("eventShopperHLSR") || this.Ticket.URL.Contains("eventShopperSWE"))
                                {
                                    //if (this.wRoom == "a10db60a-c7a9-4eb9-aab6-35dfe1842842")
                                    //{
                                    //    xDoc.InnerXml = "<methodCall><methodName>webapi.searchSeats2</methodName><params><param><value><string>" + this.SessionKey + "</string></value></param><param><value><string>" + this.code + "</string></value></param><param><value><int>" + this._CurrentParameter.Quantity.ToString() + "</int></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><boolean>0</boolean></value></param><param><value><string>" + this.SessionKey + "</string></value></param><param><value><int>0</int></value></param><param><value><string>.btnConfirm:56:15:1</string></value></param></params></methodCall>";
                                    //}
                                    if (this.wRoom == "b8ce6c20-9be3-4ebc-8932-35728fe10756" && (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null))
                                    {
                                        xDoc.InnerXml = xDoc.InnerXml;
                                    }
                                    else if ((String.IsNullOrEmpty(this._CurrentParameter.PriceLevelString) || this._CurrentParameter.PriceLevelString.ToLower().Contains("best")) && selectedPriceLevel.PriceSectionNumber == "1")
                                    {
                                        Random random = new Random();

                                        if (this.Ticket.URL.Contains("axs_theo2") || this.Ticket.URL.Contains("theo2"))
                                        {

                                            xDoc.InnerXml = "<methodCall><methodName>webapi.searchSeats2</methodName><params><param><value><string>" + this.SessionKey + "</string></value></param><param><value><string>" + this.code + "</string></value></param><param><value><int>" + this._CurrentParameter.Quantity.ToString() + "</int></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><boolean>1</boolean></value></param><param><value><string>" + this.SessionKey + "</string></value></param><param><value><boolean>0</boolean></value></param><param><value><string>.btnConfirm:" + random.Next(50, 175) + ":15:1</string></value></param></params></methodCall>";
                                        }
                                        else
                                        {
                                            //For Presale
                                            xDoc.InnerXml = "<methodCall><methodName>webapi.searchSeats2</methodName><params><param><value><string>" + this.SessionKey + "</string></value></param><param><value><string>" + this.code + "</string></value></param><param><value><int>" + this._CurrentParameter.Quantity.ToString() + "</int></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><boolean>1</boolean></value></param><param><value><string>" + this.SessionKey + "</string></value></param><param><value><boolean>0</boolean></value></param><param><value><string>.btnConfirm:" + random.Next(110, 175) + ":9:1</string></value></param></params></methodCall>";

                                        }
                                    }
                                    else
                                    {
                                        if (this.Ticket.URL.Contains("axs_theo2") || this.Ticket.URL.Contains("theo2"))
                                        {
                                            Random random = new Random();

                                            xDoc.InnerXml = "<methodCall><methodName>webapi.searchSeats2</methodName><params><param><value><string>" + this.SessionKey + "</string></value></param><param><value><string>" + this.code + "</string></value></param><param><value><int>" + this._CurrentParameter.Quantity.ToString() + "</int></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><boolean>1</boolean></value></param><param><value><string>" + this.SessionKey + "</string></value></param><param><value><boolean>0</boolean></value></param><param><value><string>.btnConfirm:" + random.Next(110, 175) + ":9:1</string></value></param></params></methodCall>";
                                        }
                                        else if (this.Ticket.URL.Contains("staples"))
                                        {
                                            xDoc.InnerXml = "<methodCall><methodName>webapi.searchSeats2</methodName><params><param><value><string>" + this.SessionKey + "</string></value></param><param><value><string>" + this.code + "</string></value></param><param><value><int>" + this._CurrentParameter.Quantity.ToString() + "</int></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><boolean>1</boolean></value></param><param><value><string>" + this.SessionKey + "</string></value></param><param><value><boolean>0</boolean></value></param><param><value><string>.btnConfirm:46:11:1</string></value></param></params></methodCall>";
                                        }
                                        else
                                        {
                                            // here it has to be commented out

                                            //  xDoc.InnerXml = "<methodCall><methodName>webapi.searchSeats2</methodName><params><param><value><string>" + this.SessionKey + "</string></value></param><param><value><string>" + this.code + "</string></value></param><param><value><int>" + this._CurrentParameter.Quantity.ToString() + "</int></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><boolean>1</boolean></value></param><param><value><string>" + this.SessionKey + "</string></value></param><param><value><boolean>0</boolean></value></param><param><value><string>.btnConfirm:59:18:1</string></value></param></params></methodCall>";

                                        }
                                    }
                                    if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                                    {
                                        doc.LoadHtml(post(this, this.XmlUrl.Replace("/info2/", "/bfox/").Replace("wroom", "tickets") + "?methodName=webapi.searchSeats2&serverStr=" + this.XmlUrl.Replace("/info2/", "/bfox/").Replace("wroom", "tickets") + "&sessionKey=" + this.SessionKey + "&XMLRPC_callCounter=18&cc=.btnConfirm:84:13:1", xDoc.InnerXml));
                                    }
                                    else
                                    {
                                        doc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "?methodName=webapi.searchSeats2&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "&sessionKey=" + this.SessionKey + "&XMLRPC_callCounter=6&cc=.btnConfirm:59:18:1", xDoc.InnerXml));
                                    }
                                }
                                else
                                {
                                    doc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/"), postdata));
                                }
                            }

                            if (this.IfWorking && this.Ticket.isRunning)
                            {
                                if (doc.DocumentNode.InnerText.Contains("popup_Obstructed View") || doc.DocumentNode.InnerText.Contains("OBSTRUCTED VIEW"))
                                {
                                    this.MoreInfo += " OBSTRUCTED VIEW";
                                    result = true;
                                }
                                else if (doc.DocumentNode.InnerText.Contains("faultCode") || doc.DocumentNode.InnerText.Contains("faultString"))
                                {
                                    //this.SessionKey = "";
                                    result = false;
                                }
                                else if (String.IsNullOrEmpty(doc.DocumentNode.InnerText.Trim()))
                                {
                                    Random random = new Random();
                                    xDoc.InnerXml = "<methodCall><methodName>webapi.searchSeats2</methodName><params><param><value><string>" + this.SessionKey + "</string></value></param><param><value><string>" + this.code + "</string></value></param><param><value><int>" + this._CurrentParameter.Quantity.ToString() + "</int></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><array><data /></array></value></param><param><value><int>1</int></value></param><param><value><string>" + this.SessionKey + "</string></value></param><param><value><boolean>1</boolean></value></param><param><value><string>.btnConfirm:" + random.Next(50, 175) + ":15:1</string></value></param></params></methodCall>";
                                    //doc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "?methodName=webapi.searchSeats2&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "&sessionKey=" + this.SessionKey + "&XMLRPC_callCounter=18&cc=.btnConfirm:69:15:1", xDoc.InnerXml));

                                    if (String.IsNullOrEmpty(doc.DocumentNode.InnerText.Trim()))
                                    {
                                        this.MoreInfo = "";
                                        this.SessionKey = String.Empty;
                                        this.MoreInfo = "Ticket not found.";
                                        result = false;
                                    }
                                    else
                                    {
                                        result = true;
                                    }
                                }
                                else
                                {
                                    result = true;
                                }
                                if (result)
                                {
                                    //if (QuantityForAutoBuyPost == null)
                                    {
                                        QuantityForAutoBuyPost = new List<string>();
                                    }
                                    ParentItemNum = new List<string>();
                                    ItemNum = new List<string>();
                                    PurchaseUnit = new List<string>();
                                    MaxQuantity = new List<string>();
                                    PmCodes = new List<string>();
                                    pUnits = new List<Core.pUnits>();
                                    HtmlNodeCollection QuantityNodes = doc.DocumentNode.SelectNodes("//name[text()='quantity']");

                                    foreach (HtmlNode item in QuantityNodes)
                                    {
                                        QuantityForAutoBuyPost.Add(item.NextSibling.NextSibling.InnerText);
                                    }
                                    HtmlNodeCollection ParentItemNumNodes = doc.DocumentNode.SelectNodes("//name[text()='parentItemNum']");

                                    foreach (HtmlNode item in ParentItemNumNodes)
                                    {
                                        ParentItemNum.Add(item.NextSibling.NextSibling.InnerText);
                                    }
                                    HtmlNodeCollection ItemNumNodes = doc.DocumentNode.SelectNodes("//name[text()='itemNum']");

                                    foreach (HtmlNode item in ItemNumNodes)
                                    {
                                        ItemNum.Add(item.NextSibling.NextSibling.InnerText);
                                    }

                                    HtmlNodeCollection PurchaseUnitsNodes = doc.DocumentNode.SelectNodes("//name[text()='purchaseUnit']");
                                    foreach (HtmlNode item in PurchaseUnitsNodes)
                                    {
                                        PurchaseUnit.Add(item.NextSibling.NextSibling.InnerText);
                                    }
                                    HtmlNodeCollection MaxQuantityNodes = doc.DocumentNode.SelectNodes("//name[text()='maxQuantity']");
                                    foreach (HtmlNode item in MaxQuantityNodes)
                                    {
                                        MaxQuantity.Add(item.NextSibling.NextSibling.InnerText);
                                    }
                                    String OrderNode = (doc.DocumentNode.SelectSingleNode("//member/name[text() = 'pUnits']")).ParentNode.InnerHtml;
                                    String[] lines = OrderNode.Split('\n');
                                    pUnits unit = new pUnits();
                                    for (int i = 0; i < lines.Length; i++)
                                    {
                                        if (lines[i].Contains("itemNum"))
                                        {
                                            unit.itemNums.Add(lines[i + 1].Replace("<value><int>", "").Replace("</int></value>", "").Trim());
                                        }
                                        if (lines[i].Contains("quantity"))
                                        {
                                            if (!lines[i + 1].Contains("</member>"))
                                            {
                                                unit.quantity.Add(lines[i + 1].Replace("<value><int>", "").Replace("</int></value>", "").Trim());
                                            }
                                            else
                                            {
                                                if (lines[i + 1].Contains("<nil></nil></value></member>"))
                                                {
                                                    unit.quantity.Add("0");
                                                }
                                            }
                                        }
                                        if (lines[i].Contains("purchaseUnit"))
                                        {
                                            unit.purchaseUnit = lines[i + 1].Replace("<value><int>", "").Replace("</int></value>", "").Trim();
                                            this.pUnits.Add(unit);
                                            unit = new pUnits();
                                        }
                                    }
                                    HtmlNodeCollection pmCodes = doc.DocumentNode.SelectNodes("//name[text()='pmCode']");
                                    if (pmCodes != null)
                                    {
                                        foreach (HtmlNode item in pmCodes)
                                        {
                                            PmCodes.Add(item.NextSibling.NextSibling.InnerText);
                                        }
                                    }
                                    result = true;
                                }
                            }
                        }
                        catch
                        {
                            result = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
            #endregion

            return result;
        }
        public string offerRestrictionID { get; set; }
        public Boolean mapParameterIfAvaiableTix(ITicketParameter parameter)
        {
            string jsonStr = string.Empty;

            Boolean ifTicketTypeStringMatch = false;
            Boolean ifTimeMatched = false;
            Boolean ifDateMatched = false;
            Boolean result = false;
            selectedPriceLevelTix = null;
            String strHTML = String.Empty;

            #region json parsing
            try
            {
                if (this._tmEvent != null && parameter != null)
                {
                    #region ResaleTix
                    if (parameter.GetResaleTix)
                    {
                        if (this._tmEvent.HasResaleTickets)
                        {
                            this.Session.Payload = "{\"eventID\":\"" + this.eventID + "\",\"sectionID\":null,\"sectionLabel\":null,\"locale\":\"en-GB\",\"category\":\"SEAT\",\"priceLevels\":[]}";

                            if (this.Ticket.IsUkEvent)
                            {
                                strHTML = Session.Post("https://unifiedapicommercecommerce.axs.co.uk/veritix/inventory/V2/" + this.OnSaleUrl + "/offer/search?sessionID=" + this.SessionKey);
                            }
                            //else
                            //{
                            //    strHTML = Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/inventory/V2/" + this.OnSaleUrl + "/offer/search?sessionID=" + this.SessionKey);
                            //}

                            if (String.IsNullOrEmpty(strHTML))
                            {
                                this.MoreInfo = "There are no Resale tickets available.";
                                return false;
                            }

                            SeatsInfoResale seatInfoResale = JsonConvert.DeserializeObject<SeatsInfoResale>(strHTML);
                            if (seatInfoResale.offers.Count > 0)
                            {
                                List<ResaleOffer> AvailableResaleOffers = seatInfoResale.offers.Where(o => o.offerType != null && o.offerType.Equals("FLASHSEATS")).ToList<ResaleOffer>();
                                if (AvailableResaleOffers != null && AvailableResaleOffers.Count > 0)
                                {
                                    AvailableResaleOffers = AvailableResaleOffers.Where(o => o.items != null && o.items.Count.Equals(parameter.Quantity)).ToList<ResaleOffer>();
                                    if (AvailableResaleOffers != null && AvailableResaleOffers.Count > 0)
                                    {
                                        Random rnd = new Random();
                                        int index = rnd.Next(0, AvailableResaleOffers.Count);

                                        ResaleOffer selectedOffer = AvailableResaleOffers[index];
                                        if (selectedOffer != null)
                                        {
                                            String SeatDetails = String.Empty;

                                            foreach (ResaleItem rItem in selectedOffer.items)
                                            {
                                                try
                                                {
                                                    SeatDetails += "{\"seatType\":\"" + rItem.seatType + "\",\"seatID\":\"" + rItem.id + "\"},";
                                                }
                                                catch { }
                                            }

                                            SeatDetails = SeatDetails.TrimEnd(',');

                                            this.Session.Payload = "{\"selections\":[{\"offerID\":\"" + selectedOffer.offerID + "\",\"items\":[" + SeatDetails + "],\"optionalFeeId\":null,\"deliveryMethodID\":0}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":false}";

                                            if (this.Ticket.IsUkEvent)
                                            {
                                                strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl + "&locale=en-GB&checkPriceChange=false");

                                                return true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        this.MoreInfo = "There are no Resale tickets available.";
                                        return false;
                                    }
                                }
                                else
                                {
                                    this.MoreInfo = "There are no Resale tickets available.";
                                    return false;
                                }
                            }
                            else
                            {
                                this.MoreInfo = "There are no Resale tickets available.";
                                return false;
                            }
                        }
                        else
                        {
                            this.MoreInfo = "There are no Resale tickets available.";
                            return false;
                        }
                    }
                    #endregion

                    #region post
                    // If the Ticket Types exists in the first page then proceed further otherwise show message and keep searching.
                    if (this._tmEvent.HasSections)
                    {
                        // If user provides the Search String or Ticket Type String. Then Select price type according to parameter.

                        foreach (AXSSection item in this._tmEvent.Sections)
                        {
                            if (!String.IsNullOrEmpty(parameter.DateTimeString) && (!parameter.DateTimeString.Equals("mm/dd/yyyy")))
                            {
                                #region dattime provided
                                CultureInfo provider = new CultureInfo("en-US");

                                DateTime dt = DateTime.Now;

                                if (item.EventDates.Contains("at"))
                                {
                                    dt = Convert.ToDateTime(item.EventDates.Split(' ')[0], provider);
                                }
                                else
                                {
                                    dt = DateTimeOffset.Parse(item.EventDates, null).DateTime;
                                }

                                if (parameter.DateTimeString != "mm/dd/yyyy")
                                {
                                    DateTime dt1 = DateTime.ParseExact(parameter.DateTimeString.ToString(), "MM/dd/yyyy", provider);
                                    parameter.DateTimeString = dt1.ToString("MM/dd/yyyy");
                                }
                                else
                                {
                                    parameter.DateTimeString = "";
                                }
                                String EventDates = dt.ToString("MM/dd/yyyy");

                                // Check if user mark checed on Exact Match or not and find for the provided Search String or Ticket Type String.
                                if (parameter.ExactMatch ? EventDates.ToLower() == parameter.DateTimeString.ToLower() : EventDates.ToLower().Contains(parameter.DateTimeString.ToLower()))
                                {
                                    ifDateMatched = true;
                                    if (!String.IsNullOrEmpty(this._CurrentParameter.EventTime) && this._CurrentParameter.EventTime != "hh:mm")
                                    {
                                        DateTime time = DateTime.Now;

                                        if (item.EventDates.Contains("at"))
                                        {
                                            time = Convert.ToDateTime(item.EventDates.Substring(item.EventDates.IndexOf("at")).Replace("at", String.Empty).Trim(), provider);
                                        }
                                        else
                                        {
                                            time = DateTimeOffset.Parse(item.EventDates, null).DateTime;
                                        }
                                        if (parameter.ExactMatch ? time.ToShortTimeString().ToLower() == parameter.EventTime.ToLower() : time.ToShortTimeString().ToLower().Contains(parameter.EventTime.ToLower()))
                                        {
                                            ifTimeMatched = true;
                                            this.code = item.EventCode;
                                            this.MoreInfo += " " + EventDates;
                                            if (this.TmEvent.TixPriceLevels.Count > 0)
                                            {
                                                if (!String.IsNullOrEmpty(parameter.PriceLevelString))
                                                {
                                                    // Select priceLevel from the matching DateTime Search String or Ticket Type String.
                                                    foreach (AXSTixPriceLevels priceLevel in this.TmEvent.TixPriceLevels)
                                                    {
                                                        if (parameter.ExactMatch ? priceLevel.Name.ToLower() == parameter.PriceLevelString.ToLower() : priceLevel.Name.ToLower().Contains(parameter.PriceLevelString.ToLower()))
                                                        {
                                                            // Find and get price level and map it to the post request.
                                                            if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                            {
                                                                selectedPrices = getTixPriceLevel(parameter);
                                                            }
                                                            else
                                                            {
                                                                selectedPriceLevelTix = priceLevel;

                                                                selectedPrices = getTixPriceLevel(parameter);
                                                            }
                                                            break;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    selectedPriceLevelTix = this.TmEvent.TixPriceLevels.FirstOrDefault(pred => pred.Sections.Count > 0);

                                                    if (selectedPriceLevelTix != null)
                                                    {
                                                        // Find and get price level and map it to the post request.
                                                        if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                        {
                                                            selectedPrices = getTixPriceLevel(parameter);
                                                        }
                                                        else
                                                        {
                                                            selectedPrices = getTixPriceLevel(parameter);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ifTimeMatched = true;
                                        this.code = item.EventCode;
                                        this.MoreInfo += " " + EventDates;
                                        if (this.TmEvent.TixPriceLevels.Count > 0)
                                        {
                                            if (!String.IsNullOrEmpty(parameter.PriceLevelString))
                                            {
                                                // Select priceLevel from the matching DateTime Search String or Ticket Type String.
                                                foreach (AXSTixPriceLevels priceLevel in this.TmEvent.TixPriceLevels)
                                                {
                                                    if (parameter.ExactMatch ? priceLevel.Name.ToLower() == parameter.PriceLevelString.ToLower() : priceLevel.Name.ToLower().Contains(parameter.PriceLevelString.ToLower()))
                                                    {
                                                        // Find and get price level and map it to the post request.
                                                        if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                        {
                                                            selectedPrices = getTixPriceLevel(parameter);
                                                        }
                                                        else
                                                        {
                                                            selectedPriceLevelTix = priceLevel;

                                                            selectedPrices = getTixPriceLevel(parameter);
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                selectedPriceLevelTix = this.TmEvent.TixPriceLevels.FirstOrDefault(pred => pred.Sections.Count > 0);

                                                if (selectedPriceLevelTix != null)
                                                {
                                                    // Find and get price level and map it to the post request.
                                                    if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                    {
                                                        selectedPrices = getTixPriceLevel(parameter);
                                                    }
                                                    else
                                                    {
                                                        selectedPrices = getTixPriceLevel(parameter);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                ifDateMatched = true;
                                ifTimeMatched = true;
                                this.code = item.EventCode;

                                if (this.TmEvent.TixPriceLevels.Count > 0)
                                {
                                    if (!String.IsNullOrEmpty(parameter.PriceLevelString))
                                    {
                                        #region pricelevel string given
                                        // Select priceLevel from the matching DateTime Search String or Ticket Type String.
                                        foreach (AXSTixPriceLevels priceLevel in this.TmEvent.TixPriceLevels)
                                        {
                                            if (parameter.ExactMatch ? priceLevel.Name.ToLower() == parameter.PriceLevelString.ToLower() : priceLevel.Name.ToLower().Contains(parameter.PriceLevelString.ToLower()))
                                            {
                                                selectedPriceLevelTix = priceLevel;

                                                if (selectedPriceLevelTix != null)
                                                {
                                                    // Find and get price level and map it to the post request.
                                                    if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                    {
                                                        selectedPrices = getTixPriceLevel(parameter);

                                                        if (selectedPrices == null)
                                                        {
                                                            this.MoreInfo = "Price did not match";
                                                            return false;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        selectedPrices = getTixPriceLevel(parameter);
                                                    }
                                                }
                                                else
                                                {
                                                    this.MoreInfo = "There is no tickets available.";
                                                    return false;
                                                }
                                                break;
                                            }
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        if (!ifMap)
                                        {
                                            #region If not a map event

                                            if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                            {
                                                #region Price range
                                                List<AXSTixPriceLevels> tmp = this.TmEvent.TixPriceLevels.Where(pred => pred.Sections.Where(s => s.SeatsAvailable >= _CurrentParameter.Quantity).Count() > 0).ToList();

                                                foreach (AXSTixPriceLevels plevel in tmp)
                                                {
                                                    try
                                                    {
                                                        AXSTixPrices price = plevel.Prices.FirstOrDefault(p => p.Price >= this._CurrentParameter.PriceMin && p.Price <= this._CurrentParameter.PriceMax);
                                                        if (price != null)
                                                        {
                                                            selectedPriceLevelTix = plevel;
                                                            selectedPrices = price;
                                                            break;
                                                        }
                                                    }
                                                    catch
                                                    { }
                                                }
                                                #endregion
                                            }
                                            else if (this._CurrentParameter.LowestPrice)
                                            {
                                                SelectLowestPricelevelTix();
                                            }
                                            else if (this._CurrentParameter.TopPrice)
                                            {
                                                SelectTopPricelevelTix();
                                            }
                                            else
                                            {
                                                try
                                                {
                                                    #region found criteria section
                                                    if (this.Ticket.TicketFoundCriterions != null && this.Ticket.TicketFoundCriterions.Count > 0)
                                                    {
                                                        for (int i = 0; i < this.Ticket.TicketFoundCriterions.Count; i++)
                                                        {
                                                            try
                                                            {
                                                                List<AXSTixPriceLevels> plevels = this.TmEvent.TixPriceLevels.Where(pred => pred.Sections.Where(s => s.SeatsAvailable >= _CurrentParameter.Quantity & s.Label.Equals(this.Ticket.TicketFoundCriterions[i].Section)).Count() > 0).ToList();
                                                                if (plevels != null && plevels.Count > 0)
                                                                {
                                                                    //Random rnd = new Random();
                                                                    //int index = 0;
                                                                    //index = rnd.Next(0, plevels.Count);

                                                                    selectedPriceLevelTix = plevels[0];

                                                                    break;
                                                                }
                                                            }
                                                            catch
                                                            { }
                                                        }
                                                    }
                                                    #endregion

                                                    if (selectedPriceLevelTix == null)
                                                    {
                                                        List<AXSTixPriceLevels> plevels = this.TmEvent.TixPriceLevels.Where(pred => pred.Sections.Where(s => s.SeatsAvailable >= _CurrentParameter.Quantity).Count() > 0).ToList();

                                                        if (plevels == null || plevels.Count <= 0)
                                                        {
                                                            selectedPriceLevelTix = this.TmEvent.TixPriceLevels[new Random().Next(0, this.TmEvent.TixPriceLevels.Count)];
                                                        }
                                                        else
                                                        {

                                                            selectedPriceLevelTix = plevels[0];
                                                        }
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    selectedPriceLevelTix = this.TmEvent.TixPriceLevels.FirstOrDefault(pred => pred.Sections.Count() > 0);
                                                    Debug.WriteLine(ex.StackTrace + " " + ex.Message);
                                                }
                                            }


                                            if (selectedPriceLevelTix != null)
                                            {
                                                if (selectedPrices == null)
                                                {
                                                    // Find and get price level and map it to the post request.
                                                    if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                    {
                                                        selectedPrices = getTixPriceLevel(parameter);

                                                        if (selectedPrices == null)
                                                        {
                                                            this.MoreInfo = "Price did not match";
                                                            return false;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        selectedPrices = getTixPriceLevel(parameter);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                this.MoreInfo = "There is no tickets available.";
                                                return false;
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            selectedPriceLevelTix = this.TmEvent.TixPriceLevels.ElementAt(new Random().Next(0, this.TmEvent.TixPriceLevels.Count()));

                                            if (selectedPriceLevelTix != null)
                                            {
                                                // Find and get price level and map it to the post request.
                                                if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                {
                                                    selectedPrices = getTixPriceLevel(parameter);
                                                }
                                                else
                                                {
                                                    selectedPrices = getTixPriceLevel(parameter);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (!ifDateMatched)
                        {
                            this.MoreInfo = "Date does not matched";
                            return false;
                        }

                        if (!ifTimeMatched)
                        {
                            this.MoreInfo = "Time does not matched";
                            return false;
                        }

                        if (this.TmEvent.TixPriceLevels.Count == 0)
                        {
                            this.MoreInfo = "There is no tickets available.";
                            return false;
                        }

                        if (selectedPriceLevelTix == null && !ifMap && this.TmEvent.TixPriceLevels.Count > 0)
                        {
                            this.MoreInfo = "Price level did not match";
                            return false;
                        }

                        String _priceLevelObjectList = "";

                        string postdata = string.Empty;

                        Boolean section = getSection();

                        if (!this.ifMap)
                        {
                            if (!section)
                            {
                                this.MoreInfo = "No seats found against the sections";
                                return false;
                            }
                        }


                        if (!String.IsNullOrEmpty(_CurrentParameter.TicketTypePasssword))
                        {
                            #region PromoCode
                            this.Session.Payload = "{\"promocode\":null,\"passcode\":\"" + _CurrentParameter.TicketTypePasssword + "\"}";
                            if (this.Ticket.IsUkEvent)// if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                            {
                                strHTML = Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/onsale/v2/" + this.OnSaleUrl + "/check-restrictions");
                                try
                                {
                                    JObject restriction = JObject.Parse(strHTML);

                                    if (restriction.Property("offerRestrictionID") == null || restriction.Property("availableTicketQty") == null)
                                    {
                                        this.Session.Payload = "{\"promocode\":\"" + _CurrentParameter.TicketTypePasssword + "\"}";

                                        strHTML = Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/onsale/v2/" + this.OnSaleUrl + "/check-restrictions");
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Debug.WriteLine(ex.Message);
                                }
                            }
                            else
                            {
                                strHTML = Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/onsale/v2/" + this.OnSaleUrl + "/check-restrictions");

                                try
                                {
                                    JObject restriction = JObject.Parse(strHTML);

                                    if (restriction.Property("offerRestrictionID") == null || restriction.Property("availableTicketQty") == null)
                                    {
                                        this.Session.Payload = "{\"promocode\":\"" + _CurrentParameter.TicketTypePasssword + "\"}";

                                        strHTML = Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/onsale/v2/" + this.OnSaleUrl + "/check-restrictions");

                                        restriction = JObject.Parse(strHTML);
                                        if (restriction.Property("offerRestrictionID") != null)
                                        {
                                            this.offerRestrictionID = restriction["offerRestrictionID"].ToString();
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Debug.WriteLine(ex.Message);
                                }
                            }
                            #endregion
                        }

                        PriceLevelSection pricelevelString = getAllPriceLevelsString();



                        if (selectedSection != null)
                        {
                            string lable = "\"" + selectedSection.Label + "\"";

                            this.Session.Payload = "{\"eventID\":\"" + this.eventID + "\",\"sectionID\":" + selectedSection.ID + ",\"sectionLabel\":" + lable + ",\"locale\":\"en-us\",\"category\":\"SEAT\",\"priceLevels\":[" + pricelevelString.PriceLevelId + "]}";

                        }
                        else
                        {



                            //this.Session.Payload = "{\"eventID\":\"" + this.eventID + "\",\"sectionID\":null,\"sectionLabel\":null,\"locale\":\"en\",\"category\":\"SEAT\",\"quantity\":" + _CurrentParameter.Quantity + ",\"priceLevels\":[" + pricelevelString + "],\"axsInviteQuantity\":0}";
                            if (pricelevelString.SectionID != null && pricelevelString.SectionLabel != null)
                            {
                                this.Session.Payload = "{\"eventID\":\"" + this.eventID + "\",\"sectionID\":" + pricelevelString.SectionID + ",\"sectionLabel\":" + pricelevelString.SectionLabel + ",\"locale\":\"en-us\",\"category\":\"SEAT\",\"priceLevels\":[" + pricelevelString.PriceLevelId + "]}";
                            }
                            else if (pricelevelString.SectionID != null && pricelevelString.SectionLabel == null)
                            {
                                this.Session.Payload = "{\"eventID\":\"" + this.eventID + "\",\"sectionID\":" + pricelevelString.SectionID + ",\"sectionLabel\":null" + ",\"locale\":\"en-us\",\"category\":\"SEAT\",\"priceLevels\":[" + pricelevelString.PriceLevelId + "]}";
                            }
                            else if (pricelevelString.SectionID == null && pricelevelString.SectionLabel != null)
                            {
                                this.Session.Payload = "{\"eventID\":\"" + this.eventID + "\",\"sectionID\":null" + ",\"sectionLabel\":" + pricelevelString.SectionLabel + ",\"locale\":\"en-us\",\"category\":\"SEAT\",\"priceLevels\":[" + pricelevelString.PriceLevelId + "]}";
                            }
                            else if (pricelevelString.SectionID == null && pricelevelString.SectionLabel == null)
                            {
                                this.Session.Payload = "{\"eventID\":\"" + this.eventID + "\",\"sectionID\":null" + ",\"sectionLabel\":null" + ",\"locale\":\"en-us\",\"category\":\"SEAT\",\"priceLevels\":[" + pricelevelString.PriceLevelId + "]}";
                            }  

                        }
                        if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                        {
                            this.Session.Payload = this.Session.Payload.Replace("\"locale\":\"en-us\"", "\"locale\":\"en-GB\"");

                            strHTML = Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/inventory/V2/" + this.OnSaleUrl + "/offer/search?sessionID=" + this.SessionKey);
                        }
                        else
                        {
                            strHTML = Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/inventory/V2/" + this.OnSaleUrl + "/offer/search?sessionID=" + this.SessionKey);
                        }

                        if (String.IsNullOrEmpty(strHTML))
                        {
                            return false;
                        }

                        try
                        {
                            Debug.WriteLine(strHTML);
                            SeatsInfo seatInfo = JsonConvert.DeserializeObject<SeatsInfo>(strHTML);

                            if (seatInfo.offers.Count > 0)
                            {
                                int offerCount = 0;

                                for (int i = 0; i < seatInfo.offers.Count; i++)
                                {
                                    if (seatInfo.offers[i].offerID.Equals(this.OfferID))
                                    {
                                        offerCount = i;
                                        break;
                                    }
                                }

                                try
                                {
                                    offerGroupID = seatInfo.offers[offerCount].offerGroupID;
                                    productID = seatInfo.offers[offerCount].productID;
                                }
                                catch
                                { }

                                PairDetector detector = new PairDetector(seatInfo.offers[offerCount], _CurrentParameter.Quantity);

                                if (detector.HasPairs)
                                {
                                    postdata = String.Empty;
                                    Random rnd = new Random();

                                    if (this.ifMap)
                                    {
                                        #region map event
                                        int inde = 0;
                                    retry:
                                        //postdata = "{\"selections\":[{\"offerID\":\"" + seatInfo.offers[offerCount].offerID + "\",\"eventID\":\"" + this.eventID + "\",\"items\":[";
                                        postdata = "{\"selections\":[{\"offerID\":\"" + seatInfo.offers[offerCount].offerID + "\",\"offerGroupID\":\"" + offerGroupID + "\",\"optionalFeeId\":null,\"productID\":\"" + productID + "\",\"items\":[";
                                        SeatsPair seatPair = new SeatsPair();
                                        detector.Pairs.Shuffle();
                                        inde = rnd.Next(0, detector.Pairs.Count);

                                        if (this.Ticket.TicketFoundCriterions == null || this.Ticket.TicketFoundCriterions.Count <= 0)
                                        {
                                            if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                            {
                                                /*** IF THE EVENT IS MAP EVENT AND USER HAVE PROVIDED
                                                 *** PRICE RANGES
                                                 ***/

                                                #region Price range
                                                List<AXSTixPriceLevels> tmp = this.TmEvent.TixPriceLevels.Where(pred => pred.Sections.Where(s => s.SeatsAvailable >= _CurrentParameter.Quantity).Count() > 0 && pred.Prices.FirstOrDefault(p => p.Price >= this._CurrentParameter.PriceMin && p.Price <= this._CurrentParameter.PriceMax) != null).ToList();
                                                foreach (AXSTixPriceLevels plevel in tmp)
                                                {
                                                    try
                                                    {
                                                        AXSTixPrices price = plevel.Prices.FirstOrDefault(p => p.Price >= this._CurrentParameter.PriceMin && p.Price <= this._CurrentParameter.PriceMax);
                                                        if (price != null)
                                                        {
                                                            selectedPriceLevelTix = plevel;
                                                            selectedPrices = price;
                                                            break;
                                                        }
                                                    }
                                                    catch
                                                    { }
                                                }
                                                #endregion

                                                seatPair = getSeatsFromSpecificPriceRange(detector.Pairs);
                                            }
                                            else if (this._CurrentParameter.LowestPrice)
                                            {
                                                SelectLowestPricelevelTix();

                                                seatPair = getSeatsFromSpecificPriceRange(detector.Pairs);
                                            }
                                            else if (this._CurrentParameter.TopPrice)
                                            {
                                                SelectTopPricelevelTix();

                                                seatPair = getSeatsFromSpecificPriceRange(detector.Pairs);
                                            }
                                            else
                                            {
                                                /*** Random selection nothing is entered from client ***/
                                                seatPair = detector.Pairs[inde];

                                                #region By default select any random one.
                                                List<AXSTixPriceLevels> tmp = this.TmEvent.TixPriceLevels.Where(pred => pred.Sections.Where(s => s.SeatsAvailable >= _CurrentParameter.Quantity && s.Label.Equals(seatPair.sectionLabel)).Count() > 0).ToList();
                                                foreach (AXSTixPriceLevels plevel in tmp)
                                                {
                                                    try
                                                    {
                                                        AXSTixPrices price = plevel.Prices[0];//.FirstOrDefault(p => p.Price >= this._CurrentParameter.PriceMin && p.Price <= this._CurrentParameter.PriceMax);
                                                        if (price != null)
                                                        {
                                                            selectedPriceLevelTix = plevel;
                                                            selectedPrices = price;
                                                            break;
                                                        }
                                                    }
                                                    catch
                                                    { }
                                                }

                                                // seatPair = getSeatsFromSpecificPriceRange(detector.Pairs);
                                                #endregion
                                            }
                                        }
                                        else
                                        {
                                            if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                            {
                                                /*** IF THE EVENT IS MAP EVENT AND USER HAVE PROVIDED
                                                 *** PRICE RANGES
                                                 ***/

                                                #region Price range
                                                List<AXSTixPriceLevels> tmp = this.TmEvent.TixPriceLevels.Where(pred => pred.Sections.Where(s => s.SeatsAvailable >= _CurrentParameter.Quantity).Count() > 0 && pred.Prices.FirstOrDefault(p => p.Price >= this._CurrentParameter.PriceMin && p.Price <= this._CurrentParameter.PriceMax) != null).ToList();
                                                foreach (AXSTixPriceLevels plevel in tmp)
                                                {
                                                    try
                                                    {
                                                        AXSTixPrices price = plevel.Prices.FirstOrDefault(p => p.Price >= this._CurrentParameter.PriceMin && p.Price <= this._CurrentParameter.PriceMax);
                                                        if (price != null)
                                                        {
                                                            selectedPriceLevelTix = plevel;
                                                            selectedPrices = price;
                                                            break;
                                                        }
                                                    }
                                                    catch
                                                    { }
                                                }
                                                #endregion

                                                seatPair = getSeatsFromSpecificPriceRange(detector.Pairs);
                                            }
                                            else
                                            {
                                                seatPair = getSeatsFromSpecificSection(detector.Pairs);
                                            }
                                        }

                                        if (String.IsNullOrEmpty(seatPair.Row))
                                        {
                                            this.MoreInfo = "Row criteria mismatched. ";
                                            return false;
                                        }

                                        foreach (var item in seatPair.Seats)
                                        {
                                            Item offer = seatInfo.offers[offerCount].items.FirstOrDefault(pred => pred.rowID.Equals(seatPair.RowID) && pred.number.Equals(item.ToString()));
                                            this.offerID = seatInfo.offers[offerCount].offerID;
                                            String typeID = (offer.priceTypeIDs != null) ? offer.priceTypeIDs[0] : String.Empty;
                                            string price = selectedPrices.Price.ToString().Replace(".", String.Empty);
                                            price += "0";

                                            string priceTypeID = string.Empty;
                                            if (selectedPriceLevelTix.Sections.Count > 0)
                                            {
                                                priceTypeID = selectedPriceLevelTix.Sections[0].PriceTypeID[0];
                                                postdata += "{\"priceTypeID\":\"" + priceTypeID + "\",\"rowID\":\"" + seatPair.RowID + "\",\"seatID\":\"" + offer.id + "\",\"seatType\":\"" + offer.seatType + "\",\"sectionID\":\"" + offer.sectionID + "\"},";

                                            }
                                            else
                                            {
                                                 postdata += "{\"priceTypeID\":\"" + this.TmEvent.TixTicketTypes[0].ID + "\",\"reqP\":\"" + price + "\",\"rowID\":\"" + seatPair.RowID + "\",\"seatID\":\"" + offer.id + "\",\"seatType\":\"" + offer.seatType + "\",\"sectionID\":\"" + offer.sectionID + "\"},";
                                            }
                                        }

                                        postdata = postdata.TrimEnd(',');

                                        postdata += "]}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":false}";

                                        try
                                        {
                                            this.Session.Payload = postdata;

                                            if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                                            {
                                                strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);
                                            }
                                            else
                                            {
                                                strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl + "&locale=en-US&checkPriceChange=true");
                                            }

                                            if (strHTML.Contains("Seat selection cannot leave behind stranded single(s)"))
                                            {
                                                // this.MoreInfo = "Seat selection cannot leave behind stranded single(s)";
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                        }

                                        //Map is static
                                        if (this.Session.HTMLWeb.StatusCode == HttpStatusCode.BadRequest || this.Session.HTMLWeb.StatusCode == HttpStatusCode.Forbidden)
                                        {
                                            this.offerID = seatInfo.offers[offerCount].offerID;
                                            this.MoreInfo = String.Empty;

                                            postdata = "{\"selections\":[{\"offerID\":\"" + seatInfo.offers[offerCount].offerID + "\",\"eventID\":\"" + this.eventID + "\",\"searches\":[{\"quantity\":" + _CurrentParameter.Quantity + ",\"sectionID\":null,\"priceTypeID\":\"" + seatInfo.offers[offerCount].items[0].priceTypeIDs[0] + "\"}]}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":false}";
                                            this.Session.Payload = postdata;
                                           // strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);

                                            if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                                            {
                                                strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);
                                            }
                                            else
                                            {
                                                strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl + "&locale=en-US&checkPriceChange=true");
                                            }
                                        }

                                        if (this.Session.HTMLWeb.StatusCode == HttpStatusCode.NotFound)
                                        {
                                            inde++;

                                            if (detector.Pairs.Count > inde)
                                            {
                                                this.MoreInfo = "Item not available. Trying again!";
                                                goto retry;
                                            }
                                            else
                                            {
                                                this.MoreInfo = "Ticket not found.";
                                            }
                                        }
                                        else if (this.Session.HTMLWeb.StatusCode == HttpStatusCode.OK)
                                        {
                                            this.MoreInfo = String.Empty;
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        //For best available
                                        this.offerID = seatInfo.offers[offerCount].offerID;

                                        if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                        {
                                            postdata = "{\"selections\":[{\"offerID\":\"" + seatInfo.offers[offerCount].offerID + "\",\"eventID\":\"" + this.eventID + "\",\"searches\":[{\"quantity\":" + _CurrentParameter.Quantity + ",\"sectionID\":null,\"priceLevelID\":\"" + selectedPrices.PriceID + "\",\"priceTypeID\":\"" + seatInfo.offers[offerCount].items[0].priceTypeIDs[0] + "\"}]}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":true}";
                                        }
                                        else
                                        {
                                            postdata = "{\"selections\":[{\"offerID\":\"" + seatInfo.offers[offerCount].offerID + "\",\"eventID\":\"" + this.eventID + "\",\"searches\":[{\"quantity\":" + _CurrentParameter.Quantity + ",\"sectionID\":null,\"priceTypeID\":\"" + seatInfo.offers[offerCount].items[0].priceTypeIDs[0] + "\"}]}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":true}";
                                        }

                                        this.Session.Payload = postdata;
                                        //strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);

                                        if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                                        {
                                            strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);
                                        }
                                        else
                                        {
                                            strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl + "&locale=en-US&checkPriceChange=true");
                                        }
                                    }
                                }
                                //For GA or Floot in which we don't have seats number (no seats) or we can say in seat number we have GA written
                                else
                                {
                                    this.offerID = seatInfo.offers[offerCount].offerID;

                                    if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                    {
                                        postdata = "{\"selections\":[{\"offerID\":\"" + seatInfo.offers[offerCount].offerID + "\",\"eventID\":\"" + this.eventID + "\",\"searches\":[{\"quantity\":" + _CurrentParameter.Quantity + ",\"sectionID\":null,\"priceLevelID\":\"" + selectedPrices.PriceID + "\",\"priceTypeID\":\"" + seatInfo.offers[offerCount].items[0].priceTypeIDs[0] + "\"}]}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":true}";
                                    }
                                    else
                                    {
                                        if (selectedPriceLevelTix != null)
                                        {
                                            postdata = "{\"selections\":[{\"offerID\":\"" + seatInfo.offers[offerCount].offerID + "\",\"offerGroupID\":\"" + offerGroupID + "\",\"productID\":\"" + productID + "\",\"searches\":[{\"quantity\":" + _CurrentParameter.Quantity + ",\"sectionID\":null,\"priceLevelID\":\"" + selectedPriceLevelTix.PriceLevelID + "\",\"priceTypeID\":\"" + this._tmEvent.TixTicketTypes[0].ID + "\",\"reqR\":[" + selectedPrices.Price.ToString().Replace(".", String.Empty) + "," + selectedPrices.Price.ToString().Replace(".", String.Empty) + "]}],\"optionalFeeId\":null}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":true}";
                                        }
                                        else
                                        {
                                            //postdata = "{\"selections\":[{\"offerID\":\"" + seatInfo.offers[offerCount].offerID + "\",\"eventID\":\"" + this.eventID + "\",\"searches\":[{\"quantity\":" + _CurrentParameter.Quantity + ",\"sectionID\":null,\"priceTypeID\":\"" + this._tmEvent.TixTicketTypes[0].ID + "\"}]}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":true}";
                                            postdata = "{\"selections\":[{\"offerID\":\"" + seatInfo.offers[offerCount].offerID + "\",\"offerGroupID\":\"" + offerGroupID + "\",\"productID\":\"" + productID + "\",\"searches\":[{\"quantity\":" + _CurrentParameter.Quantity + ",\"sectionID\":null,\"priceTypeID\":\"" + this._tmEvent.TixTicketTypes[0].ID + "\",\"reqR\":[-1,-1]}],\"optionalFeeId\":null}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":true}";
                                        }
                                    }
                                    this.Session.Payload = postdata;

                                    if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                                    {
                                        strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);
                                    }
                                    else
                                    {
                                        strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);
                                    }
                                }
                            }
                            //For GA or Floot in which we don't have seats number (no seats)
                            else
                            {
                                #region By default select any random one.

                                Random rnd = new Random();
                                int index = 0;
                                index = rnd.Next(0, this.TmEvent.TixPriceLevels.Count);

                                if (selectedPrices == null)
                                {
                                    selectedPriceLevelTix = this.TmEvent.TixPriceLevels[index];
                                }


                                #endregion

                                this.offerID = OfferID;
                                String offerGroupID = String.Empty;

                                if (this.TmEvent.offerIds != null && this.TmEvent.offerIds.Count > 0)
                                {
                                    offerGroupID = this.TmEvent.offerIds[this.offerID];
                                }

                                postdata = "{\"selections\":[{\"offerID\":\"" + OfferID + "\",\"offerGroupID\":\"" + offerGroupID + "\",\"searches\":[{\"quantity\":" + _CurrentParameter.Quantity + ",\"sectionID\":null,\"priceLevelID\":\"" + selectedPriceLevelTix.PriceLevelID + "\",\"priceTypeID\":\"" + this._tmEvent.TixTicketTypes[0].ID + "\"}]}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":false}";

                                this.Session.Payload = postdata;
                               // strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl + "&locale=en-US");

                                if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                                {
                                    strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);
                                }
                                else
                                {
                                    strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl + "&locale=en-US&checkPriceChange=true");
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            this.offerID = OfferID;
                            if (selectedSection != null)
                            {
                                postdata = "{\"selections\":[{\"offerID\":\"" + OfferID + "\",\"eventID\":\"" + this.eventID + "\",\"searches\":[{\"quantity\":" + _CurrentParameter.Quantity + ",\"sectionID\":" + selectedSection.ID + ",\"priceLevelID\":\"" + selectedPriceLevelTix.PriceLevelID + "\",\"priceTypeID\":\"" + this._tmEvent.TixTicketTypes[0].ID + "\"}]}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":false}";
                            }
                            else
                            {
                                postdata = "{\"selections\":[{\"offerID\":\"" + OfferID + "\",\"eventID\":\"" + this.eventID + "\",\"searches\":[{\"quantity\":" + _CurrentParameter.Quantity + ",\"sectionID\":null,\"priceLevelID\":\"" + selectedPriceLevelTix.PriceLevelID + "\",\"priceTypeID\":\"" + this._tmEvent.TixTicketTypes[0].ID + "\"}]}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":false}";
                            }

                            this.Session.Payload = postdata;

                            if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                            {
                                //AXSTixPriceTypes selectTixPriceType = this._tmEvent.TixTicketTypes.FirstOrDefault(f => f.Label.Equals(selectedPriceLevelTix.Name));

                                for (int i = 0; i < this._tmEvent.TixTicketTypes.Count; i++)
                                {
                                    this.Session.Payload = "{\"selections\":[{\"offerGroupID\":\"" + offerGroupID + "\",\"productID\":\"" + productID + "\",\"offerID\":\"" + OfferID + "\",\"eventID\":\"" + this.eventID + "\",\"searches\":[{\"quantity\":" + _CurrentParameter.Quantity + ",\"sectionID\":null,\"priceLevelID\":\"" + selectedPriceLevelTix.PriceLevelID + "\",\"priceTypeID\":\"" + this._tmEvent.TixTicketTypes[i].ID + "\"}]}],\"nextPage\":\"shop__delivery-method-page\",\"overwrite\":false}";

                                    //strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);

                                    if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                                    {
                                        strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);
                                    }
                                    else
                                    {
                                        strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl + "&locale=en-US&checkPriceChange=true");
                                    }

                                    if (!strHTML.Contains("Service is unavailable"))
                                    {
                                        break;
                                    }
                                }

                                result = true;
                            }
                            else
                            {
                                //strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);

                                if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk/") || this.Ticket.URL.Contains("q.axs.co.uk/"))
                                {
                                    strHTML = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl);
                                }
                                else
                                {
                                    strHTML = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/cart/v2/add-items?onsaleID=" + this.OnSaleUrl + "&locale=en-US&checkPriceChange=true");
                                }
                            }
                        }

                        //if (((String.IsNullOrEmpty(this._CurrentParameter.PriceLevelString) || this._CurrentParameter.PriceLevelString.ToLower().Contains("best")) && PriceLevelObjectList.Count == 0) || PriceLevelObjectList.Count != 0)
                        {
                            //postdata = "{\"eventID\":\"" + this.eventID + "\",\"sectionID\":\"" + selectedSection.ID + "\",\"locale\":\"en\",\"category\":\"SEAT\",\"quantity\":" + _CurrentParameter.Quantity + ",\"priceLevels\":[\"" + selectedPrices.PriceID + "\"],\"axsInviteQuantity\":0}";

                            changeStatus("Processing Found Page");
                            Random rnd = new Random();
                            //Thread.Sleep(rnd.Next(2000, 5000));

                            try
                            {
                                Debug.WriteLine("Found Page" + Session.HtmlDocument.DocumentNode.InnerText);
                                //doc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/"), postdata));

                                if (this.IfWorking && this.Ticket.isRunning)
                                {
                                    if (Session.HtmlDocument.DocumentNode.InnerText.Contains("popup_Obstructed View") || Session.HtmlDocument.DocumentNode.InnerText.Contains("OBSTRUCTED VIEW"))
                                    {
                                        this.MoreInfo += " OBSTRUCTED VIEW";
                                    }
                                    else if (Session.HtmlDocument.DocumentNode.InnerText.Contains("faultCode") || Session.HtmlDocument.DocumentNode.InnerText.Contains("faultString"))
                                    {
                                        this.SessionKey = String.Empty;
                                        result = false;
                                    }
                                    else if (String.IsNullOrEmpty(Session.HtmlDocument.DocumentNode.InnerText.Trim()))
                                    {
                                        this.MoreInfo = "";
                                        this.SessionKey = String.Empty;
                                        this.MoreInfo = "Ticket not found.";
                                        result = false;
                                    }

                                    else if (Session.HtmlDocument.DocumentNode.InnerText.ToLower().Contains("selection cannot leave behind stranded"))
                                    {
                                        this.MoreInfo = "";
                                        this.SessionKey = String.Empty;
                                        this.MoreInfo = "Seat selection cannot leave behind stranded single(s).";
                                        result = false;
                                    }
                                    else
                                    {
                                        result = true;
                                    }
                                }
                            }
                            catch
                            {
                                result = false;
                            }
                        }
                    }
                    #endregion
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }
            #endregion

            return result;
        }
        private PriceLevelSection getAllPriceLevelsString()
        {
            PriceLevelSection result = new PriceLevelSection();

            try
            {
                if (this.TmEvent.TixPriceLevels != null)
                {
                    if (this.selectedPriceLevelTix == null)
                    {
                        foreach (AXSTixPriceLevels pricelevel in this.TmEvent.TixPriceLevels)
                        {
                            if (String.IsNullOrEmpty(result.PriceLevelId))
                            {
                                result.PriceLevelId = "\"" + pricelevel.PriceLevelID + "\"";
                            }
                            else
                            {
                                result.PriceLevelId += ",\"" + pricelevel.PriceLevelID + "\"";
                            }

                     
                        }
                    }
                    else
                    {
                        result.PriceLevelId = "\"" + this.selectedPriceLevelTix.PriceLevelID + "\"";
                       
                        foreach (var item in this.selectedPriceLevelTix.Sections)
                        {
                            result.SectionID = "\"" + item.ID + "\"";
                            result.SectionLabel = "\"" + item.Label + "\"";
                            
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return result;
        }

        protected void SelectLowestPricelevelTix()
        {
            try
            {
                List<AXSTixPriceLevels> tmp = this.TmEvent.TixPriceLevels.Where(pred => pred.Sections.Where(s => s.SeatsAvailable >= _CurrentParameter.Quantity).Count() > 0).ToList();

                List<double> prices = new List<double>();
                foreach (AXSTixPriceLevels item in tmp)
                {
                    try
                    {
                        double pr = item.Prices.Min().Price;
                        prices.Add(pr);
                    }
                    catch { }
                }

                prices.Sort();

                foreach (AXSTixPriceLevels plevel in tmp)
                {
                    try
                    {
                        AXSTixPrices price = plevel.Prices.FirstOrDefault(p => p.Price.Equals(prices[0]));
                        if (price != null)
                        {
                            selectedPriceLevelTix = plevel;
                            selectedPrices = price;
                            break;
                        }
                    }
                    catch
                    { }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }

        protected void SelectTopPricelevelTix()
        {
            try
            {
                List<AXSTixPriceLevels> tmp = this.TmEvent.TixPriceLevels.Where(pred => pred.Sections.Where(s => s.SeatsAvailable >= _CurrentParameter.Quantity).Count() > 0).ToList();

                List<double> prices = new List<double>();

                foreach (AXSTixPriceLevels item in tmp)
                {
                    try
                    {
                        double pr = item.Prices.Max().Price;
                        prices.Add(pr);
                    }
                    catch { }
                }

                prices.Sort(new SortIntDescending());

                foreach (AXSTixPriceLevels plevel in tmp)
                {
                    try
                    {
                        AXSTixPrices price = plevel.Prices.FirstOrDefault(p => p.Price.Equals(prices[0]));
                        if (price != null)
                        {
                            selectedPriceLevelTix = plevel;
                            selectedPrices = price;
                            break;
                        }
                    }
                    catch
                    { }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }

        protected SeatsPair getSeatsFromSpecificSection(List<SeatsPair> pair)
        {
            SeatsPair seatPair = new SeatsPair();

            try
            {
                foreach (AXSFoundCriteria criteria in this.Ticket.TicketFoundCriterions)
                {
                    try
                    {
                        List<SeatsPair> pairsToConsider = pair.Where(p => p.sectionLabel.Equals(criteria.Section)).ToList();
                        if (pairsToConsider != null)
                        {
                            Random rnd = new Random();
                            int index = 0;
                            index = rnd.Next(0, pairsToConsider.Count);

                            seatPair = pairsToConsider[index];

                            foreach (AXSTixPriceLevels priceLevel in this.TmEvent.TixPriceLevels)
                            {
                                try
                                {
                                    AXSTixSection temp = priceLevel.Sections.FirstOrDefault(s => s.Label.Equals(seatPair.sectionLabel));
                                    if (temp != null)
                                    {
                                        selectedPriceLevelTix = priceLevel;

                                        index = rnd.Next(0, priceLevel.Prices.Count);

                                        selectedPrices = priceLevel.Prices[index];

                                        break;
                                    }
                                }
                                catch { }
                            }
                        }
                    }
                    catch { }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return seatPair;

        }

        protected SeatsPair getSeatsFromSpecificPriceRange(List<SeatsPair> pair)
        {
            SeatsPair seatPair = new SeatsPair();

            try
            {
                if (this.Ticket.TicketFoundCriterions == null || this.Ticket.TicketFoundCriterions.Count > 0)
                {
                    foreach (AXSFoundCriteria item in this.Ticket.TicketFoundCriterions)
                    {
                        try
                        {
                            List<AXSTixSection> sectionsToConsider = selectedPriceLevelTix.Sections.Where(s => s.Label.Equals(item.Section)).ToList();
                            if (sectionsToConsider != null)
                            {
                                foreach (AXSTixSection sec in sectionsToConsider)
                                {
                                    try
                                    {
                                        List<SeatsPair> pairsToConsider = pair.Where(p => p.sectionLabel.Equals(sec.Label) && p.PriceLevelID.Equals(selectedPriceLevelTix.PriceLevelID)).ToList();
                                        if (pairsToConsider != null)
                                        {
                                            Random rnd = new Random();
                                            int index = 0;
                                            index = rnd.Next(0, pairsToConsider.Count);

                                            seatPair = pairsToConsider[index];
                                            return seatPair;
                                        }
                                    }
                                    catch { }
                                }
                            }
                        }
                        catch { }
                    }
                }
                else
                {
                    foreach (AXSTixSection sec in selectedPriceLevelTix.Sections)
                    {
                        try
                        {
                            List<SeatsPair> pairsToConsider = pair.Where(p => p.sectionLabel.Equals(sec.Label) && p.PriceLevelID.Equals(selectedPriceLevelTix.PriceLevelID)).ToList();
                            if (pairsToConsider != null && pairsToConsider.Count > 0)
                            {
                                Random rnd = new Random();
                                int index = 0;
                                index = rnd.Next(0, pairsToConsider.Count);

                                seatPair = pairsToConsider[index];
                                break;
                            }
                        }
                        catch { }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return seatPair;
        }

        public Boolean mapJSONParameterIfAvaiable(ITicketParameter parameter)
        {
            string jsonStr = string.Empty;

            Boolean ifTicketTypeStringMatch = false;
            Boolean result = false;

            //if (this.Ticket.URL.Contains("/#/"))
            {
                try
                {
                    jsonStr = AXSEvent.get(this, this.XmlUrl + "showshop.getOnsaleInfo/" + this.wRoom + "/en?resp=json");
                }
                catch
                {
                    result = false;
                    return result;
                }
            }

            #region json parsing
            try
            {
                string parentIssCode = string.Empty;

                if (this._tmEvent != null && parameter != null)
                {
                    jsonStr = AXSEvent.get(this, this.XmlUrl + "showshop.availWSS/" + this.wRoom + "?resp=json");

                    try
                    {
                        {
                            if (_CurrentParameter.Quantity > 1)
                            {
                                #region split pop up

                                JObject nodeSplitChecking = JObject.Parse(jsonStr);

                                JProperty pSplit = nodeSplitChecking.Property("result");
                                string js = pSplit.Value.ToString();
                                JToken token = JToken.Parse(js);
                                //token = token.SelectToken("eventavail");
                                JArray jEventAvail = null;

                                List<string> lstSplitCheck = new List<string>();
                                if (token != null)
                                {
                                    if (!string.IsNullOrEmpty(this.TmEvent.SectionCode))
                                    {
                                        if (((JToken)token["eventavail"][this.TmEvent.SectionCode]) != null)
                                        {
                                            jEventAvail = ((JArray)token["eventavail"][this.TmEvent.SectionCode]);
                                        }
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(this._CurrentParameter.DateTimeString))
                                        {
                                            jEventAvail = ((JArray)token["eventavail"]["  "]);
                                        }
                                    }
                                }

                                if (jEventAvail != null)
                                {
                                    foreach (JToken je in jEventAvail)
                                    {
                                        for (int o = 0; o < je.Count(); o++)
                                        {
                                            lstSplitCheck.Add(je[o].ToString());
                                        }
                                    }

                                    for (int i = 1; i < lstSplitCheck.Count; i += 2)
                                    {
                                        if (lstSplitCheck[i].Equals("1") || lstSplitCheck[i].Equals("0"))
                                        {
                                            isSplitPopUp = true;
                                        }
                                        else
                                        {
                                            isSplitPopUp = false;
                                            break;
                                        }
                                    }
                                }
                                #endregion
                            }
                        }
                    }
                    catch
                    {

                    }

                    if (isSplitPopUp)
                    {
                        this.MoreInfo = TicketSearchStatus.MoreInfoQuantityNotMatch + "Searching quantity:" + this._CurrentParameter.Quantity;
                        return false;
                    }

                    JObject obj = JObject.Parse(jsonStr);

                    JProperty pObj = obj.Property("result");
                    string jss = pObj.Value.ToString();
                    JToken token_ss = JToken.Parse(jss);
                    //token_ss = token_ss.SelectToken("eventavail_ss");

                    List<string> priceLevelsList = new List<string>();
                    List<string> filteredpriceLevelsList = new List<string>();
                    List<string> filteredSections = new List<string>();


                    JArray jEventAvail_ss = null;
                    try
                    {

                        if (!string.IsNullOrEmpty(this.TmEvent.SectionCode))
                        {
                            if (((JToken)token_ss["eventavail_ss"][this.TmEvent.SectionCode]) != null)
                            {
                                jEventAvail_ss = ((JArray)token_ss["eventavail_ss"][this.TmEvent.SectionCode]);
                            }
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(this._CurrentParameter.DateTimeString))
                            {
                                jEventAvail_ss = ((JArray)token_ss["eventavail"]["  "]);
                            }
                        }

                        if (jEventAvail_ss != null)
                        {
                            foreach (JToken je in jEventAvail_ss)
                            {
                                for (int o = 0; o < je.Count(); o++)
                                {
                                    if (o == 0)
                                    {
                                        filteredSections.Add(je[o].ToString());
                                    }
                                    else
                                    {
                                        priceLevelsList.Add(je[o].ToString());
                                    }
                                }
                            }

                            int count = priceLevelsList.Count();
                            for (int k = 0; k < count; k += 2)
                            {
                                filteredpriceLevelsList.Add(priceLevelsList[k]);
                            }
                        }

                        changeStatus(TicketSearchStatus.HoldingTicket);
                    }
                    catch
                    {
                    }

                    jsonStr = AXSEvent.get(this, this.XmlUrl + "showshop.getOnsaleInfo/" + this.wRoom + "/en?resp=json");

                    JObject j = JObject.Parse(jsonStr);

                    JArray MoreInfo3 = (JArray)j["result"];

                    string code = string.Empty;
                    foreach (JObject t in MoreInfo3)
                    {
                        if ((t["eventCode"] != null) && (t["layoutCode"] != null))
                        {
                            if (((JValue)t["eventCode"]).Value.ToString().Equals(this.TmEvent.SectionCode))
                            {
                                code = ((JValue)t["layoutCode"]).Value.ToString();
                                break;
                            }
                            else
                            {
                                code = ((JValue)t["layoutCode"]).Value.ToString();
                            }
                        }
                    }

                    JObject MoreInfo = ((JObject)j["result"][0]);
                    JObject MoreInfo2 = ((JObject)MoreInfo["layoutInfo"]);

                    List<string> crossSectionsList = new List<string>();
                    List<string> plevelList = new List<string>();

                    if (((JObject)MoreInfo["layoutInfo"][code]) != null)
                    {
                        JObject subsections = ((JObject)MoreInfo["layoutInfo"][code]["subsections"]);
                        JArray palette = ((JArray)MoreInfo["layoutInfo"][code]["palette"]["plevel"]);

                        foreach (var jj in subsections)
                        {
                            crossSectionsList.Add(jj.Key);
                        }

                        foreach (JToken jj in palette)
                        {
                            plevelList.Add(jj[2].ToString());
                        }
                    }

                    List<AXSPriceLevel> PriceLevelObjectList = new List<AXSPriceLevel>();

                    /********************* New Addition *******************************/

                    for (int i = 0; i < filteredpriceLevelsList.Count(); i++)
                    {
                        PriceLevelObjectList.Add(new AXSPriceLevel(filteredSections[i], filteredpriceLevelsList[i], 0));
                    }
                    filteredSections = filteredSections.Intersect(crossSectionsList).ToList();

                    // to remove price levels in which seats are not available 

                    for (int l = this.TmEvent.PriceLevels.Count - 1; l >= 0; l--)
                    {
                        List<AXSPriceLevel> temp = new List<AXSPriceLevel>();
                        if (PriceLevelObjectList.Count > 0)
                        {
                            temp = PriceLevelObjectList.Where(p => p.PriceSectionNumber == this.TmEvent.PriceLevels[l].PriceSectionNumber).ToList();
                            if ((temp == null) || temp.Count == 0)
                            {
                                this.TmEvent.PriceLevels.Remove(this.TmEvent.PriceLevels[l]);
                            }
                        }
                    }

                    #region post
                    // If the Ticket Types exists in the first page then proceed further otherwise show message and keep searching.
                    if (this._tmEvent.HasSections)
                    {
                        // If user provides the Search String or Ticket Type String. Then Select price type according to parameter.

                        foreach (AXSSection item in this._tmEvent.Sections)
                        {
                            if (!String.IsNullOrEmpty(parameter.DateTimeString))
                            {
                                CultureInfo provider = new CultureInfo("en-US");

                                DateTime dt = Convert.ToDateTime(item.EventDates.ToString(), provider);

                                if (parameter.DateTimeString != "mm/dd/yyyy")
                                {
                                    DateTime dt1 = DateTime.ParseExact(parameter.DateTimeString.ToString(), "MM/dd/yyyy", provider);
                                    parameter.DateTimeString = dt1.ToString("MM/dd/yyyy");
                                }
                                else
                                {
                                    parameter.DateTimeString = "";
                                }
                                String EventDates = dt.ToString("MM/dd/yyyy");

                                // Check if user mark checed on Exact Match or not and find for the provided Search String or Ticket Type String.
                                if (parameter.ExactMatch ? EventDates.ToLower() == parameter.DateTimeString.ToLower() : EventDates.ToLower().Contains(parameter.DateTimeString.ToLower()))
                                {
                                    if (!String.IsNullOrEmpty(this._CurrentParameter.EventTime) && this._CurrentParameter.EventTime != "hh:mm")
                                    {
                                        DateTime time = Convert.ToDateTime(item.EventDates.Trim());
                                        if (parameter.ExactMatch ? time.ToShortTimeString().ToLower() == parameter.EventTime.ToLower() : time.ToShortTimeString().ToLower().Contains(parameter.EventTime.ToLower()))
                                        {
                                            this.code = item.EventCode;
                                            this.MoreInfo += " " + EventDates;
                                            if (!String.IsNullOrEmpty(parameter.PriceLevelString))
                                            {
                                                // Select priceLevel from the matching DateTime Search String or Ticket Type String.
                                                foreach (AXSPriceLevel priceLevel in item.PriceLevels)
                                                {
                                                    if (parameter.ExactMatch ? priceLevel.PriceSecName.ToLower() == parameter.PriceLevelString.ToLower() : priceLevel.PriceSecName.ToLower().Contains(parameter.PriceLevelString.ToLower()))
                                                    {
                                                        // Find and get price level and map it to the post request.
                                                        if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                        {
                                                            selectedPriceLevel = getPriceLevel(parameter, item.PriceLevels);

                                                            if (selectedPriceLevel == null || (!selectedPriceLevel.PriceSecName.Equals(priceLevel.PriceSecName)))
                                                            {
                                                                selectedPriceLevel = null;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            selectedPriceLevel = priceLevel;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                selectedPriceLevel = getPriceLevel(parameter, item.PriceLevels);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        this.code = item.EventCode;
                                        this.MoreInfo += " " + EventDates;
                                        if (!String.IsNullOrEmpty(parameter.PriceLevelString))
                                        {
                                            // Select priceLevel from the matching DateTime Search String or Ticket Type String.
                                            foreach (AXSPriceLevel priceLevel in item.PriceLevels)
                                            {
                                                if (parameter.ExactMatch ? priceLevel.PriceSecName.ToLower() == parameter.PriceLevelString.ToLower() : priceLevel.PriceSecName.ToLower().Contains(parameter.PriceLevelString.ToLower()))
                                                {
                                                    // Find and get price level and map it to the post request.
                                                    if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                                    {
                                                        selectedPriceLevel = getPriceLevel(parameter, item.PriceLevels);

                                                        if (selectedPriceLevel == null || (!selectedPriceLevel.PriceSecName.Equals(priceLevel.PriceSecName)))
                                                        {
                                                            selectedPriceLevel = null;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        selectedPriceLevel = priceLevel;
                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            selectedPriceLevel = getPriceLevel(parameter, item.PriceLevels);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                this.code = item.EventCode;
                                if (!String.IsNullOrEmpty(parameter.PriceLevelString))
                                {
                                    // Select priceLevel from the matching DateTime Search String or Ticket Type String.
                                    foreach (AXSPriceLevel priceLevel in item.PriceLevels)
                                    {
                                        if (parameter.ExactMatch ? priceLevel.PriceSecName.ToLower() == parameter.PriceLevelString.ToLower() : priceLevel.PriceSecName.ToLower().Contains(parameter.PriceLevelString.ToLower()))
                                        {
                                            // Find and get price level and map it to the post request.
                                            if (this._CurrentParameter.PriceMin != null && this._CurrentParameter.PriceMax != null)
                                            {
                                                selectedPriceLevel = getPriceLevel(parameter, item.PriceLevels);

                                                if (selectedPriceLevel == null || (!selectedPriceLevel.PriceSecName.Equals(priceLevel.PriceSecName)))
                                                {
                                                    selectedPriceLevel = null;
                                                }
                                            }
                                            else
                                            {
                                                selectedPriceLevel = priceLevel;
                                            }
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    selectedPriceLevel = getPriceLevel(parameter, item.PriceLevels);
                                }
                                break;
                            }
                        }

                        // to get session key 

                        if (String.IsNullOrEmpty(this.SessionKey))
                        {
                            if (parentIssCode != string.Empty)
                            {
                                this.SessionKey = createSessionKeyJSON(parentIssCode, this);
                            }
                            else
                            {
                                this.SessionKey = createSessionKeyJSON(this.wRoom, this).Trim();
                            }
                        }
                        ifTicketTypeStringMatch = true;

                        // Removed from here
                        if (this.TmEvent != null)
                        {
                            if (selectedPriceLevel == null && this.TmEvent.PriceLevels.Count > 0)
                            {
                                this.MoreInfo = "Price level did not match";
                                return false;
                            }
                        }

                        /******************************************************/
                        //change the price level number accordingly.
                        //1 = Floor standing , 2 = GA etc.
                        /******************************************************/
                        // int numselect = Convert.ToInt32(selectedPriceLevel.PriceSectionNumber) - 1;
                        if ((String.IsNullOrEmpty(this._CurrentParameter.PriceLevelString) || this._CurrentParameter.PriceLevelString.ToLower().Contains("best")) && selectedPriceLevel == null)
                        {
                            PriceLevelObjectList = PriceLevelObjectList.Where(p => p.PriceSectionNumber == "0").ToList();
                        }
                        else
                        {
                            List<AXSPriceLevel> temp = PriceLevelObjectList;
                            PriceLevelObjectList = PriceLevelObjectList.Where(p => p.PriceSectionNumber == selectedPriceLevel.PriceSectionNumber).ToList();
                            if (PriceLevelObjectList.Count == 0 && this.wRoom == "b8ce6c20-9be3-4ebc-8932-35728fe10756")
                            {
                                AXSPriceLevel price = this.TmEvent.PriceLevels.Where(p => p.PriceSectionNumber.Equals(selectedPriceLevel.PriceSectionNumber)).FirstOrDefault();
                                price.ifChecked = true;
                                selectedPriceLevel = this.getPriceLevel(this._CurrentParameter, this.TmEvent.PriceLevels);
                                PriceLevelObjectList = temp.Where(p => p.PriceSectionNumber == selectedPriceLevel.PriceSectionNumber).ToList();
                            }
                            //  PriceLevelObjectList = PriceLevelObjectList.Where(p => p.PriceSectionNumber == numselect.ToString()).ToList(); // new change
                        }

                        // if pricelevelobjectlist is empty

                        try
                        {
                            if (PriceLevelObjectList != null)
                            {
                                if (PriceLevelObjectList.Count == 0)
                                {
                                    int icount = 0;
                                    foreach (String item in plevelList)
                                    {
                                        if (selectedPriceLevel != null)
                                        {
                                            if (item.Equals(selectedPriceLevel.PriceSectionNumber))
                                            {
                                                PriceLevelObjectList.Add(new AXSPriceLevel(crossSectionsList[icount], item, 0));
                                            }
                                        }
                                        icount++;
                                    }
                                }
                            }
                        }
                        catch
                        {
                        }

                        String _priceLevelObjectList = "";

                        foreach (AXSPriceLevel tmp in PriceLevelObjectList)
                        {
                            _priceLevelObjectList += "\"" + tmp.PriceSecName + "\"" + ",";
                        }
                        _priceLevelObjectList = _priceLevelObjectList.TrimEnd(',');

                        string postdata = string.Empty;

                        //if (((String.IsNullOrEmpty(this._CurrentParameter.PriceLevelString) || this._CurrentParameter.PriceLevelString.ToLower().Contains("best")) && PriceLevelObjectList.Count == 0) || PriceLevelObjectList.Count != 0)
                        {
                            postdata = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.searchSeats2\",\"params\":[\"" + this.SessionKey + "\",\"" + this.code + "\"," + this._CurrentParameter.Quantity.ToString() + ",[" + selectedPriceLevel.PriceSectionNumber + "],[],[],[" + _priceLevelObjectList + "],false,\"" + this.SessionKey + "\",false,\"#price-level--best:1354:293:1\"],\"id\":1}";

                            changeStatus("Processing Found Page");
                            Random rnd = new Random();
                            Thread.Sleep(rnd.Next(2000, 5000));

                            try
                            {
                                doc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/"), postdata));

                                if (this.IfWorking && this.Ticket.isRunning)
                                {
                                    if (doc.DocumentNode.InnerText.Contains("popup_Obstructed View") || doc.DocumentNode.InnerText.Contains("OBSTRUCTED VIEW"))
                                    {
                                        this.MoreInfo += " OBSTRUCTED VIEW";
                                    }
                                    else if (doc.DocumentNode.InnerText.Contains("faultCode") || doc.DocumentNode.InnerText.Contains("faultString"))
                                    {
                                        this.SessionKey = String.Empty;
                                        result = false;
                                    }
                                    else if (String.IsNullOrEmpty(doc.DocumentNode.InnerText.Trim()))
                                    {
                                        doc.LoadHtml(post(this, this.XmlUrl.Replace("/info/", "/bfox/"), postdata));

                                        if (String.IsNullOrEmpty(doc.DocumentNode.InnerText.Trim()))
                                        {
                                            this.MoreInfo = "";
                                            this.SessionKey = String.Empty;
                                            this.MoreInfo = "Ticket not found.";
                                            result = false;
                                        }
                                        else
                                        {
                                            result = true;
                                        }
                                    }
                                    else
                                    {
                                        result = true;
                                    }
                                    if (result)
                                    {
                                        //if (QuantityForAutoBuyPost == null)
                                        {
                                            QuantityForAutoBuyPost = new List<string>();
                                        }
                                        pUnits = new List<Core.pUnits>();
                                        ParentItemNum = new List<string>();
                                        ItemNum = new List<string>();
                                        PurchaseUnit = new List<string>();
                                        MaxQuantity = new List<string>();
                                        PmCodes = new List<string>();
                                        UnitPrice = new List<string>();

                                        j = JObject.Parse(doc.DocumentNode.InnerHtml);

                                        try
                                        {
                                            JObject _result = (JObject)j["result"];

                                            if (_result != null)
                                            {
                                                JArray order = (JArray)_result["Order"]["pUnits"];

                                                foreach (var _item in order)
                                                {
                                                    String purcahseUnit = String.Empty;

                                                    if (_item["purchaseUnit"] != null)
                                                    {

                                                        if (((JValue)_item["purchaseUnit"]).Value == null)
                                                        {
                                                            PurchaseUnit.Add(String.Empty);
                                                            purcahseUnit = String.Empty;
                                                        }
                                                        else
                                                        {
                                                            PurchaseUnit.Add(((JValue)_item["purchaseUnit"]).Value.ToString());
                                                            purcahseUnit = ((JValue)_item["purchaseUnit"]).Value.ToString();
                                                        }

                                                        QuantityForAutoBuyPost = new List<string>();
                                                        ItemNum = new List<string>();

                                                        foreach (var item in _item["items"])
                                                        {
                                                            JObject _obj = (JObject)item;

                                                            if (String.IsNullOrEmpty(_obj["quantity"].ToString()))
                                                            {
                                                                QuantityForAutoBuyPost.Add("0");
                                                            }
                                                            else
                                                            {
                                                                QuantityForAutoBuyPost.Add(_obj["quantity"].ToString());
                                                            }

                                                            if (_obj["unitPrice"] != null)
                                                            {
                                                                JArray _unitPrice = (JArray)_obj["unitPrice"];
                                                                UnitPrice.Add(_unitPrice[0].ToString());
                                                            }

                                                            if (((JValue)_obj["parentItemNum"]).Value == null)
                                                            {
                                                                ParentItemNum.Add(String.Empty);
                                                            }
                                                            else
                                                            {
                                                                ParentItemNum.Add(((JValue)_obj["parentItemNum"]).Value.ToString());
                                                            }

                                                            if (((JValue)_obj["itemNum"]).Value == null)
                                                            {
                                                                ItemNum.Add(String.Empty);
                                                            }
                                                            else
                                                            {
                                                                ItemNum.Add(((JValue)_obj["itemNum"]).Value.ToString());
                                                            }

                                                            if (((JValue)_obj["maxQuantity"]).Value == null)
                                                            {
                                                                MaxQuantity.Add(String.Empty);
                                                            }
                                                            else
                                                            {
                                                                MaxQuantity.Add(((JValue)_obj["maxQuantity"]).Value.ToString());
                                                            }
                                                        }
                                                        this.pUnits.Add(new pUnits() { itemNums = ItemNum, quantity = QuantityForAutoBuyPost, purchaseUnit = purcahseUnit });
                                                        // break;
                                                    }
                                                }

                                                order = (JArray)j["result"]["paymentMethods"];

                                                foreach (JObject item in order)
                                                {
                                                    PmCodes.Add(item["pmCode"].ToString());
                                                }
                                                result = true;
                                            }
                                            else
                                            {
                                                result = false;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            result = false;
                                            this.SessionKey = String.Empty;
                                            JValue _result = (JValue)j["result"];

                                            if (((JValue)_result).Value == null)
                                            {
                                                this.MoreInfo = "Ticket not found.";
                                            }
                                        }

                                    }
                                }
                            }
                            catch
                            {
                                result = false;
                            }

                        }

                    }
                    #endregion
                }
            }
            catch
            {

            }
            #endregion

            return result;
        }

        public Boolean mapParameterIfAvaiableMobile(ITicketParameter parameter)
        {
            Boolean result = false;
            string jsonStr = string.Empty;

            if (this._tmEvent != null && parameter != null && this._session != null && this._session.FormElements != null)
            {
                try
                {
                    #region old
                    // If the Ticket Types exists in the first page then proceed further otherwise show message and keep searching.
                    if (this._tmEvent.HasTicketTypes)
                    {
                        this._session.FormElements.Remove("eventTypeCode");
                        this._session.FormElements.Remove("action");

                        if (_CurrentParameter.AcceptSplit)
                        {
                            this._session.FormElements["acceptSplit"] = "1";
                        }
                        else
                        {
                            this._session.FormElements["acceptSplit"] = "0";
                        }

                        if (!string.IsNullOrEmpty(parameter.PriceLevelString))
                        {
                            if (this._tmEvent.TicketTypes.Count >= 1)
                            {
                                // Select quantity from the first Search String or Ticket Type String.
                                if (parameter.Quantity >= (this._tmEvent.TicketTypes[0].MinQuantity + 1) && parameter.Quantity <= this._tmEvent.TicketTypes[0].MaxQuantity)
                                {
                                    if (parameter.Quantity % this._tmEvent.TicketTypes[0].QuantityStep == 0)
                                    {
                                        this._session.FormElements["qty"] = parameter.Quantity.ToString();
                                    }
                                    else// Show more info that quantity does not match.
                                    {
                                        this.MoreInfo = TicketSearchStatus.MoreInfoQuantityNotMatch + " " + parameter.Quantity + " is not valid quantity for this parameter.";
                                        return false;
                                    }
                                }
                                else// Show more info that quantity does not match.
                                {
                                    this.MoreInfo = TicketSearchStatus.MoreInfoQuantityNotMatch + " Allowed quantity is " + (this._tmEvent.TicketTypes[0].MinQuantity + 1) + " to " + this._tmEvent.TicketTypes[0].MaxQuantity;
                                    return false;
                                }

                                selectedPriceLevel = getPriceLevelForMobile(parameter, this._tmEvent.TicketTypes[0].PriceLevels);
                                //(TMPriceLevel)this._tmEvent.TicketTypes[0].PriceLevels.Where(pstring => pstring.PriceLevelName == parameter.PriceLevelString);
                                if (selectedPriceLevel != null)
                                {
                                    if (!selectedPriceLevel.PriceSectionNumber.ToLower().Contains("sold out"))
                                    {
                                        // If price level is null then it means that price level does not match according to the parameter.
                                        if (selectedPriceLevel != null)
                                        {
                                            this._session.FormElements["plevel"] = selectedPriceLevel.PriceSecName;
                                        }

                                        else // Show more info that price level does not match.
                                        {
                                            //this.MoreInfo = TicketSearchStatus.MoreInfoPriceLevelStringNotMatch;
                                            return false;
                                        }
                                    }
                                    else
                                    {
                                        this.MoreInfo = "Ticket is Sold out for " + _CurrentParameter.PriceLevelString;
                                        return false;
                                    }
                                }
                                else
                                {
                                    return false;
                                }
                            }
                        }
                        else // If user does not provide the Search String or Ticket Type String. Then Select first price type automatically.
                        {
                            if (this._tmEvent.TicketTypes.Count >= 1)
                            {
                                // Select quantity from the first Search String or Ticket Type String.
                                if (parameter.Quantity >= (this._tmEvent.TicketTypes[0].MinQuantity + 1) && parameter.Quantity <= this._tmEvent.TicketTypes[0].MaxQuantity)
                                {
                                    if (parameter.Quantity % this._tmEvent.TicketTypes[0].QuantityStep == 0)
                                    {
                                        this._session.FormElements["qty"] = parameter.Quantity.ToString();
                                    }
                                    else// Show more info that quantity does not match.
                                    {
                                        this.MoreInfo = TicketSearchStatus.MoreInfoQuantityNotMatch + " " + parameter.Quantity + " is not valid quantity for this parameter.";
                                        return false;
                                    }
                                }
                                else// Show more info that quantity does not match.
                                {
                                    this.MoreInfo = TicketSearchStatus.MoreInfoQuantityNotMatch + " Allowed quantity is " + (this._tmEvent.TicketTypes[0].MinQuantity + 1) + " to " + this._tmEvent.TicketTypes[0].MaxQuantity;
                                    return false;
                                }

                                // Find and get price level and map it to the post request.
                                selectedPriceLevel = getPriceLevelForMobile(parameter, this._tmEvent.TicketTypes[0].PriceLevels);
                                if (!selectedPriceLevel.PriceSectionNumber.Contains("Sold Out"))
                                {
                                    // If price level is null then it means that price level does not match according to the parameter.
                                    if (selectedPriceLevel != null)
                                    {
                                        this._session.FormElements["plevel"] = selectedPriceLevel.PriceSecName;
                                    }
                                    else // Show more info that price level does not match.
                                    {
                                        this.MoreInfo = TicketSearchStatus.MoreInfoPriceLevelNotMatch;
                                        return false;
                                    }
                                }
                                else
                                {
                                    this.MoreInfo = "Ticket is Sold out for " + _CurrentParameter.PriceLevelString;
                                    return false;
                                }
                            }
                        }
                    }
                    else // If Price levels does not exist in the event first page then show message.
                    {
                        this.MoreInfo = TicketSearchStatus.MoreInfoEventNotAvaiable;
                        return false;
                    }

                    //Mark parameter is available.
                    parameter.IfAvailable = true;

                    // If all parameters get fulfil then make result = true.
                    result = true;
                    #endregion
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                }
            }
            else if (parameter != null && this._session != null && this._session.FormElements != null)
            {
                try
                {
                    #region old
                    try
                    {
                        if (parameter.DateTimeString != "mm/dd/yyyy" && parameter.EventTime != "hh:mm")
                        {
                            bool ifDateAndTime = false;
                            List<MultiEvent> timeList = this.MultiEvents.Where(time => time.EventDate == parameter.DateTimeString).ToList();
                            if (timeList.Count > 0)
                            {
                                if (!timeList[0].isSoldOut)
                                {
                                    foreach (MultiEvent item in timeList)
                                    {
                                        if (!ifDateAndTime)
                                        {
                                            if (item.EventTime == parameter.EventTime)
                                            {
                                                this._session.FormElements["eventTypeCode"] = item.EventTypeCode;
                                                this._session.FormElements["eventCode"] = item.EventCode;
                                                ifDateAndTime = true;
                                                result = true;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    this.MoreInfo = "Ticket is sold out for " + timeList[0].EventDate;
                                    return false;
                                }
                            }
                            else
                            {
                                this.MoreInfo = "\"Date time String " + parameter.DateTimeString + "\" " + "not match.";
                                return false;
                            }

                            if (!ifDateAndTime)
                            {
                                this.MoreInfo = "\"Event Time " + parameter.EventTime + "\" " + "not match.";
                                return false;
                            }

                        }
                        else if (parameter.DateTimeString != "mm/dd/yyyy" && !String.IsNullOrEmpty(parameter.DateTimeString))
                        {
                            Boolean ifTicketDateTimeString = false;
                            for (int i = 0; i < this.MultiEvents.Count; i++)
                            {
                                if (!ifTicketDateTimeString)
                                {
                                    if (this.MultiEvents[i].EventDate == parameter.DateTimeString)
                                    {
                                        if (!MultiEvents[i].isSoldOut)
                                        {
                                            this._session.FormElements["eventTypeCode"] = this.MultiEvents[i].EventTypeCode;
                                            this._session.FormElements["eventCode"] = this.MultiEvents[i].EventCode;
                                            ifTicketDateTimeString = true;
                                            result = true;
                                        }
                                        else
                                        {
                                            this.MoreInfo = "Ticket is sold out for" + "  " + MultiEvents[0].EventDate;
                                            return false;
                                        }
                                    }
                                }
                            }

                            // If Search String or Price Type String does not match then show message.
                            if (!ifTicketDateTimeString)
                            {
                                this.MoreInfo = "\"Date time String " + parameter.DateTimeString + "\" " + "not match.";
                                return false;
                            }
                        }
                        else if (parameter.EventTime != "hh:mm" && !String.IsNullOrEmpty(parameter.EventTime))
                        {
                            Boolean ifTicketEventTimeString = false;
                            for (int i = 0; i < this.Sections.Count; i++)
                            {
                                if (!ifTicketEventTimeString)
                                {
                                    if (this.MultiEvents[i].EventTime == parameter.EventTime)
                                    {
                                        this._session.FormElements["eventTypeCode"] = this.MultiEvents[i].EventTypeCode;
                                        this._session.FormElements["eventCode"] = this.MultiEvents[i].EventCode;
                                        ifTicketEventTimeString = true;
                                        result = true;
                                    }
                                }
                            }

                            // If Search String or Price Type String does not match then show message.
                            if (!ifTicketEventTimeString)
                            {
                                this.MoreInfo = "\"Event Time " + parameter.EventTime + "\" " + "not match.";
                                return false;
                            }
                        }
                        else
                        {
                            this._session.FormElements["eventTypeCode"] = MultiEvents[0].EventTypeCode;
                            this._session.FormElements["eventCode"] = MultiEvents[0].EventCode;
                            result = true;
                        }
                    }
                    catch
                    {
                    }
                    #endregion old
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                }
            }

            return result;
        }

        protected AXSPriceLevel getPriceLevelForMobile(ITicketParameter parameter, List<AXSPriceLevel> PriceLevels)
        {
            AXSPriceLevel selectPriceLevel = null;

            try
            {
                //If user provides the price range then find the right price level and return the price level.
                if (parameter.PriceMin != null && parameter.PriceMax != null && PriceLevels != null && parameter.PriceLevelString != null)
                {
                    bool priceFlag = false;

                    if (parameter.ExactMatch)
                    {
                        foreach (AXSPriceLevel priceLevel in PriceLevels)
                        {
                            if (priceLevel.PriceSectionNumber.ToLower() == parameter.PriceLevelString.ToLower())
                            {
                                selectPriceLevel = priceLevel;
                                priceFlag = true;
                                break;
                            }
                            else
                                priceFlag = false;
                        }
                    }
                    else
                    {
                        foreach (AXSPriceLevel priceLevel in PriceLevels)
                        {
                            if (priceLevel.PriceSecName.ToLower().Contains(parameter.PriceLevelString.ToLower()))
                            {
                                selectPriceLevel = priceLevel;
                                priceFlag = true;
                                break;
                            }
                            else
                                priceFlag = false;
                        }

                    }

                    if (selectPriceLevel != null)
                    {
                        SortedList<decimal, AXSPriceLevel> sortedPriceLevels = new SortedList<decimal, AXSPriceLevel>();
                        foreach (AXSPriceLevel priceLevel in PriceLevels)
                        {
                            if (!sortedPriceLevels.ContainsKey(priceLevel.TotalPrice))
                            {
                                sortedPriceLevels.Add(priceLevel.TotalPrice, priceLevel);
                            }
                        }

                        // If user wants to find the right price level from max total price to min total price.
                        if (parameter.MaxToMin)
                        {
                            IOrderedEnumerable<KeyValuePair<decimal, AXSPriceLevel>> sortedPriceLevelsDesc = sortedPriceLevels.OrderByDescending(p => p.Key);
                            foreach (KeyValuePair<decimal, AXSPriceLevel> priceLevel in sortedPriceLevelsDesc)
                            {
                                if (priceLevel.Key >= parameter.PriceMin && priceLevel.Key <= parameter.PriceMax)
                                {
                                    if (selectPriceLevel.PriceSectionNumber.ToLower().Contains("best"))
                                    {
                                        selectPriceLevel = priceLevel.Value;
                                        priceFlag = true;
                                        break;
                                    }
                                    else if (selectPriceLevel.TotalPrice == priceLevel.Key)
                                    {
                                        priceFlag = true;
                                        break;
                                    }
                                    else
                                    {
                                        priceFlag = false;
                                    }
                                }
                            }
                        }
                        else // If user wants to find the right price level from min total price to max total price.
                        {
                            foreach (KeyValuePair<decimal, AXSPriceLevel> priceLevel in sortedPriceLevels)
                            {
                                if (priceLevel.Key >= parameter.PriceMin && priceLevel.Key <= parameter.PriceMax)
                                {
                                    if (selectPriceLevel.PriceSectionNumber.ToLower().Contains("best"))
                                    {
                                        selectPriceLevel = priceLevel.Value;
                                        priceFlag = true;
                                        break;
                                    }
                                    else if (selectPriceLevel.TotalPrice == priceLevel.Key)
                                    {
                                        priceFlag = true;
                                        break;
                                    }
                                    else
                                        priceFlag = false;
                                }
                            }
                        }
                    }
                    else
                        this.MoreInfo = TicketSearchStatus.MoreInfoPriceLevelNotMatch;

                    if (!priceFlag)
                        selectPriceLevel = null;

                }
                else if (parameter.PriceMin != null && parameter.PriceMax != null && PriceLevels != null)
                {
                    SortedList<decimal, AXSPriceLevel> sortedPriceLevels = new SortedList<decimal, AXSPriceLevel>();

                    foreach (AXSPriceLevel priceLevel in PriceLevels)
                    {
                        if (!sortedPriceLevels.ContainsKey(priceLevel.TotalPrice))
                        {
                            sortedPriceLevels.Add(priceLevel.TotalPrice, priceLevel);
                        }
                    }

                    // If user wants to find the right price level from max total price to min total price.
                    if (parameter.MaxToMin)
                    {
                        IOrderedEnumerable<KeyValuePair<decimal, AXSPriceLevel>> sortedPriceLevelsDesc = sortedPriceLevels.OrderByDescending(p => p.Key);
                        foreach (KeyValuePair<decimal, AXSPriceLevel> priceLevel in sortedPriceLevelsDesc)
                        {
                            if (priceLevel.Key >= parameter.PriceMin && priceLevel.Key <= parameter.PriceMax)
                            {
                                selectPriceLevel = priceLevel.Value;
                                break;
                            }
                        }
                    }
                    else // If user wants to find the right price level from min total price to max total price.
                    {
                        foreach (KeyValuePair<decimal, AXSPriceLevel> priceLevel in sortedPriceLevels)
                        {
                            if (priceLevel.Key >= parameter.PriceMin && priceLevel.Key <= parameter.PriceMax)
                            {
                                selectPriceLevel = priceLevel.Value;
                                break;

                            }
                        }
                    }

                    if (selectPriceLevel == null)
                        this.MoreInfo = TicketSearchStatus.MoreInfoPriceLevelNotMatch;
                }
                else if (PriceLevels != null && parameter.PriceLevelString != null)
                {
                    if (parameter.ExactMatch)
                    {
                        foreach (AXSPriceLevel priceLevel in PriceLevels)
                        {
                            if (priceLevel.PriceSectionNumber.ToLower() == parameter.PriceLevelString.ToLower())
                            {
                                selectPriceLevel = priceLevel;
                                break;
                            }
                        }
                    }
                    else
                    {
                        foreach (AXSPriceLevel priceLevel in PriceLevels)
                        {
                            //if (priceLevel.PriceLevelName.Contains("Sold Out"))
                            if (priceLevel.PriceSectionNumber.ToLower().Contains(parameter.PriceLevelString.ToLower()))
                            {
                                if (priceLevel.PriceSectionNumber.ToLower().Contains(parameter.PriceLevelString.ToLower()))
                                {
                                    selectPriceLevel = priceLevel;
                                    break;
                                }
                            }
                        }
                    }

                    if (selectPriceLevel == null)
                        this.MoreInfo = TicketSearchStatus.MoreInfoPriceLevelNotMatch;
                }
                else // if user does not provide the price level then male the empty price level and return it.
                {
                    selectPriceLevel = new AXSPriceLevel(String.Empty, String.Empty, 0);
                }
            }
            catch (Exception ex)
            {

                throw;
            }

            return selectPriceLevel;
        }

        void resetAfterStopHandler()
        {
            if (this.Ticket.isRunning && !this.IfWorking)
            {
                this.start();
            }
        }

        public void changeStatus(String status)
        {
            try
            {
                if (!this.IfWorking)
                {
                    this.MoreInfo = "";
                }
                if (this.IfWorking && this.Ticket.isRunning)
                {
                    this.Status = status;
                }
                else if (!this.IfWorking && this.Ticket.isRunning && this.resetAfterStop != null)
                {
                    this.Status = status;
                }

                if (this._ifStopping && !this.IfWorking)
                {
                    this.Status = status;
                }

                if (this.Ticket.Searches.changeDelegate != null)
                {
                    this.Ticket.Searches.changeDelegate(this);
                }

                if (this.Ticket.onChangeForGauge != null)
                {
                    this.Ticket.onChangeForGauge();
                }

                if (this.IfWorking)
                {
                    if (this._proxy != null)
                    {
                        if (_proxy.TheProxyType != Core.Proxy.ProxyType.Relay)
                        {

                            String strProxy = _proxy.ToString() + ", ";
                            if (!this.MoreInfo.StartsWith(strProxy))
                            {
                                Regex.CacheSize = 0;
                                Match m = Regex.Match(this.MoreInfo, @"(\d)(\d)?(\d)?.(\d)(\d)?(\d)?.(\d)(\d)?(\d)?.(\d)(\d)?(\d)?:(\d)(\d)?(\d)?(\d)?(\d)?(\d)?,");
                                if (m.Success)
                                {
                                    this.MoreInfo = Regex.Replace(this.MoreInfo, @"(\d)(\d)?(\d)?.(\d)(\d)?(\d)?.(\d)(\d)?(\d)?.(\d)(\d)?(\d)?:(\d)(\d)?(\d)?(\d)?(\d)?(\d)?,", "");
                                }

                                this.MoreInfo = strProxy + this.MoreInfo;
                            }
                        }
                        else
                        {
                            String strProxy = "R" + ", ";
                            if (!this.MoreInfo.StartsWith(strProxy))
                            {
                                Regex.CacheSize = 0;
                                Match m = Regex.Match(this.MoreInfo, @"(\d)(\d)?(\d)?.(\d)(\d)?(\d)?.(\d)(\d)?(\d)?.(\d)(\d)?(\d)?:(\d)(\d)?(\d)?(\d)?(\d)?(\d)?,");
                                if (m.Success)
                                {
                                    this.MoreInfo = Regex.Replace(this.MoreInfo, @"(\d)(\d)?(\d)?.(\d)(\d)?(\d)?.(\d)(\d)?(\d)?.(\d)(\d)?(\d)?:(\d)(\d)?(\d)?(\d)?(\d)?(\d)?,", "");
                                }

                                this.MoreInfo = strProxy + this.MoreInfo;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        #endregion

        #region Constructor
        public AXSSearch(AXSTicket ticket)
        {
            this.Ticket = ticket;
            this.FlagImage = global::Automatick.Properties.Resources.Flag16Disable;
            this.FlagImage.Tag = false;
            this.isWeb = true;

            if (new Uri(this.Ticket.URL).Host.Contains("o2priority") || new Uri(this.Ticket.URL).Host.Contains("shop.axs.co.uk") || new Uri(this.Ticket.URL).Host.Contains("q.axs.co.uk"))
            {
                context = "axsuk";

                this.Ticket.IsUkEvent = true;
            }
            else
            {
                context = "axsus";
            }

            if (this.Ticket.GlobalSetting.IfUseSpecialRelayProxies)
            {
                context = "special";
            }

            if (!Directory.Exists(PathAutobuyLogs))
            {
                Directory.CreateDirectory(PathAutobuyLogs);
            }
        }
        #endregion

        public String RecapToken = String.Empty;

        public String Hash = String.Empty;
        public String HashTS = String.Empty;
        public String XmlUrl = String.Empty;
        private String tempUrl = String.Empty;
        public string context = String.Empty;
        private String clearSessionURL = "http://trigger.pvms?cmd=clear&session=";

        public void Dispose()
        {
            try
            {
                if (_md5 != null)
                {
                    _md5.Clear();
                    GC.SuppressFinalize(_md5);
                    //_md5 = null;
                }

                GC.SuppressFinalize(this);
                ////GC.Collect();
            }
            catch (Exception)
            {

            }
        }

        public String createSessionKey(string parentIssCode, AXSSearch search)
        {
            try
            {
                if (this.Ticket.URL.Contains("wroom.centrebell.ca"))
                {
                    Guid str = Guid.NewGuid();
                    string lotId = "";
                    if (String.IsNullOrEmpty(this._presaleSearch.LotId) || this._presaleSearch.LotId == "-")
                    {
                        lotId = "noLotId_7";
                    }
                    else
                    {
                        lotId = this._presaleSearch.LotId;
                    }

                    if (String.IsNullOrEmpty(search._CurrentParameter.TicketTypePasssword))
                    {
                        HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                        if (this.Ticket.URL.Contains("eventShopperV3.html") || this.Ticket.URL.Contains("eventShopperV2") || this.Ticket.URL.Contains("eventShopperV3UK"))
                        {
                            string postdata = string.Empty;

                            if (string.IsNullOrEmpty(this.Hash) && string.IsNullOrEmpty(this.HashTS))
                            {
                                if (String.IsNullOrEmpty(this.RecapToken))
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>{5}</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.0.54.15.1</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId, this.Ticket.lang).Replace("&", "&amp;");
                                }
                                else
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>{5}</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.0.54.15.1</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>{4}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId, this.Ticket.lang, this.RecapToken).Replace("&", "&amp;");
                                }
                            }
                            else
                            {
                                if (String.IsNullOrEmpty(this.RecapToken))
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>{5}</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.0.54.15.1</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>{7}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId, this.Ticket.lang, this.Hash, this.HashTS).Replace("&", "&amp;");
                                }
                                else
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>{5}</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.0.54.15.1</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>{7}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId, this.Ticket.lang, this.Hash, this.HashTS).Replace("&", "&amp;");
                                }
                            }

                            doc.LoadHtml(post(search, this.XmlUrl.Replace("/info2/", "/bfox/").Replace("wroom", "tickets") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info2/", "/bfox/").Replace("wroom", "tickets") + "&wrLotID=" + lotId + "&esVer=3.0.54.15.1", postdata));
                            if (doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']") != null)
                            {
                                return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                            }
                            else
                            {
                                return "";
                            }
                        }
                        else
                        {
                            string postdata = string.Empty;

                            if (string.IsNullOrEmpty(this.Hash) && string.IsNullOrEmpty(this.HashTS))
                            {
                                postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>{5}</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.0.54.10</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId, this.Ticket.lang).Replace("&", "&amp;");
                            }
                            else
                            {
                                if (String.IsNullOrEmpty(this.RecapToken))
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>{5}</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.0.54.10</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>{7}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId, this.Ticket.lang, this.Hash, this.HashTS).Replace("&", "&amp;");
                                }
                                else
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>{5}</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.0.54.10</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>{7}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId, this.Ticket.lang, this.Hash, this.HashTS).Replace("&", "&amp;");
                                }
                            }

                            if (this.Ticket.URL.Contains("https"))
                            {
                                doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "&wrLotID=" + lotId + "&esVer=3.0.54.10", postdata));
                            }
                            else
                            {
                                doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "&wrLotID=" + lotId + "&esVer=3.0.54.10", postdata));
                            }
                            if (doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']") != null)
                            {
                                return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                            }
                            else
                            {
                                return "";
                            }
                        }
                    }
                    else
                    {
                        HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                        if (this.Ticket.URL.Contains("eventShopperV2.html"))
                        {
                            doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId + "&esVer=eventShopperV3_V3_1Cd", String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>ES_3_0_54e</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param></params></methodCall>", parentIssCode, this.wRoom, search._CurrentParameter.TicketTypePasssword, lotId, this.Ticket.URL.Replace("&", "&amp;"), str, this.Ticket.lang)));
                            return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                        }
                        else
                        {
                            doc.LoadHtml(post(search, this.XmlUrl + "?methodName=showshop.jumpW&wroom=" + this.wRoom + "&lang=" + this.Ticket.lang + "&pc=" + this._CurrentParameter.TicketTypePasssword + "&ver=ES_3_0_53a1", String.Format("<methodCall><methodName>showshop.jumpW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>{1}</string></value></param><param><value><string>4ddc5ca6a12eec68373af18109d8810a</string></value></param><param><value><string>.promoGO:22:14:1</string></value></param></params></methodCall>", this.wRoom, search._CurrentParameter.TicketTypePasssword)));
                            string temp = doc.DocumentNode.SelectSingleNode("//methodresponse").InnerText.Trim();
                            doc = new HtmlAgilityPack.HtmlDocument();
                            string oldWr = HttpUtility.ParseQueryString((new Uri(search.Ticket.URL)).Query).Get("wr");
                            doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId + "&esVer=	3.4b48", String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>{6}</string></value></param><param><value><string/></value></param><param><value><string>{4}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param></params></methodCall>", temp, this.wRoom, search._CurrentParameter.TicketTypePasssword, lotId, this.Ticket.URL.Replace("&", "&amp;").Replace(oldWr, temp), str, this.Ticket.lang)));
                            return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                        }
                    }
                }
                else
                {
                    Guid str = Guid.NewGuid();
                    string lotId = "";
                    if (String.IsNullOrEmpty(this._presaleSearch.LotId) || this._presaleSearch.LotId == "-")
                    {
                        lotId = "noLotId_7";
                    }
                    else
                    {
                        lotId = this._presaleSearch.LotId;
                    }

                    if (String.IsNullOrEmpty(search._CurrentParameter.TicketTypePasssword))
                    {
                        HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                        if (this.Ticket.URL.Contains("skin=axs_theo2") || venueIsO2)
                        {
                            string postdata = string.Empty;

                            if (string.IsNullOrEmpty(this.Hash) && string.IsNullOrEmpty(this.HashTS))
                            {
                                postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4.0.5</string></value></param><param><value><string>{2}</string></value></param><param><value><string>" + str.ToString().ToUpper() + "</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId).Replace("&", "&amp;");
                            }
                            else
                            {
                                //updated because 3.3.0.1 is changed to 3.4b17.2 for o2 events 
                                if (string.IsNullOrEmpty(this.RecapToken))
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4.0.5</string></value></param><param><value><string>{2}</string></value></param><param><value><string>" + str.ToString().ToUpper() + "</string></value></param><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId, this.Hash, this.HashTS).Replace("&", "&amp;");
                                }
                                else
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4.0.5</string></value></param><param><value><string>{2}</string></value></param><param><value><string>" + str.ToString().ToUpper() + "</string></value></param><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId, this.Hash, this.HashTS).Replace("&", "&amp;");
                                }
                                //postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.3.0.1</string></value></param><param><value><string>{2}</string></value></param><param><value><string>" + str.ToString().ToUpper() + "</string></value></param><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId, this.Hash, this.HashTS).Replace("&", "&amp;");
                            }

                            doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "&wrLotID=" + lotId + "&esVer=3.0.54.18.1", postdata));
                            if (doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']") != null)
                            {
                                return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                            }
                            else
                            {
                                return "";
                            }
                        }
                        else if (this.Ticket.URL.Contains("eventShopperV3.html") || this.Ticket.URL.Contains("eventShopperV2") || this.Ticket.URL.Contains("eventShopperV3UK"))
                        {
                            string postdata = string.Empty;

                            if (string.IsNullOrEmpty(this.Hash) && string.IsNullOrEmpty(this.HashTS))
                            {
                                //postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.3.0.1</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str.ToString().ToUpper(), lotId).Replace("&", "&amp;");
                                postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b17.1</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str.ToString().ToUpper(), lotId).Replace("&", "&amp;");
                            }
                            else
                            {
                                if (String.IsNullOrEmpty(this.RecapToken))
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4.0.5</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str.ToString().ToUpper(), lotId, this.Hash, this.HashTS).Replace("&", "&amp;");
                                }
                                else
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4.0.5</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str.ToString().ToUpper(), lotId, this.Hash, this.HashTS).Replace("&", "&amp;");
                                }
                            }

                            doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "&wrLotID=" + lotId + "&esVer=3.3.0.1", postdata));
                            //doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "&wrLotID=" + lotId + "&esVer=3.4b17.1", postdata));
                            if (doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']") != null)
                            {
                                return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                            }
                            else
                            {
                                return "";
                            }
                        }
                        else if (this.XmlUrl.Contains("las.eventshopper.com"))
                        {
                            string postdata = string.Empty;
                            if (string.IsNullOrEmpty(this.Hash) && string.IsNullOrEmpty(this.HashTS))
                            {
                                postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{1}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{2}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL.Replace("&", "&amp;"));
                            }
                            else
                            {
                                if (String.IsNullOrEmpty(this.RecapToken))
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{1}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL.Replace("&", "&amp;"), str.ToString().ToUpper(), this.Hash, this.HashTS);
                                }
                                else
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{1}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL.Replace("&", "&amp;"), str.ToString().ToUpper(), this.Hash, this.HashTS);
                                }
                            }

                            doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "&wrLotID=" + lotId + "&esVer=3.4b48", postdata));
                            if (doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']") != null)
                            {
                                return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                            }
                            else
                            {
                                return "";
                            }
                        }
                        else if (this.Ticket.URL.Contains("axs_betexperience"))
                        {
                            string postdata = String.Empty;

                            if (String.IsNullOrEmpty(this.RecapToken))
                            {
                                postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{1}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>eventShopperV3_V3_1Cd</string></value></param><param><value><string>{2}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL).Replace("&", "&amp;");
                            }
                            else
                            {
                                postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{2}</string></value></param><param><value><string>{1}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>eventShopperV3_V3_1Cd</string></value></param><param><value><string>{2}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL).Replace("&", "&amp;");
                            }

                            doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId + "&esVer=eventShopperV3_V3_1Cd", postdata));
                            if (doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']") != null)
                            {
                                return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                            }
                            else
                            {
                                return "";
                            }
                        }
                        else if (this.Ticket.URL.Contains("eventShopperV3UKPriority"))
                        {
                            string postdata = string.Empty;

                            if (String.IsNullOrEmpty(this.RecapToken))
                            {
                                postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{1}</string></value></param><param><value><string>{2}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>eventShopperV3_V3_041e</string></value></param><param><value><string>{1}</string></value></param><param><value><string>{0}</string></value></param></params></methodCall>", search.wRoom, this.Ticket.URL.Replace("&", "&amp;"), lotId);
                            }
                            else
                            {
                                postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{1}</string></value></param><param><value><string>{2}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>eventShopperV3_V3_041e</string></value></param><param><value><string>{1}</string></value></param><param><value><string>{0}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", search.wRoom, this.Ticket.URL.Replace("&", "&amp;"), lotId);
                            }

                            doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId + "&esVer=eventShopperV3_V3_1Cd", postdata));
                            if (doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']") != null)
                            {
                                return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                            }
                            else
                            {
                                return "";
                            }
                        }
                        else
                        {
                            string postdata = string.Empty;
                            if (string.IsNullOrEmpty(this.Hash) && string.IsNullOrEmpty(this.HashTS))
                            {
                                postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string /></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId).Replace("&", "&amp;");
                            }
                            else
                            {
                                if (String.IsNullOrEmpty(this.RecapToken))
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string /></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param></params></methodCall>  ", search.wRoom, lotId, this.Ticket.URL, str.ToString().ToUpper(), lotId, this.Hash, this.HashTS).Replace("&", "&amp;");
                                }
                                else
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string /></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>  ", search.wRoom, lotId, this.Ticket.URL, str.ToString().ToUpper(), lotId, this.Hash, this.HashTS).Replace("&", "&amp;");
                                }
                            }

                            doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https") + "&wrLotID=" + lotId, postdata));
                            if (doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']") != null)
                            {
                                return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                            }
                            else
                            {
                                return "";
                            }
                        }
                    }
                    else
                    {
                        HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                        try
                        {
                            if (this.Ticket.URL.Contains("eventShopperV3"))
                            {
                                string strNew = Guid.NewGuid().ToString();
                                //doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=session.get&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/"), String.Format("<methodCall><methodName>session.get</methodName><params><param><value><string>{0}</string></value></param><param><value><array><data><value><string>accessQty</string></value><value><string>searchRules</string></value><value><string>options</string></value></data></array></value></param></params></methodCall>", key)));
                                doc.LoadHtml(post(search, this.XmlUrl + "?methodName=showshop.jumpW&wroom=" + this.wRoom + "&lang=en&pc=" + search._CurrentParameter.TicketTypePasssword, String.Format("<methodCall><methodName>showshop.jumpW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>{1}</string></value></param><param><value><string>{2}</string></value></param><param><value><string>.promoGO:28:13:1</string></value></param></params></methodCall>", this.wRoom, search._CurrentParameter.TicketTypePasssword, strNew)));
                                //return doc.DocumentNode.SelectSingleNode("//name[text() = 'sessionKey']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;

                                parentIssCode = doc.DocumentNode.SelectSingleNode("//methodresponse").InnerText.Trim();

                                if (!string.IsNullOrEmpty(parentIssCode))
                                {
                                    this.wRoom = parentIssCode;
                                    #region presale
                                    _presaleSearch = new Presale(this, this.wRoom);
                                    try
                                    {

                                        if (_presaleSearch.startPresale())
                                        {
                                            try
                                            {
                                                this._isPresale = true;
                                            }
                                            catch
                                            {
                                            }
                                        }
                                        else
                                        {
                                            if (!this._presaleSearch.ifAvailable)
                                            {
                                                return "";
                                            }
                                            else
                                                this._isPresale = false;
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                    #endregion

                                    changeStatus("Processing Found Page");
                                    if (string.IsNullOrEmpty(this.Hash) && string.IsNullOrEmpty(this.HashTS))
                                    {
                                        doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId, String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param></params></methodCall>", parentIssCode, this.wRoom, search._CurrentParameter.TicketTypePasssword, lotId, this.Ticket.URL.Replace("&", "&amp;"), str)));
                                    }
                                    else
                                    {
                                        doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId, String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string></string></value></param><param><value><string>{4}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>{7}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", parentIssCode, this.wRoom, search._CurrentParameter.TicketTypePasssword, lotId, this.Ticket.URL.Replace("&", "&amp;"), str, this.Hash, this.HashTS)));
                                    }
                                }
                                else
                                {
                                    parentIssCode = this.wRoom;

                                    if (string.IsNullOrEmpty(this.Hash) && string.IsNullOrEmpty(this.HashTS))
                                    {
                                        #region presale
                                        _presaleSearch = new Presale(this, this.wRoom);
                                        try
                                        {

                                            if (_presaleSearch.startPresale())
                                            {
                                                try
                                                {
                                                    this._isPresale = true;
                                                }
                                                catch
                                                {
                                                }
                                            }
                                            else
                                            {
                                                if (!this._presaleSearch.ifAvailable)
                                                {
                                                    return "";
                                                }
                                                else
                                                    this._isPresale = false;
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }
                                        #endregion
                                    }

                                    if (string.IsNullOrEmpty(this.Hash) && string.IsNullOrEmpty(this.HashTS))
                                    {
                                        doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId, String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4.0.5</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", parentIssCode, this.wRoom, search._CurrentParameter.TicketTypePasssword, lotId, this.Ticket.URL.Replace("&", "&amp;"), str)));
                                    }
                                    else
                                    {
                                        if (!this.Ticket.isPasswordHandled)
                                        {
                                            doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId, String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4.0.5</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>{7}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", parentIssCode, this.wRoom, search._CurrentParameter.TicketTypePasssword, lotId, this.Ticket.URL.Replace("&", "&amp;"), str.ToString().ToUpper(), this.Hash, this.HashTS)));
                                        }
                                        else
                                        {
                                            doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId, String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string /></value></param><param><value><string>{4}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4.0.5</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>{7}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", parentIssCode, this.wRoom, search._CurrentParameter.TicketTypePasssword, lotId, this.Ticket.URL.Replace("&", "&amp;"), str.ToString().ToUpper(), this.Hash, this.HashTS)));
                                        }
                                    }
                                }

                                string key = doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;

                                return key;
                            }
                            else if (this.Ticket.URL.Contains("eventShopperV2.html"))
                            {
                                if (string.IsNullOrEmpty(this.Hash) && string.IsNullOrEmpty(this.HashTS))
                                {
                                    doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId + "&esVer=eventShopperV3_V3_1Cd", String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param></params></methodCall>", parentIssCode, this.wRoom, search._CurrentParameter.TicketTypePasssword, lotId, this.Ticket.URL.Replace("&", "&amp;"), str)));
                                }
                                else
                                {
                                    if (!this.Ticket.isPasswordHandled)
                                    {
                                        doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId + "&esVer=eventShopperV3_V3_1Cd", String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>{7}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", parentIssCode, this.wRoom, search._CurrentParameter.TicketTypePasssword, lotId, this.Ticket.URL.Replace("&", "&amp;"), str, this.Hash, this.HashTS)));
                                    }
                                    else
                                    {
                                        doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId + "&esVer=eventShopperV3_V3_1Cd", String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string /></value></param><param><value><string>{4}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param><param><value><string>{6}</string></value></param><param><value><string>{7}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", parentIssCode, this.wRoom, search._CurrentParameter.TicketTypePasssword, lotId, this.Ticket.URL.Replace("&", "&amp;"), str, this.Hash, this.HashTS)));
                                    }
                                }

                                return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                            }
                            else
                            {
                                return "";
                            }
                        }
                        catch
                        {
                            //else
                            {
                                doc.LoadHtml(post(search, this.XmlUrl + "?methodName=showshop.jumpW&wroom=" + this.wRoom + "&lang=en&pc=" + this._CurrentParameter.TicketTypePasssword + "&ver=3.0.54.15.1", String.Format("<methodCall><methodName>showshop.jumpW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>{1}</string></value></param><param><value><string>cdd7896f95e322b327866e67e2713d7c</string></value></param><param><value><string>.promoGO:67:15:1</string></value></param></params></methodCall>", this.wRoom, search._CurrentParameter.TicketTypePasssword)));
                                string temp = doc.DocumentNode.SelectSingleNode("//methodresponse").InnerText.Trim();
                                doc = new HtmlAgilityPack.HtmlDocument();
                                string oldWr = HttpUtility.ParseQueryString((new Uri(search.Ticket.URL)).Query).Get("wr");
                                doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/") + "?methodName=webapi.sessionCreateW&serverStr=" + this.XmlUrl.Replace("/info/", "/bfox/") + "&wrLotID=" + lotId + "&esVer=	3.4b48", String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string/></value></param><param><value><string>{4}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>ES_3_0_54e</string></value></param><param><value><string>{4}</string></value></param><param><value><string>{5}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", temp, this.wRoom, search._CurrentParameter.TicketTypePasssword, lotId, this.Ticket.URL.Replace("&", "&amp;").Replace(oldWr, temp), str)));
                                return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                                // return doc.DocumentNode.SelectSingleNode("//methodresponse").InnerText;// NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                return "";
            }
        }

        public String createSessionKeyJSON(string parentIssCode, AXSSearch search)
        {
            try
            {
                Guid str = Guid.NewGuid();
                string lotId = "";
                if (String.IsNullOrEmpty(this._presaleSearch.LotId) || this._presaleSearch.LotId == "-")
                {
                    lotId = "noLotId_7";
                }
                else
                {
                    lotId = this._presaleSearch.LotId;
                }

                if (String.IsNullOrEmpty(search._CurrentParameter.TicketTypePasssword))
                {
                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();

                    {
                        {
                            string postdata = string.Empty;
                            if (string.IsNullOrEmpty(this.Hash) && string.IsNullOrEmpty(this.HashTS))
                            {
                                if (String.IsNullOrEmpty(this.RecapToken))
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string /></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId).Replace("&", "&amp;");
                                }
                                else
                                {
                                    postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string /></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId).Replace("&", "&amp;");
                                }
                            }
                            else
                            {
                                if (String.IsNullOrEmpty(this.RecapToken))
                                {
                                    if (!String.IsNullOrEmpty(search._CurrentParameter.TicketTypePasssword))
                                    {
                                        postdata = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.sessionCreateW\",\"params\":[\"" + search.wRoom + "\",\"en-US\",\"" + search._CurrentParameter.TicketTypePasssword + "\",\"" + this.Ticket.URL + "\",\"" + lotId.Replace("_7", String.Empty) + "\",\"formPrefilled:false\",\"2.1.0.23\",\"" + this.Ticket.URL + "\",\"" + str.ToString() + "\",\"" + this.Hash + "\",\"" + this.HashTS + "\"],\"id\":1}";
                                    }
                                    else
                                    {
                                        postdata = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.sessionCreateW\",\"params\":[\"" + search.wRoom + "\",\"en-US\",null,\"" + this.Ticket.URL + "\",\"" + lotId.Replace("_7", String.Empty) + "\",\"formPrefilled:false\",\"2.1.0.23\",\"" + this.Ticket.URL + "\",\"" + str.ToString() + "\",\"" + this.Hash + "\",\"" + this.HashTS + "\"],\"id\":1}";
                                    }
                                }
                                else
                                {
                                    if (!String.IsNullOrEmpty(search._CurrentParameter.TicketTypePasssword))
                                    {
                                        postdata = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.sessionCreateW\",\"params\":[\"" + search.wRoom + "\",\"en-US\",\"" + search._CurrentParameter.TicketTypePasssword + "\",\"" + this.Ticket.URL + "\",\"" + lotId.Replace("_7", String.Empty) + "\",\"formPrefilled:false\",\"2.1.0.23\",\"" + this.Ticket.URL + "\",\"" + str.ToString() + "\",\"" + this.Hash + "\",\"" + this.HashTS + "\",\"" + this.RecapToken + "\"],\"id\":1}";
                                    }
                                    else
                                    {
                                        postdata = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.sessionCreateW\",\"params\":[\"" + search.wRoom + "\",\"en-US\",null,\"" + this.Ticket.URL + "\",\"" + lotId.Replace("_7", String.Empty) + "\",\"formPrefilled:false\",\"2.1.0.23\",\"" + this.Ticket.URL + "\",\"" + str.ToString() + "\",\"" + this.Hash + "\",\"" + this.HashTS + "\",\"" + this.RecapToken + "\"],\"id\":1}";
                                    }
                                }
                            }

                            doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https"), postdata));
                            if (doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']") != null)
                            {
                                return doc.DocumentNode.SelectSingleNode("//name[text() = 'sk']").NextSibling.NextSibling.ChildNodes[0].InnerHtml;
                            }
                            else
                            {
                                if (this.TmEvent.ifJson)
                                {
                                    JObject priceObj = JObject.Parse(doc.DocumentNode.InnerHtml);

                                    if (priceObj != null)
                                    {
                                        if (priceObj["result"] != null)
                                        {
                                            return priceObj["result"]["sk"].ToString();

                                        }
                                    }

                                    return String.Empty;
                                }
                                else
                                {
                                    return String.Empty;
                                }
                            }
                        }
                    }
                }
                else
                {
                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                    try
                    {
                        if (this.Ticket.URL.Contains("/shop/") || this.Ticket.URL.Contains("/#/"))
                        {
                            {
                                {
                                    string postdata = string.Empty;
                                    if (string.IsNullOrEmpty(this.Hash) && string.IsNullOrEmpty(this.HashTS))
                                    {
                                        if (String.IsNullOrEmpty(this.RecapToken))
                                        {
                                            postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string /></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId).Replace("&", "&amp;");
                                        }
                                        else
                                        {
                                            postdata = String.Format("<methodCall><methodName>webapi.sessionCreateW</methodName><params><param><value><string>{0}</string></value></param><param><value><string>en</string></value></param><param><value><string /></value></param><param><value><string>{2}</string></value></param><param><value><string>{4}</string></value></param><param><value><string>formPrefilled:false</string></value></param><param><value><string>3.4b48</string></value></param><param><value><string>{2}</string></value></param><param><value><string>{3}</string></value></param><param><value><string>" + this.RecapToken + "</string></value></param></params></methodCall>", search.wRoom, lotId, this.Ticket.URL, str, lotId).Replace("&", "&amp;");
                                        }
                                    }
                                    else
                                    {
                                        if (String.IsNullOrEmpty(this.RecapToken))
                                        {
                                            if (!String.IsNullOrEmpty(search._CurrentParameter.TicketTypePasssword) && !this.Ticket.isPasswordHandled)
                                            {
                                                postdata = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.sessionCreateW\",\"params\":[\"" + search.wRoom + "\",\"en-US\",\"" + search._CurrentParameter.TicketTypePasssword + "\",\"" + this.Ticket.URL + "\",\"" + lotId.Replace("_7", String.Empty) + "\",\"formPrefilled:false\",\"2.1.0.23\",\"" + this.Ticket.URL + "\",\"" + str.ToString() + "\",\"" + this.Hash + "\",\"" + this.HashTS + "\"],\"id\":1}";
                                            }
                                            else
                                            {
                                                postdata = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.sessionCreateW\",\"params\":[\"" + search.wRoom + "\",\"en-US\",null,\"" + this.Ticket.URL + "\",\"" + lotId.Replace("_7", String.Empty) + "\",\"formPrefilled:false\",\"2.1.0.23\",\"" + this.Ticket.URL + "\",\"" + str.ToString() + "\",\"" + this.Hash + "\",\"" + this.HashTS + "\"],\"id\":1}";
                                            }
                                        }
                                        else
                                        {
                                            if (!String.IsNullOrEmpty(search._CurrentParameter.TicketTypePasssword) && !this.Ticket.isPasswordHandled)
                                            {
                                                postdata = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.sessionCreateW\",\"params\":[\"" + search.wRoom + "\",\"en-US\",\"" + search._CurrentParameter.TicketTypePasssword + "\",\"" + this.Ticket.URL + "\",\"" + lotId.Replace("_7", String.Empty) + "\",\"formPrefilled:false\",\"2.1.0.23\",\"" + this.Ticket.URL + "\",\"" + str.ToString() + "\",\"" + this.Hash + "\",\"" + this.HashTS + "\",\"" + this.RecapToken + "\"],\"id\":1}";
                                            }
                                            else
                                            {
                                                postdata = "{\"jsonrpc\":\"2.0\",\"method\":\"webapi.sessionCreateW\",\"params\":[\"" + search.wRoom + "\",\"en-US\",null,\"" + this.Ticket.URL + "\",\"" + lotId.Replace("_7", String.Empty) + "\",\"formPrefilled:false\",\"2.1.0.23\",\"" + this.Ticket.URL + "\",\"" + str.ToString() + "\",\"" + this.Hash + "\",\"" + this.HashTS + "\",\"" + this.RecapToken + "\"],\"id\":1}";
                                            }
                                        }
                                    }

                                    doc.LoadHtml(post(search, this.XmlUrl.Replace("/info/", "/bfox/").Replace("http", "https"), postdata));

                                    if (this.TmEvent.ifJson)
                                    {
                                        JObject priceObj = JObject.Parse(doc.DocumentNode.InnerHtml);

                                        if (priceObj != null)
                                        {
                                            if (priceObj["result"] != null)
                                            {
                                                return priceObj["result"]["sk"].ToString();

                                            }
                                        }

                                        return String.Empty;
                                    }
                                    else
                                    {
                                        return String.Empty;
                                    }
                                }
                            }
                        }
                        else
                        {
                            return String.Empty;
                        }
                    }
                    catch
                    {
                        return String.Empty;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                return "";
            }
        }

        public String createTixSessionKey()
        {
            //if (String.IsNullOrEmpty(_CurrentParameter.TicketTypePasssword))
            //{
            //    return String.Empty;
            //}
            //else
            {
                try
                {
                    string html = string.Empty;

                    if (!String.IsNullOrEmpty(RecapToken))
                    {
                        this.Session.Payload = "{\"locale\":\"en-US\",\"meta\":{\"version\":\"" + version + "\",\"url\":\"\"},\"recaptchaToken\":\"" + this.RecapToken + "\",\"queueItUrl\":\"" + this.strURL + "\"}";
                    }
                    else
                    {
                        this.Session.Payload = "{\"locale\":\"en-US\",\"meta\":{\"version\":\"" + version + "\",\"url\":\"\"},\"queueItUrl\":\"" + this.strURL + "\"}";
                    }


                    if (this.Ticket.IsUkEvent) //if (this.Ticket.URL.Contains("shop.axs.co.uk") || this.Ticket.URL.Contains("q.axs.co.uk"))
                    {
                        if (!String.IsNullOrEmpty(RecapToken))
                        {
                            this.Session.Payload = "{\"locale\":\"en-GB\",\"meta\":{\"version\":\"" + version + "\",\"url\":\"\"},\"recaptchaToken\":\"" + this.RecapToken + "\",\"queueItUrl\":\"" + this.strURL + "\"}";
                        }
                        else
                        {
                            this.Session.Payload = "{\"locale\":\"en-GB\",\"meta\":{\"version\":\"" + version + "\",\"url\":\"\"},\"queueItUrl\":\"" + this.strURL + "\",\"socketId\":\"" + UniqueKey.getUniqueKey(20) + "\"}";
                        }

                        this.Session.HTMLWeb.Referrer = "https://shop.axs.co.uk/";

                        html = this.Session.Post("https://unifiedapicommerce.axs.co.uk/veritix/session/v2/" + this.OnSaleUrl);
                    }
                    else
                    {
                        this.Session.HTMLWeb.Referrer = "https://tix.axs.com/";

                        html = Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/session/v2/" + this.OnSaleUrl);
                        if (html.Contains("needToSolveRecaptcha"))
                        {
                            #region Need To solve Recaptcha
                            this.RecapToken = String.Empty;
                            this.RecapToken = GetRecaptchaTokenV1();



                            Session.Payload = "{\"token\":\"" + this.RecapToken + "\"}";

                            html = Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/recaptcha-verification/v1/" + this.OnSaleUrl);
                            #endregion
                        }
                    }

                    try
                    {
                        JObject priceObj = JObject.Parse(html);

                        if (priceObj != null)
                        {
                            if (priceObj["sessionID"] != null)
                            {
                                if (this.Ticket.IsUkEvent) // if (this.Ticket.URL.Contains("shop.axs.co.uk") || this.Ticket.URL.Contains("q.axs.co.uk"))
                                {
                                    if (String.IsNullOrEmpty(this.SessionKey))
                                    {
                                        return priceObj["sessionID"].ToString();
                                    }
                                    else
                                    {
                                        return this.SessionKey;
                                    }
                                }
                                else
                                {
                                    return priceObj["sessionID"].ToString();
                                }
                            }
                            else if (priceObj["message"] != null)
                            {
                                String mess = priceObj["message"].ToString();
                                if (mess.ToLower().Contains("unauthorized"))
                                {
                                    this.RecapToken = String.Empty;

                                    if (this.processCaptchaPage())
                                    {
                                        if (!String.IsNullOrEmpty(RecapToken))
                                        {
                                            this.Session.Payload = "{\"locale\":\"en-US\",\"meta\":{\"version\":\"" + version + "\",\"url\":\"\"},\"recaptchaToken\":\"" + this.RecapToken + "\",\"queueItUrl\":\"" + this.strURL + "\"}";

                                            this.Session.HTMLWeb.Referrer = "https://tix.axs.com/";

                                            html = this.Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/session/v2/" + this.OnSaleUrl);
                                            if (html.Contains("needToSolveRecaptcha"))
                                            {
                                                #region Need To Solve Recaptcha
                                                this.RecapToken = String.Empty;
                                                this.RecapToken = GetRecaptchaTokenV1();

                                                Session.Payload = "{\"token\":\"" + this.RecapToken + "\"}";

                                                html = Session.Post("https://unifiedapicommerce.us-prod0.axs.com/veritix/recaptcha-verification/v1/" + this.OnSaleUrl);
                                                #endregion
                                            }


                                            priceObj = JObject.Parse(html);

                                            if (priceObj != null)
                                            {
                                                if (priceObj["sessionID"] != null)
                                                {
                                                    if (this.Ticket.IsUkEvent) // if (this.Ticket.URL.Contains("shop.axs.co.uk") || this.Ticket.URL.Contains("q.axs.co.uk"))
                                                    {
                                                        if (String.IsNullOrEmpty(this.SessionKey))
                                                        {
                                                            return priceObj["sessionID"].ToString();
                                                        }
                                                        else
                                                        {
                                                            return this.SessionKey;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        return priceObj["sessionID"].ToString();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        return String.Empty;
                    }
                    catch
                    {
                        return String.Empty;
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                    return String.Empty;
                }
            }

        }

        public String GetRecaptchaTokenV1(bool isHCaptha = false)
        {
            String token = String.Empty;
            String captchaKey = "6LexTBoTAAAAAESv_PtNKgDQM7ZP9KOKedZUbYay";

            try
            {
                // if ((this.Ticket.ifCapsium) && (this.Ticket.ifAutoCaptcha && this.IfUseAutoCaptcha))
                if (this.Ticket.ifAutoCaptcha && this.IfUseAutoCaptcha)
                {
                    if (this.Ticket.ifCapsium)
                    {
                        #region Token From Bucket
                        TokenBucket tb = null;
                        int captchaPollRetry = 0;

                        do
                        {
                            try
                            {
                                if (this.IfWorking && this.Ticket.isRunning)
                                {
                                    changeStatus(TicketSearchStatus.ResolvingCaptchaStatus);
                                }

                                if (isHCaptha)
                                {
                                    changeStatus(TicketSearchStatus.ResolvingCFCaptchaStatus);

                                    tb = this.getRecapToken("axsWEBCF");

                                }
                                else
                                {
                                    tb = this.getRecapToken("axsWEBV1");
                                }

                                captchaPollRetry++;

                                if ((tb != null) && (!String.IsNullOrEmpty(tb.Recaptoken) && (String.IsNullOrEmpty(tb.Error))))
                                {
                                    if (tb.Recaptoken.Equals("?"))
                                    {
                                        Thread.Sleep(2500);
                                        continue;
                                    }

                                    token = tb.Recaptoken;
                                    break;
                                }

                                changeStatus(TicketSearchStatus.CaptchaPollStatus);
                                Thread.Sleep(2500);
                            }
                            catch (Exception ex)
                            {
                                try
                                {
                                    Debug.WriteLine(ex.Message + " - " + ex.StackTrace);
                                }
                                catch (Exception xe)
                                {
                                    Debug.WriteLine(xe.Message + Environment.NewLine + xe.StackTrace);
                                }
                            }

                        } while (captchaPollRetry < 60 && this.IfWorking);

                        if (this.IfWorking && this.Ticket.isRunning)
                        {
                            changeStatus(TicketSearchStatus.CaptchaResolvedStatus);
                        }
                        #endregion
                    }
                    else
                    {
                        #region Captcha On Request
                        int retry = 0;
                        int maxRetries = 10;
                        Capsium capsium = null;

                        do
                        {
                            capsium = SolveCaptchaOnRequest(captchaKey);
                            Thread.Sleep(1000);
                        }
                        while ((capsium == null) || !String.IsNullOrEmpty(capsium.ErrorMsg) || String.IsNullOrEmpty(capsium.RecapToken) || !this.IfWorking);

                        if (capsium != null)
                        {
                            if (capsium.FallBack)
                            {
                                if (!String.IsNullOrEmpty(capsium.RecapToken))
                                {
                                    changeStatus(TicketSearchStatus.CaptchaResolvedStatus);

                                    token = capsium.RecapToken;
                                }
                            }
                        }
                        #endregion
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return token;
        }

        protected JWTTokenMessage getCaptchaService()
        {
            JWTTokenMessage msg = new JWTTokenMessage();

            if (this.Ticket.ifDBCAutoCaptcha)
            {
                msg.Username = this.Ticket.AutoCaptchaServices.DBCUserName;
                msg.Password = this.Ticket.AutoCaptchaServices.DBCPassword;
                msg.ServiceName = "DBC";
                return msg;
                //  solveAutoCaptcha = new DeathByCaptchaAPI(this.Ticket.AutoCaptchaServices, this.Captcha);
            }
            else if (this.Ticket.ifRDAutoCaptcha)
            {
                msg.Username = this.Ticket.AutoCaptchaServices.RDUserName;
                msg.Password = this.Ticket.AutoCaptchaServices.RDPassword;
                msg.ServiceName = "RD";
                return msg;
                //solveAutoCaptcha = new RDCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
            }
            else if (this.Ticket.ifRDCAutoCaptcha)
            {
                msg.Username = this.Ticket.AutoCaptchaServices.RDCUserName;
                msg.Password = this.Ticket.AutoCaptchaServices.RDCPassword;
                msg.ServiceName = "RDC";
                return msg;
                //solveAutoCaptcha = new RDCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
            }
            else if (this.Ticket.ifCPTAutoCaptcha)
            {
                msg.Username = this.Ticket.AutoCaptchaServices.CPTUserName;
                msg.Password = this.Ticket.AutoCaptchaServices.CPTPassword;
                msg.ServiceName = "CPT";
                return msg;
                //solveAutoCaptcha = new CPTCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
            }
            else if (this.Ticket.ifDCAutoCaptcha)
            {
                msg.Username = this.Ticket.AutoCaptchaServices.DCUserName;
                msg.Password = this.Ticket.AutoCaptchaServices.DCPassword;
                msg.Port = this.Ticket.AutoCaptchaServices.DCPort;
                msg.ServiceName = "DC";
                return msg;
                //solveAutoCaptcha = new DeCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
            }
            else if (this.Ticket.ifOCR)
            {
                msg.Host = this.Ticket.AutoCaptchaServices.OCRIP;
                msg.Port = this.Ticket.AutoCaptchaServices.OCRPort;
                msg.ServiceName = "OCR";
                return msg;
                //solveAutoCaptcha = new OCRService(this.Ticket.AutoCaptchaServices, this.Captcha);
            }
            //else if (this.Ticket.ifCAutoCaptcha)
            //{
            //    msg.Host = this.Ticket.AutoCaptchaServices.CHost;
            //    msg.Port = this.Ticket.AutoCaptchaServices.CPort;
            //    msg.Username = this.Ticket.AutoCaptchaServices.CUserName;
            //    msg.Password = this.Ticket.AutoCaptchaServices.CPassword;
            //    msg.ServiceName = "C";
            //    //solveAutoCaptcha = new CustomCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha);
            //}
            //else if (this.Ticket.ifROCR)
            //{
            //    msg.Ip = this.Ticket.AutoCaptchaServices.ROCRIP;
            //    msg.Port = this.Ticket.AutoCaptchaServices.ROCRPort;
            //    msg.Username = this.Ticket.AutoCaptchaServices.ROCRUsername;
            //    msg.Password = this.Ticket.AutoCaptchaServices.ROCRPassword;
            //    msg.ServiceName = "ROCR";
            //    //solveAutoCaptcha = new ROCRService(this.Ticket.AutoCaptchaServices, this.Captcha);
            //}
            //else if (this.Ticket.ifBoloOCR)
            //{
            //    msg.Ip = this.Ticket.AutoCaptchaServices.BOLOIP;
            //    msg.Port = this.Ticket.AutoCaptchaServices.BOLOPORT;
            //    msg.ServiceName = "BOLO";
            //    //solveAutoCaptcha = new BoloCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha);
            //}
            //else if (this.Ticket.ifSOCR)
            //{
            //    msg.Ip = this.Ticket.AutoCaptchaServices.SOCRIP;
            //    msg.Port = this.Ticket.AutoCaptchaServices.SOCRPort;
            //    msg.Username = this.Ticket.AutoCaptchaServices.SOCRCaptchaURL;

            //    msg.ServiceName = "SOCR";
            //    //solveAutoCaptcha = new SOCRService(this.Ticket.AutoCaptchaServices, this.Captcha);
            //}
            else if (this.Ticket.if2C)
            {
                msg.Key = this.Ticket.AutoCaptchaServices.C2Key;
                msg.ServiceName = "2C";
                return msg;
                //solveAutoCaptcha = new Captcha2(this.Ticket.AutoCaptchaServices, this.Captcha, true);
            }
            else if (this.Ticket.ifAntigateAutoCaptcha)
            {
                msg.Key = this.Ticket.AutoCaptchaServices.AntigateKey;
                msg.ServiceName = "A";
                return msg;
                //solveAutoCaptcha = new AntigateCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
            }
            //else if (this.Ticket.ifAC1AutoCaptcha)
            //{
            //    msg.Key = CapsiumLicensingOperation.LicesningPickerInstance.AC1Key;
            //    msg.ServiceName = "AC1";
            //    msg.Audio = true;
            //    return msg;
            //    //solveAutoCaptcha = new AntigateCaptchaService(this.Ticket.AutoCaptchaServices, this.Captcha, true);
            //}
            return null;
        }

        protected Capsium SolveCaptchaOnRequest(String _captchaKey)
        {
            Capsium capsium = null;
            Uri site = new Uri(this.Ticket.URL);

            try
            {
                changeStatus(TicketSearchStatus.ResolvingCaptchaStatus);

                JWTTokenMessage captchaservice = getCaptchaService();

                if (captchaservice != null)
                {

                    CapsiumSharedMessages.JWTTokenMessage msg = new CapsiumSharedMessages.JWTTokenMessage();
                    msg.ServiceName = captchaservice.ServiceName;
                    msg.Audio = captchaservice.Audio;
                    msg.Key = captchaservice.Key;
                    msg.Username = captchaservice.Username;
                    msg.Password = captchaservice.Password;
                    msg.Site = site.Host;
                    String recapaptchaToken = string.Empty;


                    
                    if (!msg.ServiceName.Equals("2C") && !msg.ServiceName.Equals("A") && !msg.ServiceName.Equals("RDC") && !msg.ServiceName.Equals("DBC"))
                    {
                        //retry++;
                        return null;
                        //changeStatus(TicketSearchStatus.ResolvingCaptchaStatus);

                        //CapsiumLicensingOperation.LicesningPickerInstance.getCaptcha(AVS_CAPTCHA_KEY, msg);

                        //CapsiumLicensingOperation.LicesningPickerInstance.RecaptchaTokenBag.TryTake(out capsium, 1 * 1000, cancToken.Token);

                        //if (capsium == null)
                        //{
                        //    CapsiumLicensingOperation.LicesningPickerInstance.getCaptcha(AVS_CAPTCHA_KEY, msg);
                        //    CapsiumLicensingOperation.LicesningPickerInstance.RecaptchaTokenBag.TryTake(out capsium, 10 * 1000, cancToken.Token);
                        //}
                        //else if (capsium.ExpireTime < DateTime.Now)
                        //{
                        //    capsium = null;
                        //}
                        //if (!this.IfWorking || !this.Ticket.isRunning)
                        //{
                        //    return null;
                        //}
                    }
                    else if (msg.ServiceName.Equals("2C") && this.Session.HtmlDocument.DocumentNode.InnerHtml.Contains("hcaptcha"))
                    {
                        changeStatus(TicketSearchStatus.ResolvingCFCaptchaStatus);

                        recapaptchaToken = new RecaptchaTokenApi2C().GetHCaptchaToken(msg.Key, "33f96e6a-38cd-421b-bb68-7806e1764460", "https://" + new Uri(this.strURL).Host, null);

                        capsium = new Capsium();
                        capsium.RecapToken = recapaptchaToken.ToString();
                        capsium.FallBack = true;
                    }

                    else if (msg.ServiceName.Equals("2C"))
                    {
                        recapaptchaToken = new RecaptchaTokenApi2C().GetRecaptchaToken(msg.Key, _captchaKey, msg.Site);

                        capsium = new Capsium();
                        capsium.RecapToken = recapaptchaToken.ToString();
                        capsium.FallBack = true;
                    }
                    else if (msg.ServiceName.Equals("A") && this.Session.HtmlDocument.DocumentNode.InnerHtml.Contains("hcaptcha"))
                    {
                        capsium = new Capsium();
                        capsium.RecapToken = new RecaptchaTokenApiAntigate().GetHCaptchaToken(msg.Key, "33f96e6a-38cd-421b-bb68-7806e1764460", msg.Site);
                        capsium.FallBack = true;
                        capsium.ExpireTime = DateTime.Now.AddMinutes(2);
                    }
                    else if (msg.ServiceName.Equals("A"))
                    {
                        capsium = new Capsium();
                        capsium.RecapToken = new RecaptchaTokenApiAntigate().GetRecaptchaTokenProxyLess(msg.Key, RecaptchaV2Key, msg.Site);
                        capsium.FallBack = true;
                        capsium.ExpireTime = DateTime.Now.AddMinutes(2);
                    }
                    else if (msg.ServiceName.Equals("RDC"))
                    {
                        capsium = new Capsium();
                        capsium.RecapToken = new RecaptchaTokenRDC().GetRecaptchaToken(msg.Username, msg.Password, _captchaKey, msg.Site, "", "");
                        capsium.FallBack = true;
                        capsium.ExpireTime = DateTime.Now.AddMinutes(2);
                    }
                    else if (msg.ServiceName.Equals("DBC"))
                    {
                        capsium = new Capsium();
                        capsium.RecapToken = new RecaptchaTokenApiDBC().GetRecaptchaToken(msg.Username, msg.Password, _captchaKey, msg.Site, "", "");
                        capsium.FallBack = true;
                        capsium.ExpireTime = DateTime.Now.AddMinutes(2);
                    }
                }
                else
                {
                    this.Status = "Please select a captcha service";

                    changeStatus(this.Status);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            return capsium;
        }

        public String post(AXSSearch search, string url, string postdata)
        {
            if (url.Contains("httpss"))
            {
                url = url.Replace("httpss", "https");
            }
            XmlDocument xdoc = new XmlDocument();

            string URL = url;
            string Result = String.Empty;

            try
            {
                System.Net.HttpWebRequest webRequest = System.Net.HttpWebRequest.Create(URL) as System.Net.HttpWebRequest;
                //System.Net.WebRequest webRequest = System.Net.WebRequest.Create(URL) as System.Net.HttpWebRequest;


                //webRequest.Referer = "https://tickets.axs.com/eventShopperV3_stable.swf?fbShareURL=www.axs.com%2Fevents%2F248052%2Fblack-label-society-tickets%3F%26ref%3Devs_fb&docLoc=https%3A;;;slash;;;;;;slash;;;tickets.axs.com;;;slash;;;eventShopperV3.html%3Fwr%3D11dae2c4-2e76-4c55-9080-7e97b2e7b5b9%26preFill%3D1%26lang%3Den%26locale%3Den_us%26eventid%3D248052%26ec%3DFTF140607%26src%3DAEGAXS1_WMAIN%26skin%3Daxs_thefonda%26fbShareURL%3Dwww.axs.com%252Fevents%252F248052%252Fblack-label-society-tickets%253F%2526ref%253Devs_fb&lang=en&wr=11dae2c4-2e76-4c55-9080-7e97b2e7b5b9&analytics=icrossing___omniture&ec=FTF140607&event=248052&skin=axs_thefondav3";
                // webRequest.ContentType = "application/x-www-form-urlencoded";
                webRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0";

                //  if (Search.Ticket.URL.Contains("/#/"))
                if (postdata.Contains("amodsellComplete"))
                {
                    webRequest.ContentType = "application/json-rpc";
                    webRequest.Accept = "application/json";
                }
                else if (this.Ticket.URL.Contains("/shop/") || this.Ticket.URL.Contains("/#/")) //if ((search.TmEvent!=null) &&(search.TmEvent.ifJson))
                {
                    webRequest.Accept = "application/json";
                    webRequest.ContentType = "application/json-rpc";
                    webRequest.Referer = "https://" + new Uri(this.Ticket.URL).Host;
                }
                else
                {
                    if (url.Contains("sessionCreateW"))
                    {
                        //webRequest.Headers.Add("X-Requested-With", "ShockwaveFlash/21.0.0.182");
                        webRequest.UserAgent = "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36";
                        webRequest.ContentType = "application/x-www-form-urlencoded";
                        webRequest.Accept = "*/*";
                    }
                    else if (url.Contains("jumpW"))
                    {
                        //webRequest.Headers.Add("X-Requested-With", "ShockwaveFlash/21.0.0.182");
                        webRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36";
                        webRequest.ContentType = "text/html";
                        webRequest.Accept = "*/*";
                    }
                    else
                    {
                        //if (url.Contains("searchSeats2"))
                        {
                            //webRequest.Headers.Add("X-Requested-With", "ShockwaveFlash/21.0.0.182");
                            webRequest.ContentType = "text/xml";
                            webRequest.Accept = "*/*";
                        }
                        //else
                        //{
                        //    //webRequest.Headers.Add("X-Requested-With", "ShockwaveFlash/21.0.0.182");
                        //    webRequest.ContentType = "text/html";
                        //    webRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";   //"*/*";
                        //}

                    }
                    webRequest.Headers.Add("X-Requested-With", "ShockwaveFlash/23.0.0.166");
                    webRequest.Referer = this.Ticket.URL; //webRequest.Referer = "https://tickets.axs.com/eventShopperV3UK.swf?fbShareURL=www.axs.com%252Fuk%252Fevents%252F302818%252Fandrea-bocelli-tickets%253F%2526ref%253Devs_fb&docLoc=https%3A;;;slash;;;;;;slash;;;tickets.axs.com;;;slash;;;eventShopperV3UK.html%3Fwr%3DGEN-bae3-42b2-84be-8ccd57a3a6af%26addData%3DLON%26preFill%3D1%26lang%3Den%26locale%3Den_gb%26eventid%3D302818%26ec%3DO2L161001%26src%3DAEGAXS1_WMAIN%26skin%3Daxs_theo2%26fbShareURL%3Dwww.axs.com%25252Fuk%25252Fevents%25252F302818%25252Fandrea-bocelli-tickets%25253F%252526ref%25253Devs_fb&lang=en&wr=GEN-bae3-42b2-84be-8ccd57a3a6af&addData=hide_sag_120s,LON&analytics=icrossing___omniture&ec=O2L161001&event=302818&skin=axs_theo2v3";
                }

                if (!String.IsNullOrEmpty(this.AuthorizarionHeader))
                {
                    webRequest.Headers.Set(HttpRequestHeader.Authorization, this.AuthorizarionHeader);
                }

                webRequest.Headers.Add("Accept-Encoding", "gzip, deflate, br");
                webRequest.Headers.Add("Accept-Language", "en-US,en;q=0.8");
                webRequest.Headers.Add("Origin", "https://" + new Uri(this.Ticket.URL).Host);
                webRequest.Timeout = 25000;//60000 * 2;
                System.Net.ServicePointManager.Expect100Continue = false;
                webRequest.ServicePoint.Expect100Continue = false;

                webRequest.KeepAlive = true;

                //webRequest.Headers.Add("Cookie", "_ga=GA1.2.1883910939.1469809617; s_fid=3828F044A5FE97D5-09B797F8FB98C5C0; s_gnr30=1469809638188-New");
                //webRequest.Headers.Add("Cookie","_ga=GA1.2.2029224065.1447194147; OX_plg=swf|sl|pdf|shk|pm; s_fid=02E14EE53A8A7E78-2470915A0A6B4FAE; s_gnr7=1447219227236-Repeat; s_gnr30=1447219227238-Repeat; s_cc=true; s_vi=[CS]v1|2B21372005312ABC-6000010BC0017CB9[CE]; OX_sd=1; _gat_b5e2e67637cdf25e608d94974a9a3d44=1; gpv_pn=tickets.axs.com%3Apurchase%3Aselect%3Alos%20angeles%3Athe%20who%3A05-25-2016%3Astaples%20center; gpv_c7=no%20value");
                if (ServicePointManager.MaxServicePoints < 1000)
                {
                    ServicePointManager.MaxServicePoints = 1000;
                }

                if (ServicePointManager.DefaultConnectionLimit < 1000)
                {
                    ServicePointManager.DefaultConnectionLimit = 1000;
                }
                if (search.Proxy != null)
                {
                    if (!String.IsNullOrEmpty(search.Proxy.LuminatiSessionId))
                    {
                        webRequest.ConnectionGroupName = search.Proxy.LuminatiSessionId;
                    }
                }

                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

                ServicePointManager.ServerCertificateValidationCallback += new System.Net.Security.RemoteCertificateValidationCallback(certificateValidationCallback);

                if (search.Proxy != null)
                {
                    try
                    {
                        if (search.Proxy.TheProxyType == Proxy.ProxyType.Relay)
                        {
                            webRequest.Timeout = 10000;
                            webRequest.Proxy = _proxy.toWebProxy(context);
                        }
                        else if (!String.IsNullOrEmpty(search.Proxy.Address.Trim()) && !String.IsNullOrEmpty(search.Proxy.Port.Trim()))
                        {
                            if (search.Proxy.TheProxyType != Proxy.ProxyType.Custom)
                            {
                                webRequest.Timeout = 10000;
                            }

                            if (search.Proxy.TheProxyType != Proxy.ProxyType.Relay)
                            {
                                webRequest.Proxy = search.Proxy.toWebProxy();
                            }
                            else
                            {
                                webRequest.Proxy = search.Proxy.toWebProxy(search.context);
                            }
                            //if (!String.IsNullOrEmpty(search.Proxy.Address.Trim()) && !String.IsNullOrEmpty(search.Proxy.Port.Trim()))
                            //{
                            //    webRequest.Proxy = new System.Net.WebProxy(search.Proxy.Address.Trim(), int.Parse(search.Proxy.Port.Trim()));
                            //}
                            //if (!String.IsNullOrEmpty(search.Proxy.UserName.Trim()) && !String.IsNullOrEmpty(search.Proxy.Password.Trim()))
                            //{
                            //    webRequest.Proxy.Credentials = new System.Net.NetworkCredential(search.Proxy.UserName.Trim(), search.Proxy.Password.Trim());
                            //}
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                    }
                }

                try
                {
                    HttpWebResponse resp = null;
                    Encoding respenc = null;
                    var isGZipEncoding = false;
                    System.IO.Stream reqStream = null;

                    if (!String.IsNullOrEmpty(postdata))
                    {
                        webRequest.Method = "POST";
                        string postData = postdata.Replace("&lt;", "<").Replace("&gt;", ">");
                        byte[] postArray = Encoding.ASCII.GetBytes(postData);
                        webRequest.ContentLength = postArray.Length;
                        reqStream = webRequest.GetRequestStream();
                        reqStream.Write(postArray, 0, postArray.Length);
                    }
                    else
                    {
                        webRequest.Method = "GET";
                    }

                    try
                    {
                        resp = webRequest.GetResponse() as HttpWebResponse;
                    }
                    catch (WebException we)
                    {
                        resp = (HttpWebResponse)we.Response;
                        ProxyPicker.ProxyPickerInstance.RecheckProxyStatus(search.Proxy, we.Message);
                    }

                    if (resp != null)
                    {
                        if (!string.IsNullOrEmpty(resp.ContentEncoding))
                        {
                            isGZipEncoding = resp.ContentEncoding.ToLower().StartsWith("gzip") ? true : false;
                            if (!isGZipEncoding)
                            {
                                respenc = Encoding.GetEncoding(resp.ContentEncoding);
                            }
                        }

                        ////
                        //Stream reqStream = webRequest.GetRequestStream();


                        if (isGZipEncoding)
                        {
                            reqStream = new GZipStream(resp.GetResponseStream(), CompressionMode.Decompress);
                        }
                        else
                        {
                            reqStream = resp.GetResponseStream();
                            //  xdoc.Load(resp.GetResponseStream());


                        }


                        //reqStream.Write(postArray, 0, postArray.Length);

                        //StreamReader sr = new StreamReader(new GZipStream((webRequest.GetResponse().GetResponseStream()), CompressionMode.Compress));
                        StreamReader sr = new StreamReader(reqStream);
                        Result = sr.ReadToEnd();
                    }
                    reqStream.Close();

                    return Result;
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    Logger.LoggerInstance.Add(new Log(ErrorType.EXCEPTION, this.Ticket.TicketID, this.Ticket.URL, ex.Message + ex.StackTrace));
                    return Result;
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
                return Result;
            }
        }

        private bool certificateValidationCallback(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors)
        {
            return true;
        }

        public Boolean getExtractedDatesForm(ITicketSearch currentSearch)
        {
            try
            {
                if (!ifInQueue(currentSearch))
                {
                    this.changeStatus(TicketSearchStatus.ChangeParameterRequest);

                    this.Ticket.ifOpen = true;
                    AXSTicket tmp = ((AXSTicket)this.Ticket);

                    if (this.Parameter == null)
                    {
                        this.Parameter = new Parameter(this.Sections);
                    }
                    else
                    {
                        this.Parameter.EventDates = this.Sections;
                    }

                    if (tmp.ParameterQueue.Count > 0)
                    {
                        this.Parameter.IfEventDatesBind = false;
                    }
                    else
                    {
                        this.Parameter.IfEventDatesBind = true;
                    }


                    lock (tmp.ParameterQueue)
                    {
                        tmp.ParameterQueue.Add(this);
                    }

                    this.Parameter.parameterentered.WaitOne();

                    this.Ticket.ifOpen = false;
                }
                else
                {
                    this.changeStatus(TicketSearchStatus.PausingRequest);

                    while (this.Ticket.ifOpen)
                    {
                        Thread.Sleep(1000);
                    }
                }

                if (!string.IsNullOrEmpty(this.Ticket.SelectedDate))
                {
                    this._CurrentParameter.DateTimeString = this.Ticket.SelectedDate;
                    this._CurrentParameter.EventTime = this.Ticket.SelectedEventTime;
                }

                return true;
            }
            catch
            {
                return false;
            }
        }

        bool ifInQueue(ITicketSearch currentSearch)
        {
            try
            {
                Thread.Sleep(1000);
                AXSTicket tmp = ((AXSTicket)this.Ticket);

                if (tmp.ParameterQueue != null)
                {
                    if (tmp.ParameterQueue.Any(p => p.TicketName.Equals(currentSearch.TicketName)))    //  if in queue
                    {
                        return true;
                    }
                    else if (currentSearch.Ticket.DoneSelection)
                    {
                        return true;
                    }
                    else
                    {
                        //TODO: if not in queue then ADD it
                        if (currentSearch._CurrentParameter.DateTimeString == "mm/dd/yyyy" || String.IsNullOrEmpty(currentSearch._CurrentParameter.DateTimeString))     // check if its already extracted
                        {

                            return false;
                        }

                    }

                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }

        public TokenBucket getRecapToken(string appkey)
        {
            try
            {
                using (TcpClient client = new TcpClient("127.0.0.1", 8015))
                {
                    NetworkStream stream = client.GetStream();
                    //stream.ReadTimeout = 30000 * 1000;
                    //stream.WriteTimeout = 30000 * 1000;
                    TCPEncryptor encryptor = new TCPEncryptor();
                    TokenRequestMessage msg = new TokenRequestMessage();
                    msg.Command = "getrecapTokens";
                    msg.Type = appkey;
                    byte[] buffer = Encoding.UTF8.GetBytes(TCPEncryptor.Encrypt(JsonConvert.SerializeObject(msg)) + "<EOF>");
                    stream.Write(buffer, 0, buffer.Length);
                    string message = Msg.ReadMessage(stream);
                    message = TCPEncryptor.Decrypt(message);
                    TokenBucket Tokens = JsonConvert.DeserializeObject<TokenBucket>(message);
                    return Tokens;
                }
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
                return null;
            }
        }

        public static string UpperCaseUrlEncode(string s)       //Encode URL in UpperCase
        {
            char[] temp = HttpUtility.UrlEncode(s).ToCharArray();
            for (int i = 0; i < temp.Length - 2; i++)
            {
                if (temp[i] == '%')
                {
                    temp[i + 1] = char.ToUpper(temp[i + 1]);
                    temp[i + 2] = char.ToUpper(temp[i + 2]);
                }
            }
            return new string(temp);
        }

        public string OfferID { get; set; }

        public string offerGroupID { get; set; }

        public string productID { get; set; }

        public string contextID { get; set; }

        private String getMD5Hash(String data)
        {
            string md5 = String.Empty;

            byte[] bytes = Encoding.UTF8.GetBytes(data);
            MD5CryptoServiceProvider md5string = new MD5CryptoServiceProvider();
            byte[] md5hash = md5string.ComputeHash(bytes);

            //foreach (byte x in md5hash)
            for (int i = 0; i < md5hash.Length - 1; i = i + 2)
            {
                md5 += String.Format("{0:x2}", md5hash[i]);
            }
            //{
            //    md5 += String.Format("{0:x2}", x);
            //}

            return md5;
        }

        private String getSHA256Hash(String data)
        {
            string hashString = string.Empty;

            byte[] bytes = Encoding.UTF8.GetBytes(data);
            SHA256Managed hashstring = new SHA256Managed();
            byte[] hash = hashstring.ComputeHash(bytes);
            foreach (byte x in hash)
            {
                hashString += String.Format("{0:x2}", x);
            }

            return hashString;
        }

        private String getSHA256HashQ(String input, String _zeroCount, out int postfix)
        {
            string hashString = string.Empty;
            postfix = 0;

            int zeroCount = int.Parse(_zeroCount);
            String zeroes = "";
            for (var i = 0; i < zeroCount; i++)
            {
                zeroes += "0";
            }

            while (true)
            {
                hashString = string.Empty;
                postfix++;
                SHA256Managed hashstring = new SHA256Managed();

                byte[] bytes = Encoding.UTF8.GetBytes(input + postfix);
                byte[] hash = hashstring.ComputeHash(bytes);

                foreach (byte x in hash)
                {
                    hashString += String.Format("{0:x2}", x);
                }

                if (hashString.StartsWith(zeroes))
                {
                    break;
                }
            }

            return hashString;
        }

        public  bool SolveHCaptcha(string url, BrowserSession session,string recapToken)
        {
            bool result = false;

            try
            {
                if (!session.FormElements.ContainsKey("g-recaptcha-response"))
                {
                    session.FormElements.Add("g-recaptcha-response", recapToken);
                }

                if (!session.FormElements.ContainsKey("h-captcha-response"))
                {
                    session.FormElements.Add("h-captcha-response", recapToken);

                }

                HtmlNode _node = session.HtmlDocument.DocumentNode.SelectSingleNode("//form[@id='challenge-form']");

                if (_node != null)
                {
                    string actionURL = _node.Attributes["action"].Value.ToString();

                    HtmlNode idNode = session.HtmlDocument.DocumentNode.SelectSingleNode("//strong[@class='font-semibold']");

                    if (idNode != null)
                    {
                        if (!session.FormElements.ContainsKey("id"))
                        {
                            session.FormElements.Add("id", idNode.InnerText);
                        }
                    }

                    session.isJson = false;
                    session.IsHCaptcha = true;
                    session.Post("https://" + new Uri(url).Host + System.Net.WebUtility.HtmlDecode(actionURL));
                    session.IsHCaptcha = false;

                    if (session.StrCookies.Contains("cf_clearance"))
                    {
                        this.cfclearance = session.StrCookies;

                       // session.cf_clearance = string.Empty; // get value from str cookies
                        session.HTMLWeb.IfAllowAutoRedirect = false;

                        session.Get(this.Ticket.URL);

                        while (!string.IsNullOrEmpty(session.RedirectLocation))
                        {
                            session.Get(session.RedirectLocation);
                        }


                        changeStatus(TicketSearchStatus.SearchingStatus);


                        result = true;
                    }


                }

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
            }

            return result;

        }


    }

    public class SortIntDescending : IComparer<double>
    {
        int IComparer<double>.Compare(double a, double b) //implement Compare
        {
            if (a > b)
                return -1; //normally greater than = 1
            if (a < b)
                return 1; // normally smaller than = -1
            else
                return 0; // equal
        }
    }

    public class PriceLevelSection
    {
        public string PriceLevelId
        {
            get;
            set;
        }

        public string SectionID
        {
            get;
            set;
        }
        public string SectionLabel
        {
            get;
            set;
        }

        public PriceLevelSection()
        {
        }
    }

    
}